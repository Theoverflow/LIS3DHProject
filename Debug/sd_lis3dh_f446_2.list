
sd_lis3dh_f446_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1d8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  0800b3a8  0800b3a8  0001b3a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b820  0800b820  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b820  0800b820  0001b820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b828  0800b828  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b828  0800b828  0001b828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b82c  0800b82c  0001b82c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800b830  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001050  200001f4  0800ba24  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001244  0800ba24  00021244  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b10a  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000332c  00000000  00000000  0003b32e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015e0  00000000  00000000  0003e660  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001480  00000000  00000000  0003fc40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000252d1  00000000  00000000  000410c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011adc  00000000  00000000  00066391  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d6a62  00000000  00000000  00077e6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014e8cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006688  00000000  00000000  0014e94c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b390 	.word	0x0800b390

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f8 	.word	0x200001f8
 800020c:	0800b390 	.word	0x0800b390

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b972 	b.w	8000ee4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	4688      	mov	r8, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14b      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4615      	mov	r5, r2
 8000c2a:	d967      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0720 	rsb	r7, r2, #32
 8000c36:	fa01 f302 	lsl.w	r3, r1, r2
 8000c3a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c3e:	4095      	lsls	r5, r2
 8000c40:	ea47 0803 	orr.w	r8, r7, r3
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c50:	fa1f fc85 	uxth.w	ip, r5
 8000c54:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c58:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18eb      	adds	r3, r5, r3
 8000c66:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c6a:	f080 811b 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8118 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000c74:	3f02      	subs	r7, #2
 8000c76:	442b      	add	r3, r5
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8c:	45a4      	cmp	ip, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	192c      	adds	r4, r5, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8107 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	f240 8104 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	442c      	add	r4, r5
 8000ca4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca8:	eba4 040c 	sub.w	r4, r4, ip
 8000cac:	2700      	movs	r7, #0
 8000cae:	b11e      	cbz	r6, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb8:	4639      	mov	r1, r7
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d909      	bls.n	8000cd6 <__udivmoddi4+0xbe>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80eb 	beq.w	8000e9e <__udivmoddi4+0x286>
 8000cc8:	2700      	movs	r7, #0
 8000cca:	e9c6 0100 	strd	r0, r1, [r6]
 8000cce:	4638      	mov	r0, r7
 8000cd0:	4639      	mov	r1, r7
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	fab3 f783 	clz	r7, r3
 8000cda:	2f00      	cmp	r7, #0
 8000cdc:	d147      	bne.n	8000d6e <__udivmoddi4+0x156>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d302      	bcc.n	8000ce8 <__udivmoddi4+0xd0>
 8000ce2:	4282      	cmp	r2, r0
 8000ce4:	f200 80fa 	bhi.w	8000edc <__udivmoddi4+0x2c4>
 8000ce8:	1a84      	subs	r4, r0, r2
 8000cea:	eb61 0303 	sbc.w	r3, r1, r3
 8000cee:	2001      	movs	r0, #1
 8000cf0:	4698      	mov	r8, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d0e0      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000cf6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cfa:	e7dd      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000cfc:	b902      	cbnz	r2, 8000d00 <__udivmoddi4+0xe8>
 8000cfe:	deff      	udf	#255	; 0xff
 8000d00:	fab2 f282 	clz	r2, r2
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f040 808f 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d0a:	1b49      	subs	r1, r1, r5
 8000d0c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d10:	fa1f f885 	uxth.w	r8, r5
 8000d14:	2701      	movs	r7, #1
 8000d16:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d24:	fb08 f10c 	mul.w	r1, r8, ip
 8000d28:	4299      	cmp	r1, r3
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2c:	18eb      	adds	r3, r5, r3
 8000d2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4299      	cmp	r1, r3
 8000d36:	f200 80cd 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d3a:	4684      	mov	ip, r0
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	b2a3      	uxth	r3, r4
 8000d40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d44:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d48:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d4c:	fb08 f800 	mul.w	r8, r8, r0
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x14c>
 8000d54:	192c      	adds	r4, r5, r4
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x14a>
 8000d5c:	45a0      	cmp	r8, r4
 8000d5e:	f200 80b6 	bhi.w	8000ece <__udivmoddi4+0x2b6>
 8000d62:	4618      	mov	r0, r3
 8000d64:	eba4 0408 	sub.w	r4, r4, r8
 8000d68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d6c:	e79f      	b.n	8000cae <__udivmoddi4+0x96>
 8000d6e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d72:	40bb      	lsls	r3, r7
 8000d74:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d78:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d7c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d80:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d84:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d88:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d8c:	4325      	orrs	r5, r4
 8000d8e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d92:	0c2c      	lsrs	r4, r5, #16
 8000d94:	fb08 3319 	mls	r3, r8, r9, r3
 8000d98:	fa1f fa8e 	uxth.w	sl, lr
 8000d9c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000da0:	fb09 f40a 	mul.w	r4, r9, sl
 8000da4:	429c      	cmp	r4, r3
 8000da6:	fa02 f207 	lsl.w	r2, r2, r7
 8000daa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1e 0303 	adds.w	r3, lr, r3
 8000db4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db8:	f080 8087 	bcs.w	8000eca <__udivmoddi4+0x2b2>
 8000dbc:	429c      	cmp	r4, r3
 8000dbe:	f240 8084 	bls.w	8000eca <__udivmoddi4+0x2b2>
 8000dc2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dc6:	4473      	add	r3, lr
 8000dc8:	1b1b      	subs	r3, r3, r4
 8000dca:	b2ad      	uxth	r5, r5
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ddc:	45a2      	cmp	sl, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1e 0404 	adds.w	r4, lr, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	d26b      	bcs.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dea:	45a2      	cmp	sl, r4
 8000dec:	d969      	bls.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dee:	3802      	subs	r0, #2
 8000df0:	4474      	add	r4, lr
 8000df2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000df6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dfa:	eba4 040a 	sub.w	r4, r4, sl
 8000dfe:	454c      	cmp	r4, r9
 8000e00:	46c2      	mov	sl, r8
 8000e02:	464b      	mov	r3, r9
 8000e04:	d354      	bcc.n	8000eb0 <__udivmoddi4+0x298>
 8000e06:	d051      	beq.n	8000eac <__udivmoddi4+0x294>
 8000e08:	2e00      	cmp	r6, #0
 8000e0a:	d069      	beq.n	8000ee0 <__udivmoddi4+0x2c8>
 8000e0c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e10:	eb64 0403 	sbc.w	r4, r4, r3
 8000e14:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e18:	40fd      	lsrs	r5, r7
 8000e1a:	40fc      	lsrs	r4, r7
 8000e1c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e20:	e9c6 5400 	strd	r5, r4, [r6]
 8000e24:	2700      	movs	r7, #0
 8000e26:	e747      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000e28:	f1c2 0320 	rsb	r3, r2, #32
 8000e2c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e30:	4095      	lsls	r5, r2
 8000e32:	fa01 f002 	lsl.w	r0, r1, r2
 8000e36:	fa21 f303 	lsr.w	r3, r1, r3
 8000e3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e3e:	4338      	orrs	r0, r7
 8000e40:	0c01      	lsrs	r1, r0, #16
 8000e42:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e46:	fa1f f885 	uxth.w	r8, r5
 8000e4a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb07 f308 	mul.w	r3, r7, r8
 8000e56:	428b      	cmp	r3, r1
 8000e58:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5c:	d907      	bls.n	8000e6e <__udivmoddi4+0x256>
 8000e5e:	1869      	adds	r1, r5, r1
 8000e60:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e64:	d22f      	bcs.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d92d      	bls.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e6a:	3f02      	subs	r7, #2
 8000e6c:	4429      	add	r1, r5
 8000e6e:	1acb      	subs	r3, r1, r3
 8000e70:	b281      	uxth	r1, r0
 8000e72:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e76:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb00 f308 	mul.w	r3, r0, r8
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x27e>
 8000e86:	1869      	adds	r1, r5, r1
 8000e88:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e8c:	d217      	bcs.n	8000ebe <__udivmoddi4+0x2a6>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d915      	bls.n	8000ebe <__udivmoddi4+0x2a6>
 8000e92:	3802      	subs	r0, #2
 8000e94:	4429      	add	r1, r5
 8000e96:	1ac9      	subs	r1, r1, r3
 8000e98:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e9c:	e73b      	b.n	8000d16 <__udivmoddi4+0xfe>
 8000e9e:	4637      	mov	r7, r6
 8000ea0:	4630      	mov	r0, r6
 8000ea2:	e709      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea4:	4607      	mov	r7, r0
 8000ea6:	e6e7      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	e6fb      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000eac:	4541      	cmp	r1, r8
 8000eae:	d2ab      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eb4:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb8:	3801      	subs	r0, #1
 8000eba:	4613      	mov	r3, r2
 8000ebc:	e7a4      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ebe:	4660      	mov	r0, ip
 8000ec0:	e7e9      	b.n	8000e96 <__udivmoddi4+0x27e>
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	e795      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec6:	4667      	mov	r7, ip
 8000ec8:	e7d1      	b.n	8000e6e <__udivmoddi4+0x256>
 8000eca:	4681      	mov	r9, r0
 8000ecc:	e77c      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	442c      	add	r4, r5
 8000ed2:	e747      	b.n	8000d64 <__udivmoddi4+0x14c>
 8000ed4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed8:	442b      	add	r3, r5
 8000eda:	e72f      	b.n	8000d3c <__udivmoddi4+0x124>
 8000edc:	4638      	mov	r0, r7
 8000ede:	e708      	b.n	8000cf2 <__udivmoddi4+0xda>
 8000ee0:	4637      	mov	r7, r6
 8000ee2:	e6e9      	b.n	8000cb8 <__udivmoddi4+0xa0>

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <lis3dh_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                        uint16_t len)
{
 8000ee8:	b590      	push	{r4, r7, lr}
 8000eea:	b087      	sub	sp, #28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	607a      	str	r2, [r7, #4]
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	72fb      	strb	r3, [r7, #11]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	685c      	ldr	r4, [r3, #4]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	6898      	ldr	r0, [r3, #8]
 8000f04:	893b      	ldrh	r3, [r7, #8]
 8000f06:	7af9      	ldrb	r1, [r7, #11]
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	47a0      	blx	r4
 8000f0c:	6178      	str	r0, [r7, #20]
  return ret;
 8000f0e:	697b      	ldr	r3, [r7, #20]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	371c      	adds	r7, #28
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd90      	pop	{r4, r7, pc}

08000f18 <lis3dh_write_reg>:
  *
  */
int32_t lis3dh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8000f18:	b590      	push	{r4, r7, lr}
 8000f1a:	b087      	sub	sp, #28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	607a      	str	r2, [r7, #4]
 8000f22:	461a      	mov	r2, r3
 8000f24:	460b      	mov	r3, r1
 8000f26:	72fb      	strb	r3, [r7, #11]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	681c      	ldr	r4, [r3, #0]
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	6898      	ldr	r0, [r3, #8]
 8000f34:	893b      	ldrh	r3, [r7, #8]
 8000f36:	7af9      	ldrb	r1, [r7, #11]
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	47a0      	blx	r4
 8000f3c:	6178      	str	r0, [r7, #20]
  return ret;
 8000f3e:	697b      	ldr	r3, [r7, #20]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	371c      	adds	r7, #28
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd90      	pop	{r4, r7, pc}

08000f48 <lis3dh_from_fs4_nm_to_mg>:
{
  return ( (float)lsb / 64.0f ) *  4.0f;
}

float lis3dh_from_fs4_nm_to_mg(int16_t lsb)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	80fb      	strh	r3, [r7, #6]
  return ( (float)lsb / 64.0f ) *  8.0f;
 8000f52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f56:	ee07 3a90 	vmov	s15, r3
 8000f5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f5e:	eddf 6a07 	vldr	s13, [pc, #28]	; 8000f7c <lis3dh_from_fs4_nm_to_mg+0x34>
 8000f62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f66:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8000f6a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000f6e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	42800000 	.word	0x42800000

08000f80 <lis3dh_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_operating_mode_set(stmdev_ctx_t *ctx,
                                  lis3dh_op_md_t val)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	70fb      	strb	r3, [r7, #3]
  lis3dh_ctrl_reg1_t ctrl_reg1;
  lis3dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;
  ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG1,
 8000f8c:	f107 0210 	add.w	r2, r7, #16
 8000f90:	2301      	movs	r3, #1
 8000f92:	2120      	movs	r1, #32
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f7ff ffa7 	bl	8000ee8 <lis3dh_read_reg>
 8000f9a:	6178      	str	r0, [r7, #20]
                        (uint8_t *)&ctrl_reg1, 1);

  if (ret == 0) {
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d107      	bne.n	8000fb2 <lis3dh_operating_mode_set+0x32>
    ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG4,
 8000fa2:	f107 020c 	add.w	r2, r7, #12
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	2123      	movs	r1, #35	; 0x23
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff ff9c 	bl	8000ee8 <lis3dh_read_reg>
 8000fb0:	6178      	str	r0, [r7, #20]
                          (uint8_t *)&ctrl_reg4, 1);
  }

  if (ret == 0) {
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d128      	bne.n	800100a <lis3dh_operating_mode_set+0x8a>
    if ( val == LIS3DH_HR_12bit ) {
 8000fb8:	78fb      	ldrb	r3, [r7, #3]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d107      	bne.n	8000fce <lis3dh_operating_mode_set+0x4e>
      ctrl_reg1.lpen = 0;
 8000fbe:	7c3b      	ldrb	r3, [r7, #16]
 8000fc0:	f36f 03c3 	bfc	r3, #3, #1
 8000fc4:	743b      	strb	r3, [r7, #16]
      ctrl_reg4.hr   = 1;
 8000fc6:	7b3b      	ldrb	r3, [r7, #12]
 8000fc8:	f043 0308 	orr.w	r3, r3, #8
 8000fcc:	733b      	strb	r3, [r7, #12]
    }

    if (val == LIS3DH_NM_10bit) {
 8000fce:	78fb      	ldrb	r3, [r7, #3]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d107      	bne.n	8000fe4 <lis3dh_operating_mode_set+0x64>
      ctrl_reg1.lpen = 0;
 8000fd4:	7c3b      	ldrb	r3, [r7, #16]
 8000fd6:	f36f 03c3 	bfc	r3, #3, #1
 8000fda:	743b      	strb	r3, [r7, #16]
      ctrl_reg4.hr   = 0;
 8000fdc:	7b3b      	ldrb	r3, [r7, #12]
 8000fde:	f36f 03c3 	bfc	r3, #3, #1
 8000fe2:	733b      	strb	r3, [r7, #12]
    }

    if (val == LIS3DH_LP_8bit) {
 8000fe4:	78fb      	ldrb	r3, [r7, #3]
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d107      	bne.n	8000ffa <lis3dh_operating_mode_set+0x7a>
      ctrl_reg1.lpen = 1;
 8000fea:	7c3b      	ldrb	r3, [r7, #16]
 8000fec:	f043 0308 	orr.w	r3, r3, #8
 8000ff0:	743b      	strb	r3, [r7, #16]
      ctrl_reg4.hr   = 0;
 8000ff2:	7b3b      	ldrb	r3, [r7, #12]
 8000ff4:	f36f 03c3 	bfc	r3, #3, #1
 8000ff8:	733b      	strb	r3, [r7, #12]
    }

    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8000ffa:	f107 0210 	add.w	r2, r7, #16
 8000ffe:	2301      	movs	r3, #1
 8001000:	2120      	movs	r1, #32
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff ff88 	bl	8000f18 <lis3dh_write_reg>
 8001008:	6178      	str	r0, [r7, #20]
                           1);
  }

  if (ret == 0) {
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d107      	bne.n	8001020 <lis3dh_operating_mode_set+0xa0>
    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4,
 8001010:	f107 020c 	add.w	r2, r7, #12
 8001014:	2301      	movs	r3, #1
 8001016:	2123      	movs	r1, #35	; 0x23
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff ff7d 	bl	8000f18 <lis3dh_write_reg>
 800101e:	6178      	str	r0, [r7, #20]
                           1);
  }

  return ret;
 8001020:	697b      	ldr	r3, [r7, #20]
}
 8001022:	4618      	mov	r0, r3
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <lis3dh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_data_rate_set(stmdev_ctx_t *ctx, lis3dh_odr_t val)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b084      	sub	sp, #16
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
 8001032:	460b      	mov	r3, r1
 8001034:	70fb      	strb	r3, [r7, #3]
  lis3dh_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8001036:	f107 0208 	add.w	r2, r7, #8
 800103a:	2301      	movs	r3, #1
 800103c:	2120      	movs	r1, #32
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff ff52 	bl	8000ee8 <lis3dh_read_reg>
 8001044:	60f8      	str	r0, [r7, #12]
                        1);

  if (ret == 0) {
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d10f      	bne.n	800106c <lis3dh_data_rate_set+0x42>
    ctrl_reg1.odr = (uint8_t)val;
 800104c:	78fb      	ldrb	r3, [r7, #3]
 800104e:	f003 030f 	and.w	r3, r3, #15
 8001052:	b2da      	uxtb	r2, r3
 8001054:	7a3b      	ldrb	r3, [r7, #8]
 8001056:	f362 1307 	bfi	r3, r2, #4, #4
 800105a:	723b      	strb	r3, [r7, #8]
    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 800105c:	f107 0208 	add.w	r2, r7, #8
 8001060:	2301      	movs	r3, #1
 8001062:	2120      	movs	r1, #32
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff ff57 	bl	8000f18 <lis3dh_write_reg>
 800106a:	60f8      	str	r0, [r7, #12]
                           1);
  }

  return ret;
 800106c:	68fb      	ldr	r3, [r7, #12]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <lis3dh_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_full_scale_set(stmdev_ctx_t *ctx, lis3dh_fs_t val)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b084      	sub	sp, #16
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
 800107e:	460b      	mov	r3, r1
 8001080:	70fb      	strb	r3, [r7, #3]
  lis3dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;
  ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4,
 8001082:	f107 0208 	add.w	r2, r7, #8
 8001086:	2301      	movs	r3, #1
 8001088:	2123      	movs	r1, #35	; 0x23
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f7ff ff2c 	bl	8000ee8 <lis3dh_read_reg>
 8001090:	60f8      	str	r0, [r7, #12]
                        1);

  if (ret == 0) {
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d10f      	bne.n	80010b8 <lis3dh_full_scale_set+0x42>
    ctrl_reg4.fs = (uint8_t)val;
 8001098:	78fb      	ldrb	r3, [r7, #3]
 800109a:	f003 0303 	and.w	r3, r3, #3
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	7a3b      	ldrb	r3, [r7, #8]
 80010a2:	f362 1305 	bfi	r3, r2, #4, #2
 80010a6:	723b      	strb	r3, [r7, #8]
    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4,
 80010a8:	f107 0208 	add.w	r2, r7, #8
 80010ac:	2301      	movs	r3, #1
 80010ae:	2123      	movs	r1, #35	; 0x23
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff ff31 	bl	8000f18 <lis3dh_write_reg>
 80010b6:	60f8      	str	r0, [r7, #12]
                           1);
  }

  return ret;
 80010b8:	68fb      	ldr	r3, [r7, #12]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <lis3dh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b084      	sub	sp, #16
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
 80010ca:	460b      	mov	r3, r1
 80010cc:	70fb      	strb	r3, [r7, #3]
  lis3dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;
  ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4,
 80010ce:	f107 0208 	add.w	r2, r7, #8
 80010d2:	2301      	movs	r3, #1
 80010d4:	2123      	movs	r1, #35	; 0x23
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff ff06 	bl	8000ee8 <lis3dh_read_reg>
 80010dc:	60f8      	str	r0, [r7, #12]
                        1);

  if (ret == 0) {
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d10f      	bne.n	8001104 <lis3dh_block_data_update_set+0x42>
    ctrl_reg4.bdu = val;
 80010e4:	78fb      	ldrb	r3, [r7, #3]
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	7a3b      	ldrb	r3, [r7, #8]
 80010ee:	f362 13c7 	bfi	r3, r2, #7, #1
 80010f2:	723b      	strb	r3, [r7, #8]
    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4,
 80010f4:	f107 0208 	add.w	r2, r7, #8
 80010f8:	2301      	movs	r3, #1
 80010fa:	2123      	movs	r1, #35	; 0x23
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f7ff ff0b 	bl	8000f18 <lis3dh_write_reg>
 8001102:	60f8      	str	r0, [r7, #12]
                           1);
  }

  return ret;
 8001104:	68fb      	ldr	r3, [r7, #12]
}
 8001106:	4618      	mov	r0, r3
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <lis3dh_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b086      	sub	sp, #24
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
 8001116:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lis3dh_read_reg(ctx, LIS3DH_OUT_X_L, buff, 6);
 8001118:	f107 020c 	add.w	r2, r7, #12
 800111c:	2306      	movs	r3, #6
 800111e:	2128      	movs	r1, #40	; 0x28
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff fee1 	bl	8000ee8 <lis3dh_read_reg>
 8001126:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001128:	7b7b      	ldrb	r3, [r7, #13]
 800112a:	b21a      	sxth	r2, r3
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001136:	b29b      	uxth	r3, r3
 8001138:	021b      	lsls	r3, r3, #8
 800113a:	b29a      	uxth	r2, r3
 800113c:	7b3b      	ldrb	r3, [r7, #12]
 800113e:	b29b      	uxth	r3, r3
 8001140:	4413      	add	r3, r2
 8001142:	b29b      	uxth	r3, r3
 8001144:	b21a      	sxth	r2, r3
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800114a:	7bfa      	ldrb	r2, [r7, #15]
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	3302      	adds	r3, #2
 8001150:	b212      	sxth	r2, r2
 8001152:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	3302      	adds	r3, #2
 8001158:	f9b3 3000 	ldrsh.w	r3, [r3]
 800115c:	b29b      	uxth	r3, r3
 800115e:	021b      	lsls	r3, r3, #8
 8001160:	b29a      	uxth	r2, r3
 8001162:	7bbb      	ldrb	r3, [r7, #14]
 8001164:	b29b      	uxth	r3, r3
 8001166:	4413      	add	r3, r2
 8001168:	b29a      	uxth	r2, r3
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	3302      	adds	r3, #2
 800116e:	b212      	sxth	r2, r2
 8001170:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001172:	7c7a      	ldrb	r2, [r7, #17]
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	3304      	adds	r3, #4
 8001178:	b212      	sxth	r2, r2
 800117a:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	3304      	adds	r3, #4
 8001180:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001184:	b29b      	uxth	r3, r3
 8001186:	021b      	lsls	r3, r3, #8
 8001188:	b29a      	uxth	r2, r3
 800118a:	7c3b      	ldrb	r3, [r7, #16]
 800118c:	b29b      	uxth	r3, r3
 800118e:	4413      	add	r3, r2
 8001190:	b29a      	uxth	r2, r3
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	3304      	adds	r3, #4
 8001196:	b212      	sxth	r2, r2
 8001198:	801a      	strh	r2, [r3, #0]
  return ret;
 800119a:	697b      	ldr	r3, [r7, #20]
}
 800119c:	4618      	mov	r0, r3
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <lis3dh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lis3dh_read_reg(ctx, LIS3DH_WHO_AM_I, buff, 1);
 80011ae:	2301      	movs	r3, #1
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	210f      	movs	r1, #15
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff fe97 	bl	8000ee8 <lis3dh_read_reg>
 80011ba:	60f8      	str	r0, [r7, #12]
  return ret;
 80011bc:	68fb      	ldr	r3, [r7, #12]
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <lis3dh_status_get>:
  * @param  val      register STATUS_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_status_get(stmdev_ctx_t *ctx, lis3dh_status_reg_t *val)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b084      	sub	sp, #16
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
 80011ce:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lis3dh_read_reg(ctx, LIS3DH_STATUS_REG, (uint8_t *) val, 1);
 80011d0:	2301      	movs	r3, #1
 80011d2:	683a      	ldr	r2, [r7, #0]
 80011d4:	2127      	movs	r1, #39	; 0x27
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff fe86 	bl	8000ee8 <lis3dh_read_reg>
 80011dc:	60f8      	str	r0, [r7, #12]
  return ret;
 80011de:	68fb      	ldr	r3, [r7, #12]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <myprintf>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 80011e8:	b40f      	push	{r0, r1, r2, r3}
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011fe:	480b      	ldr	r0, [pc, #44]	; (800122c <myprintf+0x44>)
 8001200:	f008 fcf6 	bl	8009bf0 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 8001204:	4809      	ldr	r0, [pc, #36]	; (800122c <myprintf+0x44>)
 8001206:	f7ff f803 	bl	8000210 <strlen>
 800120a:	4603      	mov	r3, r0
 800120c:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	b29a      	uxth	r2, r3
 8001212:	f04f 33ff 	mov.w	r3, #4294967295
 8001216:	4905      	ldr	r1, [pc, #20]	; (800122c <myprintf+0x44>)
 8001218:	4805      	ldr	r0, [pc, #20]	; (8001230 <myprintf+0x48>)
 800121a:	f004 f9f0 	bl	80055fe <HAL_UART_Transmit>
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001228:	b004      	add	sp, #16
 800122a:	4770      	bx	lr
 800122c:	20000678 	.word	0x20000678
 8001230:	20000b38 	.word	0x20000b38

08001234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001234:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001238:	b090      	sub	sp, #64	; 0x40
 800123a:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800123c:	f000 fe76 	bl	8001f2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001240:	f000 f9bc 	bl	80015bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001244:	f000 fb3a 	bl	80018bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001248:	f000 fb0e 	bl	8001868 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800124c:	f000 fa48 	bl	80016e0 <MX_I2C1_Init>
  MX_FATFS_Init();
 8001250:	f004 fe34 	bl	8005ebc <MX_FATFS_Init>
  MX_SPI2_Init();
 8001254:	f000 fad2 	bl	80017fc <MX_SPI2_Init>
  MX_RTC_Init();
 8001258:	f000 fa70 	bl	800173c <MX_RTC_Init>
  /***** INIT ACCELEROMETRE *****/
  stmdev_ctx_t dev_ctx;
    lis3dh_reg_t reg;
    uint8_t j;
    /* Initialize mems driver interface */
    dev_ctx.write_reg = platform_write;
 800125c:	4bbb      	ldr	r3, [pc, #748]	; (800154c <main+0x318>)
 800125e:	613b      	str	r3, [r7, #16]
    dev_ctx.read_reg = platform_read;
 8001260:	4bbb      	ldr	r3, [pc, #748]	; (8001550 <main+0x31c>)
 8001262:	617b      	str	r3, [r7, #20]
    dev_ctx.handle = &SENSOR_BUS;
 8001264:	4bbb      	ldr	r3, [pc, #748]	; (8001554 <main+0x320>)
 8001266:	61bb      	str	r3, [r7, #24]
   /* Wait sensor boot time */
    HAL_Delay(5);
 8001268:	2005      	movs	r0, #5
 800126a:	f000 fed1 	bl	8002010 <HAL_Delay>
    /* Check device ID */
    lis3dh_device_id_get(&dev_ctx, &reg.byte);
 800126e:	f107 020c 	add.w	r2, r7, #12
 8001272:	f107 0310 	add.w	r3, r7, #16
 8001276:	4611      	mov	r1, r2
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff ff93 	bl	80011a4 <lis3dh_device_id_get>
    if (reg.byte != LIS3DH_ID) {
 800127e:	7b3b      	ldrb	r3, [r7, #12]
 8001280:	2b33      	cmp	r3, #51	; 0x33
 8001282:	d00a      	beq.n	800129a <main+0x66>
      while (reg.byte != LIS3DH_ID) {
 8001284:	e006      	b.n	8001294 <main+0x60>
  			myprintf("Error sensor\r\n");
 8001286:	48b4      	ldr	r0, [pc, #720]	; (8001558 <main+0x324>)
 8001288:	f7ff ffae 	bl	80011e8 <myprintf>
  			HAL_Delay(1000);
 800128c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001290:	f000 febe 	bl	8002010 <HAL_Delay>
      while (reg.byte != LIS3DH_ID) {
 8001294:	7b3b      	ldrb	r3, [r7, #12]
 8001296:	2b33      	cmp	r3, #51	; 0x33
 8001298:	d1f5      	bne.n	8001286 <main+0x52>
        /* manage here device not found */
      }
    }
  	/* Enable Block Data Update. */
    lis3dh_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 800129a:	f107 0310 	add.w	r3, r7, #16
 800129e:	2101      	movs	r1, #1
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff0e 	bl	80010c2 <lis3dh_block_data_update_set>
    /* Set full scale to 2g. */
    lis3dh_full_scale_set(&dev_ctx, LIS3DH_4g);
 80012a6:	f107 0310 	add.w	r3, r7, #16
 80012aa:	2101      	movs	r1, #1
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff fee2 	bl	8001076 <lis3dh_full_scale_set>
    /* Set device in normal mode. */
    lis3dh_operating_mode_set(&dev_ctx, LIS3DH_NM_10bit);
 80012b2:	f107 0310 	add.w	r3, r7, #16
 80012b6:	2101      	movs	r1, #1
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff fe61 	bl	8000f80 <lis3dh_operating_mode_set>
    /* Set Output Data Rate to 1Hz. */
    lis3dh_data_rate_set(&dev_ctx, LIS3DH_ODR_5kHz376_LP_1kHz344_NM_HP);
 80012be:	f107 0310 	add.w	r3, r7, #16
 80012c2:	2109      	movs	r1, #9
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff feb0 	bl	800102a <lis3dh_data_rate_set>
    /* Wait stable output */
    HAL_Delay(90);
 80012ca:	205a      	movs	r0, #90	; 0x5a
 80012cc:	f000 fea0 	bl	8002010 <HAL_Delay>
    /*****END INIT ACCELEROMETRE*****/




  myprintf("\r\n~ SD card demo by Theo & pilou ~\r\n\r\n");
 80012d0:	48a2      	ldr	r0, [pc, #648]	; (800155c <main+0x328>)
 80012d2:	f7ff ff89 	bl	80011e8 <myprintf>

    HAL_Delay(1000); //a short delay is important to let the SD card settle
 80012d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012da:	f000 fe99 	bl	8002010 <HAL_Delay>

    //some variables for FatFs

    //Open the file system
    fres = f_mount(&FatFs, "", 1); //1=mount now
 80012de:	2201      	movs	r2, #1
 80012e0:	499f      	ldr	r1, [pc, #636]	; (8001560 <main+0x32c>)
 80012e2:	48a0      	ldr	r0, [pc, #640]	; (8001564 <main+0x330>)
 80012e4:	f007 f86e 	bl	80083c4 <f_mount>
 80012e8:	4603      	mov	r3, r0
 80012ea:	461a      	mov	r2, r3
 80012ec:	4b9e      	ldr	r3, [pc, #632]	; (8001568 <main+0x334>)
 80012ee:	701a      	strb	r2, [r3, #0]
    if (fres != FR_OK) {
 80012f0:	4b9d      	ldr	r3, [pc, #628]	; (8001568 <main+0x334>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d006      	beq.n	8001306 <main+0xd2>
  	myprintf("f_mount error (%i)\r\n", fres);
 80012f8:	4b9b      	ldr	r3, [pc, #620]	; (8001568 <main+0x334>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	4619      	mov	r1, r3
 80012fe:	489b      	ldr	r0, [pc, #620]	; (800156c <main+0x338>)
 8001300:	f7ff ff72 	bl	80011e8 <myprintf>
  	while(1);
 8001304:	e7fe      	b.n	8001304 <main+0xd0>
    //Let's get some statistics from the SD card
    DWORD free_clusters, free_sectors, total_sectors;

    FATFS* getFreeFs;

    fres = f_getfree("", &free_clusters, &getFreeFs);
 8001306:	1d3a      	adds	r2, r7, #4
 8001308:	f107 0308 	add.w	r3, r7, #8
 800130c:	4619      	mov	r1, r3
 800130e:	4894      	ldr	r0, [pc, #592]	; (8001560 <main+0x32c>)
 8001310:	f007 fe82 	bl	8009018 <f_getfree>
 8001314:	4603      	mov	r3, r0
 8001316:	461a      	mov	r2, r3
 8001318:	4b93      	ldr	r3, [pc, #588]	; (8001568 <main+0x334>)
 800131a:	701a      	strb	r2, [r3, #0]
    if (fres != FR_OK) {
 800131c:	4b92      	ldr	r3, [pc, #584]	; (8001568 <main+0x334>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d000      	beq.n	8001326 <main+0xf2>
  	while(1);
 8001324:	e7fe      	b.n	8001324 <main+0xf0>
    }

    //Formula comes from ChaN's documentation
    total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	3b02      	subs	r3, #2
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	8952      	ldrh	r2, [r2, #10]
 8001330:	fb02 f303 	mul.w	r3, r2, r3
 8001334:	623b      	str	r3, [r7, #32]
    free_sectors = free_clusters * getFreeFs->csize;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	895b      	ldrh	r3, [r3, #10]
 800133a:	461a      	mov	r2, r3
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	fb03 f302 	mul.w	r3, r3, r2
 8001342:	61fb      	str	r3, [r7, #28]

    myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 8001344:	6a3b      	ldr	r3, [r7, #32]
 8001346:	0859      	lsrs	r1, r3, #1
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	085b      	lsrs	r3, r3, #1
 800134c:	461a      	mov	r2, r3
 800134e:	4888      	ldr	r0, [pc, #544]	; (8001570 <main+0x33c>)
 8001350:	f7ff ff4a 	bl	80011e8 <myprintf>
  	myprintf("f_getfree error (%i)\r\n", fres);
 8001354:	4b84      	ldr	r3, [pc, #528]	; (8001568 <main+0x334>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	4619      	mov	r1, r3
 800135a:	4886      	ldr	r0, [pc, #536]	; (8001574 <main+0x340>)
 800135c:	f7ff ff44 	bl	80011e8 <myprintf>

    //Be a tidy kiwi - don't forget to close your file!
    if(fres == FR_OK) {
 8001360:	4b81      	ldr	r3, [pc, #516]	; (8001568 <main+0x334>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d103      	bne.n	8001370 <main+0x13c>
     	myprintf("fr ko ok!\r\n");
 8001368:	4883      	ldr	r0, [pc, #524]	; (8001578 <main+0x344>)
 800136a:	f7ff ff3d 	bl	80011e8 <myprintf>
 800136e:	e002      	b.n	8001376 <main+0x142>
       } else {
     	myprintf("fr ko KO\r\n");
 8001370:	4882      	ldr	r0, [pc, #520]	; (800157c <main+0x348>)
 8001372:	f7ff ff39 	bl	80011e8 <myprintf>
       }

    //Now let's try and write a file "write.txt"
    fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS);
 8001376:	2212      	movs	r2, #18
 8001378:	4981      	ldr	r1, [pc, #516]	; (8001580 <main+0x34c>)
 800137a:	4882      	ldr	r0, [pc, #520]	; (8001584 <main+0x350>)
 800137c:	f007 f868 	bl	8008450 <f_open>
 8001380:	4603      	mov	r3, r0
 8001382:	461a      	mov	r2, r3
 8001384:	4b78      	ldr	r3, [pc, #480]	; (8001568 <main+0x334>)
 8001386:	701a      	strb	r2, [r3, #0]
    if(fres == FR_OK) {
 8001388:	4b77      	ldr	r3, [pc, #476]	; (8001568 <main+0x334>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d117      	bne.n	80013c0 <main+0x18c>
  	myprintf("Now able to write on 'write.txt'\r\n");
 8001390:	487d      	ldr	r0, [pc, #500]	; (8001588 <main+0x354>)
 8001392:	f7ff ff29 	bl	80011e8 <myprintf>
  	fres = f_lseek(&fil,f_size(&fil));
 8001396:	4b7b      	ldr	r3, [pc, #492]	; (8001584 <main+0x350>)
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	4619      	mov	r1, r3
 800139c:	4879      	ldr	r0, [pc, #484]	; (8001584 <main+0x350>)
 800139e:	f007 fc32 	bl	8008c06 <f_lseek>
 80013a2:	4603      	mov	r3, r0
 80013a4:	461a      	mov	r2, r3
 80013a6:	4b70      	ldr	r3, [pc, #448]	; (8001568 <main+0x334>)
 80013a8:	701a      	strb	r2, [r3, #0]
  	fres = f_write(&fil, tx_buffer, 19, &bytesWrote);
 80013aa:	4b78      	ldr	r3, [pc, #480]	; (800158c <main+0x358>)
 80013ac:	2213      	movs	r2, #19
 80013ae:	4978      	ldr	r1, [pc, #480]	; (8001590 <main+0x35c>)
 80013b0:	4874      	ldr	r0, [pc, #464]	; (8001584 <main+0x350>)
 80013b2:	f007 fa0b 	bl	80087cc <f_write>
 80013b6:	4603      	mov	r3, r0
 80013b8:	461a      	mov	r2, r3
 80013ba:	4b6b      	ldr	r3, [pc, #428]	; (8001568 <main+0x334>)
 80013bc:	701a      	strb	r2, [r3, #0]
 80013be:	e005      	b.n	80013cc <main+0x198>
    } else {
  	myprintf("f_open error (%i)\r\n", fres);
 80013c0:	4b69      	ldr	r3, [pc, #420]	; (8001568 <main+0x334>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	4619      	mov	r1, r3
 80013c6:	4873      	ldr	r0, [pc, #460]	; (8001594 <main+0x360>)
 80013c8:	f7ff ff0e 	bl	80011e8 <myprintf>
    }
    fres = f_close(&fil);
 80013cc:	486d      	ldr	r0, [pc, #436]	; (8001584 <main+0x350>)
 80013ce:	f007 fbf0 	bl	8008bb2 <f_close>
 80013d2:	4603      	mov	r3, r0
 80013d4:	461a      	mov	r2, r3
 80013d6:	4b64      	ldr	r3, [pc, #400]	; (8001568 <main+0x334>)
 80013d8:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {
    	if(STATE == 1)
 80013da:	4b6f      	ldr	r3, [pc, #444]	; (8001598 <main+0x364>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	f040 8087 	bne.w	80014f2 <main+0x2be>
    	{
    	do {lis3dh_status_get(&dev_ctx, &reg.status_reg);
 80013e4:	f107 020c 	add.w	r2, r7, #12
 80013e8:	f107 0310 	add.w	r3, r7, #16
 80013ec:	4611      	mov	r1, r2
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fee9 	bl	80011c6 <lis3dh_status_get>
    	        } while (!reg.status_reg.zyxda);
 80013f4:	7b3b      	ldrb	r3, [r7, #12]
 80013f6:	f003 0308 	and.w	r3, r3, #8
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d0f1      	beq.n	80013e4 <main+0x1b0>

    	   /* Read dummy data and discard it */
    	       	        	  lis3dh_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 8001400:	f107 0310 	add.w	r3, r7, #16
 8001404:	4965      	ldr	r1, [pc, #404]	; (800159c <main+0x368>)
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fe81 	bl	800110e <lis3dh_acceleration_raw_get>
    	       	        /* Read 5 sample and get the average vale for each axis */
    	       	        	memset(acceleration_mg, 0x00, 3 * sizeof(float));
 800140c:	220c      	movs	r2, #12
 800140e:	2100      	movs	r1, #0
 8001410:	4863      	ldr	r0, [pc, #396]	; (80015a0 <main+0x36c>)
 8001412:	f007 ff3d 	bl	8009290 <memset>

    	        	    /* Read data and accumulate the mg value */
    	        	    lis3dh_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 8001416:	f107 0310 	add.w	r3, r7, #16
 800141a:	4960      	ldr	r1, [pc, #384]	; (800159c <main+0x368>)
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff fe76 	bl	800110e <lis3dh_acceleration_raw_get>

    	        	    for (j = 0; j < 3; j++) {
 8001422:	2300      	movs	r3, #0
 8001424:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001428:	e01e      	b.n	8001468 <main+0x234>
    	        	      acceleration_mg[j] += lis3dh_from_fs4_nm_to_mg(data_raw_acceleration[j]);
 800142a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800142e:	4a5b      	ldr	r2, [pc, #364]	; (800159c <main+0x368>)
 8001430:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff fd87 	bl	8000f48 <lis3dh_from_fs4_nm_to_mg>
 800143a:	eeb0 7a40 	vmov.f32	s14, s0
 800143e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001442:	4a57      	ldr	r2, [pc, #348]	; (80015a0 <main+0x36c>)
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	edd3 7a00 	vldr	s15, [r3]
 800144c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001450:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001454:	4a52      	ldr	r2, [pc, #328]	; (80015a0 <main+0x36c>)
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	edc3 7a00 	vstr	s15, [r3]
    	        	    for (j = 0; j < 3; j++) {
 800145e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001462:	3301      	adds	r3, #1
 8001464:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001468:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800146c:	2b02      	cmp	r3, #2
 800146e:	d9dc      	bls.n	800142a <main+0x1f6>
    	        	    						}
    	        	    HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 8001470:	2200      	movs	r2, #0
 8001472:	494c      	ldr	r1, [pc, #304]	; (80015a4 <main+0x370>)
 8001474:	484c      	ldr	r0, [pc, #304]	; (80015a8 <main+0x374>)
 8001476:	f003 fbc5 	bl	8004c04 <HAL_RTC_GetTime>
    	        		RTC_ShowMeTime(ShowTime, ShowDate );
 800147a:	494c      	ldr	r1, [pc, #304]	; (80015ac <main+0x378>)
 800147c:	484c      	ldr	r0, [pc, #304]	; (80015b0 <main+0x37c>)
 800147e:	f000 fb25 	bl	8001acc <RTC_ShowMeTime>
    	        		sprintf((char *)tx_buffer, "%s : %4.0f;%4.0f;%4.0f \r\n",ShowTime, acceleration_mg[0],acceleration_mg[1],acceleration_mg[2]);
 8001482:	4b47      	ldr	r3, [pc, #284]	; (80015a0 <main+0x36c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff f87e 	bl	8000588 <__aeabi_f2d>
 800148c:	4604      	mov	r4, r0
 800148e:	460d      	mov	r5, r1
 8001490:	4b43      	ldr	r3, [pc, #268]	; (80015a0 <main+0x36c>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff f877 	bl	8000588 <__aeabi_f2d>
 800149a:	4680      	mov	r8, r0
 800149c:	4689      	mov	r9, r1
 800149e:	4b40      	ldr	r3, [pc, #256]	; (80015a0 <main+0x36c>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff f870 	bl	8000588 <__aeabi_f2d>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80014b0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80014b4:	e9cd 4500 	strd	r4, r5, [sp]
 80014b8:	4a3d      	ldr	r2, [pc, #244]	; (80015b0 <main+0x37c>)
 80014ba:	493e      	ldr	r1, [pc, #248]	; (80015b4 <main+0x380>)
 80014bc:	4834      	ldr	r0, [pc, #208]	; (8001590 <main+0x35c>)
 80014be:	f008 fb4b 	bl	8009b58 <siprintf>
    	        		fres = f_lseek(&fil,f_size(&fil));
 80014c2:	4b30      	ldr	r3, [pc, #192]	; (8001584 <main+0x350>)
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	4619      	mov	r1, r3
 80014c8:	482e      	ldr	r0, [pc, #184]	; (8001584 <main+0x350>)
 80014ca:	f007 fb9c 	bl	8008c06 <f_lseek>
 80014ce:	4603      	mov	r3, r0
 80014d0:	461a      	mov	r2, r3
 80014d2:	4b25      	ldr	r3, [pc, #148]	; (8001568 <main+0x334>)
 80014d4:	701a      	strb	r2, [r3, #0]
    	        		fres = f_write(&fil, tx_buffer, strlen((char const *)tx_buffer), &bytesWrote);
 80014d6:	482e      	ldr	r0, [pc, #184]	; (8001590 <main+0x35c>)
 80014d8:	f7fe fe9a 	bl	8000210 <strlen>
 80014dc:	4602      	mov	r2, r0
 80014de:	4b2b      	ldr	r3, [pc, #172]	; (800158c <main+0x358>)
 80014e0:	492b      	ldr	r1, [pc, #172]	; (8001590 <main+0x35c>)
 80014e2:	4828      	ldr	r0, [pc, #160]	; (8001584 <main+0x350>)
 80014e4:	f007 f972 	bl	80087cc <f_write>
 80014e8:	4603      	mov	r3, r0
 80014ea:	461a      	mov	r2, r3
 80014ec:	4b1e      	ldr	r3, [pc, #120]	; (8001568 <main+0x334>)
 80014ee:	701a      	strb	r2, [r3, #0]
 80014f0:	e773      	b.n	80013da <main+0x1a6>


    	}
    	else if(STATE == 0)
 80014f2:	4b29      	ldr	r3, [pc, #164]	; (8001598 <main+0x364>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d118      	bne.n	800152c <main+0x2f8>
    	{
    		HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 80014fa:	2120      	movs	r1, #32
 80014fc:	482e      	ldr	r0, [pc, #184]	; (80015b8 <main+0x384>)
 80014fe:	f001 fa0e 	bl	800291e <HAL_GPIO_TogglePin>
    		HAL_Delay(500);
 8001502:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001506:	f000 fd83 	bl	8002010 <HAL_Delay>
    		HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 800150a:	2120      	movs	r1, #32
 800150c:	482a      	ldr	r0, [pc, #168]	; (80015b8 <main+0x384>)
 800150e:	f001 fa06 	bl	800291e <HAL_GPIO_TogglePin>
    		HAL_Delay(500);
 8001512:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001516:	f000 fd7b 	bl	8002010 <HAL_Delay>
    		HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 800151a:	2120      	movs	r1, #32
 800151c:	4826      	ldr	r0, [pc, #152]	; (80015b8 <main+0x384>)
 800151e:	f001 f9fe 	bl	800291e <HAL_GPIO_TogglePin>
    		HAL_Delay(500);
 8001522:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001526:	f000 fd73 	bl	8002010 <HAL_Delay>
 800152a:	e756      	b.n	80013da <main+0x1a6>
    	}
    	else if(STATE == 2)
 800152c:	4b1a      	ldr	r3, [pc, #104]	; (8001598 <main+0x364>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b02      	cmp	r3, #2
 8001532:	f47f af52 	bne.w	80013da <main+0x1a6>
    	{
    		STATE=0;
 8001536:	4b18      	ldr	r3, [pc, #96]	; (8001598 <main+0x364>)
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
    		fres = f_close(&fil);
 800153c:	4811      	ldr	r0, [pc, #68]	; (8001584 <main+0x350>)
 800153e:	f007 fb38 	bl	8008bb2 <f_close>
 8001542:	4603      	mov	r3, r0
 8001544:	461a      	mov	r2, r3
 8001546:	4b08      	ldr	r3, [pc, #32]	; (8001568 <main+0x334>)
 8001548:	701a      	strb	r2, [r3, #0]
    	if(STATE == 1)
 800154a:	e746      	b.n	80013da <main+0x1a6>
 800154c:	080019dd 	.word	0x080019dd
 8001550:	08001a1f 	.word	0x08001a1f
 8001554:	20000a44 	.word	0x20000a44
 8001558:	0800b3a8 	.word	0x0800b3a8
 800155c:	0800b3b8 	.word	0x0800b3b8
 8001560:	0800b3e0 	.word	0x0800b3e0
 8001564:	20000814 	.word	0x20000814
 8001568:	20000b78 	.word	0x20000b78
 800156c:	0800b3e4 	.word	0x0800b3e4
 8001570:	0800b3fc 	.word	0x0800b3fc
 8001574:	0800b444 	.word	0x0800b444
 8001578:	0800b45c 	.word	0x0800b45c
 800157c:	0800b468 	.word	0x0800b468
 8001580:	0800b474 	.word	0x0800b474
 8001584:	20000b7c 	.word	0x20000b7c
 8001588:	0800b480 	.word	0x0800b480
 800158c:	20000a98 	.word	0x20000a98
 8001590:	20000224 	.word	0x20000224
 8001594:	0800b4a4 	.word	0x0800b4a4
 8001598:	2000060c 	.word	0x2000060c
 800159c:	20000210 	.word	0x20000210
 80015a0:	20000218 	.word	0x20000218
 80015a4:	20000b24 	.word	0x20000b24
 80015a8:	20000b04 	.word	0x20000b04
 80015ac:	20000644 	.word	0x20000644
 80015b0:	20000610 	.word	0x20000610
 80015b4:	0800b4b8 	.word	0x0800b4b8
 80015b8:	40020000 	.word	0x40020000

080015bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b0ac      	sub	sp, #176	; 0xb0
 80015c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015c2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80015c6:	2234      	movs	r2, #52	; 0x34
 80015c8:	2100      	movs	r1, #0
 80015ca:	4618      	mov	r0, r3
 80015cc:	f007 fe60 	bl	8009290 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015d0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015e0:	f107 030c 	add.w	r3, r7, #12
 80015e4:	225c      	movs	r2, #92	; 0x5c
 80015e6:	2100      	movs	r1, #0
 80015e8:	4618      	mov	r0, r3
 80015ea:	f007 fe51 	bl	8009290 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	60bb      	str	r3, [r7, #8]
 80015f2:	4b39      	ldr	r3, [pc, #228]	; (80016d8 <SystemClock_Config+0x11c>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	4a38      	ldr	r2, [pc, #224]	; (80016d8 <SystemClock_Config+0x11c>)
 80015f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015fc:	6413      	str	r3, [r2, #64]	; 0x40
 80015fe:	4b36      	ldr	r3, [pc, #216]	; (80016d8 <SystemClock_Config+0x11c>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800160a:	2300      	movs	r3, #0
 800160c:	607b      	str	r3, [r7, #4]
 800160e:	4b33      	ldr	r3, [pc, #204]	; (80016dc <SystemClock_Config+0x120>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001616:	4a31      	ldr	r2, [pc, #196]	; (80016dc <SystemClock_Config+0x120>)
 8001618:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800161c:	6013      	str	r3, [r2, #0]
 800161e:	4b2f      	ldr	r3, [pc, #188]	; (80016dc <SystemClock_Config+0x120>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800162a:	2309      	movs	r3, #9
 800162c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800162e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001632:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001636:	2301      	movs	r3, #1
 8001638:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800163c:	2301      	movs	r3, #1
 800163e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001642:	2302      	movs	r3, #2
 8001644:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001648:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800164c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001650:	2304      	movs	r3, #4
 8001652:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 82;
 8001656:	2352      	movs	r3, #82	; 0x52
 8001658:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800165c:	2302      	movs	r3, #2
 800165e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8001662:	230f      	movs	r3, #15
 8001664:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001668:	2302      	movs	r3, #2
 800166a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800166e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001672:	4618      	mov	r0, r3
 8001674:	f002 ff1e 	bl	80044b4 <HAL_RCC_OscConfig>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800167e:	f000 fa51 	bl	8001b24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001682:	230f      	movs	r3, #15
 8001684:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001686:	2302      	movs	r3, #2
 8001688:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800168a:	2300      	movs	r3, #0
 800168c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800168e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001692:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001698:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800169a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800169e:	2102      	movs	r1, #2
 80016a0:	4618      	mov	r0, r3
 80016a2:	f002 f923 	bl	80038ec <HAL_RCC_ClockConfig>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80016ac:	f000 fa3a 	bl	8001b24 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80016b0:	2320      	movs	r3, #32
 80016b2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80016b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ba:	f107 030c 	add.w	r3, r7, #12
 80016be:	4618      	mov	r0, r3
 80016c0:	f002 fa2e 	bl	8003b20 <HAL_RCCEx_PeriphCLKConfig>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <SystemClock_Config+0x112>
  {
    Error_Handler();
 80016ca:	f000 fa2b 	bl	8001b24 <Error_Handler>
  }
}
 80016ce:	bf00      	nop
 80016d0:	37b0      	adds	r7, #176	; 0xb0
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40007000 	.word	0x40007000

080016e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016e4:	4b12      	ldr	r3, [pc, #72]	; (8001730 <MX_I2C1_Init+0x50>)
 80016e6:	4a13      	ldr	r2, [pc, #76]	; (8001734 <MX_I2C1_Init+0x54>)
 80016e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016ea:	4b11      	ldr	r3, [pc, #68]	; (8001730 <MX_I2C1_Init+0x50>)
 80016ec:	4a12      	ldr	r2, [pc, #72]	; (8001738 <MX_I2C1_Init+0x58>)
 80016ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016f0:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <MX_I2C1_Init+0x50>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016f6:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <MX_I2C1_Init+0x50>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016fc:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <MX_I2C1_Init+0x50>)
 80016fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001702:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001704:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <MX_I2C1_Init+0x50>)
 8001706:	2200      	movs	r2, #0
 8001708:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800170a:	4b09      	ldr	r3, [pc, #36]	; (8001730 <MX_I2C1_Init+0x50>)
 800170c:	2200      	movs	r2, #0
 800170e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001710:	4b07      	ldr	r3, [pc, #28]	; (8001730 <MX_I2C1_Init+0x50>)
 8001712:	2200      	movs	r2, #0
 8001714:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <MX_I2C1_Init+0x50>)
 8001718:	2200      	movs	r2, #0
 800171a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800171c:	4804      	ldr	r0, [pc, #16]	; (8001730 <MX_I2C1_Init+0x50>)
 800171e:	f001 f931 	bl	8002984 <HAL_I2C_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001728:	f000 f9fc 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000a44 	.word	0x20000a44
 8001734:	40005400 	.word	0x40005400
 8001738:	000186a0 	.word	0x000186a0

0800173c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001742:	1d3b      	adds	r3, r7, #4
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001750:	2300      	movs	r3, #0
 8001752:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001754:	4b27      	ldr	r3, [pc, #156]	; (80017f4 <MX_RTC_Init+0xb8>)
 8001756:	4a28      	ldr	r2, [pc, #160]	; (80017f8 <MX_RTC_Init+0xbc>)
 8001758:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800175a:	4b26      	ldr	r3, [pc, #152]	; (80017f4 <MX_RTC_Init+0xb8>)
 800175c:	2200      	movs	r2, #0
 800175e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 31;
 8001760:	4b24      	ldr	r3, [pc, #144]	; (80017f4 <MX_RTC_Init+0xb8>)
 8001762:	221f      	movs	r2, #31
 8001764:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 999;
 8001766:	4b23      	ldr	r3, [pc, #140]	; (80017f4 <MX_RTC_Init+0xb8>)
 8001768:	f240 32e7 	movw	r2, #999	; 0x3e7
 800176c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800176e:	4b21      	ldr	r3, [pc, #132]	; (80017f4 <MX_RTC_Init+0xb8>)
 8001770:	2200      	movs	r2, #0
 8001772:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001774:	4b1f      	ldr	r3, [pc, #124]	; (80017f4 <MX_RTC_Init+0xb8>)
 8001776:	2200      	movs	r2, #0
 8001778:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800177a:	4b1e      	ldr	r3, [pc, #120]	; (80017f4 <MX_RTC_Init+0xb8>)
 800177c:	2200      	movs	r2, #0
 800177e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001780:	481c      	ldr	r0, [pc, #112]	; (80017f4 <MX_RTC_Init+0xb8>)
 8001782:	f003 f8f1 	bl	8004968 <HAL_RTC_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 800178c:	f000 f9ca 	bl	8001b24 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 8001790:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001794:	2101      	movs	r1, #1
 8001796:	4817      	ldr	r0, [pc, #92]	; (80017f4 <MX_RTC_Init+0xb8>)
 8001798:	f003 fc18 	bl	8004fcc <HAL_RTCEx_BKUPWrite>
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x8;
 800179c:	2308      	movs	r3, #8
 800179e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	2201      	movs	r2, #1
 80017b4:	4619      	mov	r1, r3
 80017b6:	480f      	ldr	r0, [pc, #60]	; (80017f4 <MX_RTC_Init+0xb8>)
 80017b8:	f003 f967 	bl	8004a8a <HAL_RTC_SetTime>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 80017c2:	f000 f9af 	bl	8001b24 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80017c6:	2301      	movs	r3, #1
 80017c8:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80017ca:	2301      	movs	r3, #1
 80017cc:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80017ce:	2301      	movs	r3, #1
 80017d0:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80017d6:	463b      	mov	r3, r7
 80017d8:	2201      	movs	r2, #1
 80017da:	4619      	mov	r1, r3
 80017dc:	4805      	ldr	r0, [pc, #20]	; (80017f4 <MX_RTC_Init+0xb8>)
 80017de:	f003 fa6f 	bl	8004cc0 <HAL_RTC_SetDate>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_RTC_Init+0xb0>
  {
    Error_Handler();
 80017e8:	f000 f99c 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  /* USER CODE END RTC_Init 2 */

}
 80017ec:	bf00      	nop
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000b04 	.word	0x20000b04
 80017f8:	40002800 	.word	0x40002800

080017fc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001800:	4b17      	ldr	r3, [pc, #92]	; (8001860 <MX_SPI2_Init+0x64>)
 8001802:	4a18      	ldr	r2, [pc, #96]	; (8001864 <MX_SPI2_Init+0x68>)
 8001804:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001806:	4b16      	ldr	r3, [pc, #88]	; (8001860 <MX_SPI2_Init+0x64>)
 8001808:	f44f 7282 	mov.w	r2, #260	; 0x104
 800180c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800180e:	4b14      	ldr	r3, [pc, #80]	; (8001860 <MX_SPI2_Init+0x64>)
 8001810:	2200      	movs	r2, #0
 8001812:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <MX_SPI2_Init+0x64>)
 8001816:	2200      	movs	r2, #0
 8001818:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800181a:	4b11      	ldr	r3, [pc, #68]	; (8001860 <MX_SPI2_Init+0x64>)
 800181c:	2200      	movs	r2, #0
 800181e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001820:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <MX_SPI2_Init+0x64>)
 8001822:	2200      	movs	r2, #0
 8001824:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001826:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <MX_SPI2_Init+0x64>)
 8001828:	f44f 7200 	mov.w	r2, #512	; 0x200
 800182c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800182e:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <MX_SPI2_Init+0x64>)
 8001830:	2200      	movs	r2, #0
 8001832:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001834:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <MX_SPI2_Init+0x64>)
 8001836:	2200      	movs	r2, #0
 8001838:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <MX_SPI2_Init+0x64>)
 800183c:	2200      	movs	r2, #0
 800183e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001840:	4b07      	ldr	r3, [pc, #28]	; (8001860 <MX_SPI2_Init+0x64>)
 8001842:	2200      	movs	r2, #0
 8001844:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001846:	4b06      	ldr	r3, [pc, #24]	; (8001860 <MX_SPI2_Init+0x64>)
 8001848:	220a      	movs	r2, #10
 800184a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800184c:	4804      	ldr	r0, [pc, #16]	; (8001860 <MX_SPI2_Init+0x64>)
 800184e:	f003 fbd7 	bl	8005000 <HAL_SPI_Init>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001858:	f000 f964 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}
 8001860:	200007bc 	.word	0x200007bc
 8001864:	40003800 	.word	0x40003800

08001868 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <MX_USART2_UART_Init+0x4c>)
 800186e:	4a12      	ldr	r2, [pc, #72]	; (80018b8 <MX_USART2_UART_Init+0x50>)
 8001870:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <MX_USART2_UART_Init+0x4c>)
 8001874:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001878:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800187a:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <MX_USART2_UART_Init+0x4c>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001880:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <MX_USART2_UART_Init+0x4c>)
 8001882:	2200      	movs	r2, #0
 8001884:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001886:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <MX_USART2_UART_Init+0x4c>)
 8001888:	2200      	movs	r2, #0
 800188a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800188c:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <MX_USART2_UART_Init+0x4c>)
 800188e:	220c      	movs	r2, #12
 8001890:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001892:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <MX_USART2_UART_Init+0x4c>)
 8001894:	2200      	movs	r2, #0
 8001896:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <MX_USART2_UART_Init+0x4c>)
 800189a:	2200      	movs	r2, #0
 800189c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800189e:	4805      	ldr	r0, [pc, #20]	; (80018b4 <MX_USART2_UART_Init+0x4c>)
 80018a0:	f003 fe60 	bl	8005564 <HAL_UART_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018aa:	f000 f93b 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000b38 	.word	0x20000b38
 80018b8:	40004400 	.word	0x40004400

080018bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08a      	sub	sp, #40	; 0x28
 80018c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c2:	f107 0314 	add.w	r3, r7, #20
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	60da      	str	r2, [r3, #12]
 80018d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
 80018d6:	4b3d      	ldr	r3, [pc, #244]	; (80019cc <MX_GPIO_Init+0x110>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	4a3c      	ldr	r2, [pc, #240]	; (80019cc <MX_GPIO_Init+0x110>)
 80018dc:	f043 0304 	orr.w	r3, r3, #4
 80018e0:	6313      	str	r3, [r2, #48]	; 0x30
 80018e2:	4b3a      	ldr	r3, [pc, #232]	; (80019cc <MX_GPIO_Init+0x110>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f003 0304 	and.w	r3, r3, #4
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	4b36      	ldr	r3, [pc, #216]	; (80019cc <MX_GPIO_Init+0x110>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	4a35      	ldr	r2, [pc, #212]	; (80019cc <MX_GPIO_Init+0x110>)
 80018f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018fc:	6313      	str	r3, [r2, #48]	; 0x30
 80018fe:	4b33      	ldr	r3, [pc, #204]	; (80019cc <MX_GPIO_Init+0x110>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	60bb      	str	r3, [r7, #8]
 800190e:	4b2f      	ldr	r3, [pc, #188]	; (80019cc <MX_GPIO_Init+0x110>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	4a2e      	ldr	r2, [pc, #184]	; (80019cc <MX_GPIO_Init+0x110>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	6313      	str	r3, [r2, #48]	; 0x30
 800191a:	4b2c      	ldr	r3, [pc, #176]	; (80019cc <MX_GPIO_Init+0x110>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	60bb      	str	r3, [r7, #8]
 8001924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	607b      	str	r3, [r7, #4]
 800192a:	4b28      	ldr	r3, [pc, #160]	; (80019cc <MX_GPIO_Init+0x110>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	4a27      	ldr	r2, [pc, #156]	; (80019cc <MX_GPIO_Init+0x110>)
 8001930:	f043 0302 	orr.w	r3, r3, #2
 8001934:	6313      	str	r3, [r2, #48]	; 0x30
 8001936:	4b25      	ldr	r3, [pc, #148]	; (80019cc <MX_GPIO_Init+0x110>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001942:	2200      	movs	r2, #0
 8001944:	2101      	movs	r1, #1
 8001946:	4822      	ldr	r0, [pc, #136]	; (80019d0 <MX_GPIO_Init+0x114>)
 8001948:	f000 ffd0 	bl	80028ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800194c:	2200      	movs	r2, #0
 800194e:	2120      	movs	r1, #32
 8001950:	4820      	ldr	r0, [pc, #128]	; (80019d4 <MX_GPIO_Init+0x118>)
 8001952:	f000 ffcb 	bl	80028ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001956:	2201      	movs	r2, #1
 8001958:	2180      	movs	r1, #128	; 0x80
 800195a:	481e      	ldr	r0, [pc, #120]	; (80019d4 <MX_GPIO_Init+0x118>)
 800195c:	f000 ffc6 	bl	80028ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001960:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001964:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001966:	4b1c      	ldr	r3, [pc, #112]	; (80019d8 <MX_GPIO_Init+0x11c>)
 8001968:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800196e:	f107 0314 	add.w	r3, r7, #20
 8001972:	4619      	mov	r1, r3
 8001974:	4816      	ldr	r0, [pc, #88]	; (80019d0 <MX_GPIO_Init+0x114>)
 8001976:	f000 fe27 	bl	80025c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800197a:	2301      	movs	r3, #1
 800197c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197e:	2301      	movs	r3, #1
 8001980:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001986:	2300      	movs	r3, #0
 8001988:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800198a:	f107 0314 	add.w	r3, r7, #20
 800198e:	4619      	mov	r1, r3
 8001990:	480f      	ldr	r0, [pc, #60]	; (80019d0 <MX_GPIO_Init+0x114>)
 8001992:	f000 fe19 	bl	80025c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin CS_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|CS_Pin;
 8001996:	23a0      	movs	r3, #160	; 0xa0
 8001998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199a:	2301      	movs	r3, #1
 800199c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a2:	2300      	movs	r3, #0
 80019a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a6:	f107 0314 	add.w	r3, r7, #20
 80019aa:	4619      	mov	r1, r3
 80019ac:	4809      	ldr	r0, [pc, #36]	; (80019d4 <MX_GPIO_Init+0x118>)
 80019ae:	f000 fe0b 	bl	80025c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80019b2:	2200      	movs	r2, #0
 80019b4:	2100      	movs	r1, #0
 80019b6:	2028      	movs	r0, #40	; 0x28
 80019b8:	f000 fc27 	bl	800220a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019bc:	2028      	movs	r0, #40	; 0x28
 80019be:	f000 fc40 	bl	8002242 <HAL_NVIC_EnableIRQ>

}
 80019c2:	bf00      	nop
 80019c4:	3728      	adds	r7, #40	; 0x28
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40023800 	.word	0x40023800
 80019d0:	40020800 	.word	0x40020800
 80019d4:	40020000 	.word	0x40020000
 80019d8:	10110000 	.word	0x10110000

080019dc <platform_write>:

/* USER CODE BEGIN 4 */
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af04      	add	r7, sp, #16
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	607a      	str	r2, [r7, #4]
 80019e6:	461a      	mov	r2, r3
 80019e8:	460b      	mov	r3, r1
 80019ea:	72fb      	strb	r3, [r7, #11]
 80019ec:	4613      	mov	r3, r2
 80019ee:	813b      	strh	r3, [r7, #8]
  /* Write multiple command */
  reg |= 0x80;
 80019f0:	7afb      	ldrb	r3, [r7, #11]
 80019f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019f6:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Mem_Write(handle, LIS3DH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80019f8:	7afb      	ldrb	r3, [r7, #11]
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a00:	9302      	str	r3, [sp, #8]
 8001a02:	893b      	ldrh	r3, [r7, #8]
 8001a04:	9301      	str	r3, [sp, #4]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	9300      	str	r3, [sp, #0]
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	2131      	movs	r1, #49	; 0x31
 8001a0e:	68f8      	ldr	r0, [r7, #12]
 8001a10:	f001 f8f0 	bl	8002bf4 <HAL_I2C_Mem_Write>
  return 0;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <platform_read>:
 * @param  bufp      pointer to buffer that store the data read
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b088      	sub	sp, #32
 8001a22:	af04      	add	r7, sp, #16
 8001a24:	60f8      	str	r0, [r7, #12]
 8001a26:	607a      	str	r2, [r7, #4]
 8001a28:	461a      	mov	r2, r3
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	72fb      	strb	r3, [r7, #11]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	813b      	strh	r3, [r7, #8]
  /* Read multiple command */
  reg |= 0x80;
 8001a32:	7afb      	ldrb	r3, [r7, #11]
 8001a34:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a38:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Mem_Read(handle, LIS3DH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8001a3a:	7afb      	ldrb	r3, [r7, #11]
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a42:	9302      	str	r3, [sp, #8]
 8001a44:	893b      	ldrh	r3, [r7, #8]
 8001a46:	9301      	str	r3, [sp, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	2131      	movs	r1, #49	; 0x31
 8001a50:	68f8      	ldr	r0, [r7, #12]
 8001a52:	f001 f9c9 	bl	8002de8 <HAL_I2C_Mem_Read>

  return 0;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	80fb      	strh	r3, [r7, #6]

		switch (STATE) {
 8001a6a:	4b13      	ldr	r3, [pc, #76]	; (8001ab8 <HAL_GPIO_EXTI_Callback+0x58>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00b      	beq.n	8001a8a <HAL_GPIO_EXTI_Callback+0x2a>
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d000      	beq.n	8001a78 <HAL_GPIO_EXTI_Callback+0x18>
							fres = f_open(&fil, "write.txt",FA_WRITE | FA_OPEN_ALWAYS);
							HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,GPIO_PIN_SET);
							break;

		}
}
 8001a76:	e01a      	b.n	8001aae <HAL_GPIO_EXTI_Callback+0x4e>
							STATE = 2;
 8001a78:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <HAL_GPIO_EXTI_Callback+0x58>)
 8001a7a:	2202      	movs	r2, #2
 8001a7c:	601a      	str	r2, [r3, #0]
							HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,GPIO_PIN_RESET);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2120      	movs	r1, #32
 8001a82:	480e      	ldr	r0, [pc, #56]	; (8001abc <HAL_GPIO_EXTI_Callback+0x5c>)
 8001a84:	f000 ff32 	bl	80028ec <HAL_GPIO_WritePin>
							break;
 8001a88:	e011      	b.n	8001aae <HAL_GPIO_EXTI_Callback+0x4e>
							STATE = 1;
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <HAL_GPIO_EXTI_Callback+0x58>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	601a      	str	r2, [r3, #0]
							fres = f_open(&fil, "write.txt",FA_WRITE | FA_OPEN_ALWAYS);
 8001a90:	2212      	movs	r2, #18
 8001a92:	490b      	ldr	r1, [pc, #44]	; (8001ac0 <HAL_GPIO_EXTI_Callback+0x60>)
 8001a94:	480b      	ldr	r0, [pc, #44]	; (8001ac4 <HAL_GPIO_EXTI_Callback+0x64>)
 8001a96:	f006 fcdb 	bl	8008450 <f_open>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <HAL_GPIO_EXTI_Callback+0x68>)
 8001aa0:	701a      	strb	r2, [r3, #0]
							HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,GPIO_PIN_SET);
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	2120      	movs	r1, #32
 8001aa6:	4805      	ldr	r0, [pc, #20]	; (8001abc <HAL_GPIO_EXTI_Callback+0x5c>)
 8001aa8:	f000 ff20 	bl	80028ec <HAL_GPIO_WritePin>
							break;
 8001aac:	bf00      	nop
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	2000060c 	.word	0x2000060c
 8001abc:	40020000 	.word	0x40020000
 8001ac0:	0800b474 	.word	0x0800b474
 8001ac4:	20000b7c 	.word	0x20000b7c
 8001ac8:	20000b78 	.word	0x20000b78

08001acc <RTC_ShowMeTime>:

static void RTC_ShowMeTime(uint8_t *showtime, uint8_t *showdate)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af02      	add	r7, sp, #8
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]

  /* Get the RTC current Time */
  HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	490e      	ldr	r1, [pc, #56]	; (8001b14 <RTC_ShowMeTime+0x48>)
 8001ada:	480f      	ldr	r0, [pc, #60]	; (8001b18 <RTC_ShowMeTime+0x4c>)
 8001adc:	f003 f892 	bl	8004c04 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BIN);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	490e      	ldr	r1, [pc, #56]	; (8001b1c <RTC_ShowMeTime+0x50>)
 8001ae4:	480c      	ldr	r0, [pc, #48]	; (8001b18 <RTC_ShowMeTime+0x4c>)
 8001ae6:	f003 f992 	bl	8004e0e <HAL_RTC_GetDate>

  /* Display time Format: hh:mm:ss */
  sprintf((char*)showtime,"%02d:%02d:%02lu", stimestructureget.Minutes, stimestructureget.Seconds,1000-stimestructureget.SubSeconds);
 8001aea:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <RTC_ShowMeTime+0x48>)
 8001aec:	785b      	ldrb	r3, [r3, #1]
 8001aee:	461a      	mov	r2, r3
 8001af0:	4b08      	ldr	r3, [pc, #32]	; (8001b14 <RTC_ShowMeTime+0x48>)
 8001af2:	789b      	ldrb	r3, [r3, #2]
 8001af4:	4619      	mov	r1, r3
 8001af6:	4b07      	ldr	r3, [pc, #28]	; (8001b14 <RTC_ShowMeTime+0x48>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	460b      	mov	r3, r1
 8001b02:	4907      	ldr	r1, [pc, #28]	; (8001b20 <RTC_ShowMeTime+0x54>)
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f008 f827 	bl	8009b58 <siprintf>
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20000b24 	.word	0x20000b24
 8001b18:	20000b04 	.word	0x20000b04
 8001b1c:	20000a9c 	.word	0x20000a9c
 8001b20:	0800b4d4 	.word	0x0800b4d4

08001b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
	...

08001b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	607b      	str	r3, [r7, #4]
 8001b3e:	4b14      	ldr	r3, [pc, #80]	; (8001b90 <HAL_MspInit+0x5c>)
 8001b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b42:	4a13      	ldr	r2, [pc, #76]	; (8001b90 <HAL_MspInit+0x5c>)
 8001b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b48:	6453      	str	r3, [r2, #68]	; 0x44
 8001b4a:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <HAL_MspInit+0x5c>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b52:	607b      	str	r3, [r7, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	603b      	str	r3, [r7, #0]
 8001b5a:	4b0d      	ldr	r3, [pc, #52]	; (8001b90 <HAL_MspInit+0x5c>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	4a0c      	ldr	r2, [pc, #48]	; (8001b90 <HAL_MspInit+0x5c>)
 8001b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b64:	6413      	str	r3, [r2, #64]	; 0x40
 8001b66:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <HAL_MspInit+0x5c>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6e:	603b      	str	r3, [r7, #0]
 8001b70:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b72:	2007      	movs	r0, #7
 8001b74:	f000 fb3e 	bl	80021f4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	2004      	movs	r0, #4
 8001b7e:	f000 fb44 	bl	800220a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8001b82:	2004      	movs	r0, #4
 8001b84:	f000 fb5d 	bl	8002242 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b88:	bf00      	nop
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40023800 	.word	0x40023800

08001b94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08a      	sub	sp, #40	; 0x28
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a19      	ldr	r2, [pc, #100]	; (8001c18 <HAL_I2C_MspInit+0x84>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d12b      	bne.n	8001c0e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	4b18      	ldr	r3, [pc, #96]	; (8001c1c <HAL_I2C_MspInit+0x88>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	4a17      	ldr	r2, [pc, #92]	; (8001c1c <HAL_I2C_MspInit+0x88>)
 8001bc0:	f043 0302 	orr.w	r3, r3, #2
 8001bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc6:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <HAL_I2C_MspInit+0x88>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	613b      	str	r3, [r7, #16]
 8001bd0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bd2:	23c0      	movs	r3, #192	; 0xc0
 8001bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bd6:	2312      	movs	r3, #18
 8001bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bde:	2303      	movs	r3, #3
 8001be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001be2:	2304      	movs	r3, #4
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be6:	f107 0314 	add.w	r3, r7, #20
 8001bea:	4619      	mov	r1, r3
 8001bec:	480c      	ldr	r0, [pc, #48]	; (8001c20 <HAL_I2C_MspInit+0x8c>)
 8001bee:	f000 fceb 	bl	80025c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <HAL_I2C_MspInit+0x88>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	4a08      	ldr	r2, [pc, #32]	; (8001c1c <HAL_I2C_MspInit+0x88>)
 8001bfc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c00:	6413      	str	r3, [r2, #64]	; 0x40
 8001c02:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <HAL_I2C_MspInit+0x88>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c0e:	bf00      	nop
 8001c10:	3728      	adds	r7, #40	; 0x28
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40005400 	.word	0x40005400
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	40020400 	.word	0x40020400

08001c24 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a05      	ldr	r2, [pc, #20]	; (8001c48 <HAL_RTC_MspInit+0x24>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d102      	bne.n	8001c3c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c36:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <HAL_RTC_MspInit+0x28>)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	40002800 	.word	0x40002800
 8001c4c:	42470e3c 	.word	0x42470e3c

08001c50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08a      	sub	sp, #40	; 0x28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c58:	f107 0314 	add.w	r3, r7, #20
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]
 8001c66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a30      	ldr	r2, [pc, #192]	; (8001d30 <HAL_SPI_MspInit+0xe0>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d15a      	bne.n	8001d28 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	613b      	str	r3, [r7, #16]
 8001c76:	4b2f      	ldr	r3, [pc, #188]	; (8001d34 <HAL_SPI_MspInit+0xe4>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	4a2e      	ldr	r2, [pc, #184]	; (8001d34 <HAL_SPI_MspInit+0xe4>)
 8001c7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c80:	6413      	str	r3, [r2, #64]	; 0x40
 8001c82:	4b2c      	ldr	r3, [pc, #176]	; (8001d34 <HAL_SPI_MspInit+0xe4>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c8a:	613b      	str	r3, [r7, #16]
 8001c8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	4b28      	ldr	r3, [pc, #160]	; (8001d34 <HAL_SPI_MspInit+0xe4>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	4a27      	ldr	r2, [pc, #156]	; (8001d34 <HAL_SPI_MspInit+0xe4>)
 8001c98:	f043 0304 	orr.w	r3, r3, #4
 8001c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9e:	4b25      	ldr	r3, [pc, #148]	; (8001d34 <HAL_SPI_MspInit+0xe4>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	f003 0304 	and.w	r3, r3, #4
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	60bb      	str	r3, [r7, #8]
 8001cae:	4b21      	ldr	r3, [pc, #132]	; (8001d34 <HAL_SPI_MspInit+0xe4>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	4a20      	ldr	r2, [pc, #128]	; (8001d34 <HAL_SPI_MspInit+0xe4>)
 8001cb4:	f043 0302 	orr.w	r3, r3, #2
 8001cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cba:	4b1e      	ldr	r3, [pc, #120]	; (8001d34 <HAL_SPI_MspInit+0xe4>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	60bb      	str	r3, [r7, #8]
 8001cc4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8001cd6:	2307      	movs	r3, #7
 8001cd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cda:	f107 0314 	add.w	r3, r7, #20
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4815      	ldr	r0, [pc, #84]	; (8001d38 <HAL_SPI_MspInit+0xe8>)
 8001ce2:	f000 fc71 	bl	80025c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ce6:	2304      	movs	r3, #4
 8001ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cea:	2302      	movs	r3, #2
 8001cec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cf6:	2305      	movs	r3, #5
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cfa:	f107 0314 	add.w	r3, r7, #20
 8001cfe:	4619      	mov	r1, r3
 8001d00:	480d      	ldr	r0, [pc, #52]	; (8001d38 <HAL_SPI_MspInit+0xe8>)
 8001d02:	f000 fc61 	bl	80025c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d14:	2303      	movs	r3, #3
 8001d16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d18:	2305      	movs	r3, #5
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d1c:	f107 0314 	add.w	r3, r7, #20
 8001d20:	4619      	mov	r1, r3
 8001d22:	4806      	ldr	r0, [pc, #24]	; (8001d3c <HAL_SPI_MspInit+0xec>)
 8001d24:	f000 fc50 	bl	80025c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001d28:	bf00      	nop
 8001d2a:	3728      	adds	r7, #40	; 0x28
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40003800 	.word	0x40003800
 8001d34:	40023800 	.word	0x40023800
 8001d38:	40020800 	.word	0x40020800
 8001d3c:	40020400 	.word	0x40020400

08001d40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08a      	sub	sp, #40	; 0x28
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d48:	f107 0314 	add.w	r3, r7, #20
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	609a      	str	r2, [r3, #8]
 8001d54:	60da      	str	r2, [r3, #12]
 8001d56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a19      	ldr	r2, [pc, #100]	; (8001dc4 <HAL_UART_MspInit+0x84>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d12b      	bne.n	8001dba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	613b      	str	r3, [r7, #16]
 8001d66:	4b18      	ldr	r3, [pc, #96]	; (8001dc8 <HAL_UART_MspInit+0x88>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	4a17      	ldr	r2, [pc, #92]	; (8001dc8 <HAL_UART_MspInit+0x88>)
 8001d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d70:	6413      	str	r3, [r2, #64]	; 0x40
 8001d72:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <HAL_UART_MspInit+0x88>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <HAL_UART_MspInit+0x88>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	4a10      	ldr	r2, [pc, #64]	; (8001dc8 <HAL_UART_MspInit+0x88>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8e:	4b0e      	ldr	r3, [pc, #56]	; (8001dc8 <HAL_UART_MspInit+0x88>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d9a:	230c      	movs	r3, #12
 8001d9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da6:	2303      	movs	r3, #3
 8001da8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001daa:	2307      	movs	r3, #7
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dae:	f107 0314 	add.w	r3, r7, #20
 8001db2:	4619      	mov	r1, r3
 8001db4:	4805      	ldr	r0, [pc, #20]	; (8001dcc <HAL_UART_MspInit+0x8c>)
 8001db6:	f000 fc07 	bl	80025c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001dba:	bf00      	nop
 8001dbc:	3728      	adds	r7, #40	; 0x28
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40004400 	.word	0x40004400
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40020000 	.word	0x40020000

08001dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dd4:	e7fe      	b.n	8001dd4 <NMI_Handler+0x4>

08001dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dda:	e7fe      	b.n	8001dda <HardFault_Handler+0x4>

08001ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001de0:	e7fe      	b.n	8001de0 <MemManage_Handler+0x4>

08001de2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001de2:	b480      	push	{r7}
 8001de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001de6:	e7fe      	b.n	8001de6 <BusFault_Handler+0x4>

08001de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dec:	e7fe      	b.n	8001dec <UsageFault_Handler+0x4>

08001dee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dee:	b480      	push	{r7}
 8001df0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e00:	bf00      	nop
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e1c:	f000 f8d8 	bl	8001fd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e20:	bf00      	nop
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8001e28:	f000 fa26 	bl	8002278 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8001e2c:	bf00      	nop
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001e34:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e38:	f000 fd8c 	bl	8002954 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e3c:	bf00      	nop
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e48:	4a14      	ldr	r2, [pc, #80]	; (8001e9c <_sbrk+0x5c>)
 8001e4a:	4b15      	ldr	r3, [pc, #84]	; (8001ea0 <_sbrk+0x60>)
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e54:	4b13      	ldr	r3, [pc, #76]	; (8001ea4 <_sbrk+0x64>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d102      	bne.n	8001e62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e5c:	4b11      	ldr	r3, [pc, #68]	; (8001ea4 <_sbrk+0x64>)
 8001e5e:	4a12      	ldr	r2, [pc, #72]	; (8001ea8 <_sbrk+0x68>)
 8001e60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e62:	4b10      	ldr	r3, [pc, #64]	; (8001ea4 <_sbrk+0x64>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4413      	add	r3, r2
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d207      	bcs.n	8001e80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e70:	f007 f9e4 	bl	800923c <__errno>
 8001e74:	4602      	mov	r2, r0
 8001e76:	230c      	movs	r3, #12
 8001e78:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7e:	e009      	b.n	8001e94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e80:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <_sbrk+0x64>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e86:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <_sbrk+0x64>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	4a05      	ldr	r2, [pc, #20]	; (8001ea4 <_sbrk+0x64>)
 8001e90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e92:	68fb      	ldr	r3, [r7, #12]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3718      	adds	r7, #24
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20020000 	.word	0x20020000
 8001ea0:	00000400 	.word	0x00000400
 8001ea4:	20000778 	.word	0x20000778
 8001ea8:	20001248 	.word	0x20001248

08001eac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eb0:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <SystemInit+0x28>)
 8001eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eb6:	4a07      	ldr	r2, [pc, #28]	; (8001ed4 <SystemInit+0x28>)
 8001eb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ebc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ec0:	4b04      	ldr	r3, [pc, #16]	; (8001ed4 <SystemInit+0x28>)
 8001ec2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ec6:	609a      	str	r2, [r3, #8]
#endif
}
 8001ec8:	bf00      	nop
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ed8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f10 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001edc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001ede:	e003      	b.n	8001ee8 <LoopCopyDataInit>

08001ee0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001ee2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ee4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ee6:	3104      	adds	r1, #4

08001ee8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ee8:	480b      	ldr	r0, [pc, #44]	; (8001f18 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001eea:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001eec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001eee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ef0:	d3f6      	bcc.n	8001ee0 <CopyDataInit>
  ldr  r2, =_sbss
 8001ef2:	4a0b      	ldr	r2, [pc, #44]	; (8001f20 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ef4:	e002      	b.n	8001efc <LoopFillZerobss>

08001ef6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ef6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ef8:	f842 3b04 	str.w	r3, [r2], #4

08001efc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001efc:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001efe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f00:	d3f9      	bcc.n	8001ef6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f02:	f7ff ffd3 	bl	8001eac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f06:	f007 f99f 	bl	8009248 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f0a:	f7ff f993 	bl	8001234 <main>
  bx  lr    
 8001f0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f10:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001f14:	0800b830 	.word	0x0800b830
  ldr  r0, =_sdata
 8001f18:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001f1c:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 8001f20:	200001f4 	.word	0x200001f4
  ldr  r3, = _ebss
 8001f24:	20001244 	.word	0x20001244

08001f28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f28:	e7fe      	b.n	8001f28 <ADC_IRQHandler>
	...

08001f2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f30:	4b0e      	ldr	r3, [pc, #56]	; (8001f6c <HAL_Init+0x40>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a0d      	ldr	r2, [pc, #52]	; (8001f6c <HAL_Init+0x40>)
 8001f36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <HAL_Init+0x40>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a0a      	ldr	r2, [pc, #40]	; (8001f6c <HAL_Init+0x40>)
 8001f42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f48:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <HAL_Init+0x40>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a07      	ldr	r2, [pc, #28]	; (8001f6c <HAL_Init+0x40>)
 8001f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f54:	2003      	movs	r0, #3
 8001f56:	f000 f94d 	bl	80021f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f5a:	2000      	movs	r0, #0
 8001f5c:	f000 f808 	bl	8001f70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f60:	f7ff fde8 	bl	8001b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40023c00 	.word	0x40023c00

08001f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f78:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <HAL_InitTick+0x54>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <HAL_InitTick+0x58>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	4619      	mov	r1, r3
 8001f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f000 f965 	bl	800225e <HAL_SYSTICK_Config>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e00e      	b.n	8001fbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b0f      	cmp	r3, #15
 8001fa2:	d80a      	bhi.n	8001fba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fac:	f000 f92d 	bl	800220a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fb0:	4a06      	ldr	r2, [pc, #24]	; (8001fcc <HAL_InitTick+0x5c>)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	e000      	b.n	8001fbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	20000000 	.word	0x20000000
 8001fc8:	20000008 	.word	0x20000008
 8001fcc:	20000004 	.word	0x20000004

08001fd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fd4:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <HAL_IncTick+0x20>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	461a      	mov	r2, r3
 8001fda:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <HAL_IncTick+0x24>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4413      	add	r3, r2
 8001fe0:	4a04      	ldr	r2, [pc, #16]	; (8001ff4 <HAL_IncTick+0x24>)
 8001fe2:	6013      	str	r3, [r2, #0]
}
 8001fe4:	bf00      	nop
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	20000008 	.word	0x20000008
 8001ff4:	20000dac 	.word	0x20000dac

08001ff8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8001ffc:	4b03      	ldr	r3, [pc, #12]	; (800200c <HAL_GetTick+0x14>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
}
 8002000:	4618      	mov	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	20000dac 	.word	0x20000dac

08002010 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002018:	f7ff ffee 	bl	8001ff8 <HAL_GetTick>
 800201c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002028:	d005      	beq.n	8002036 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800202a:	4b09      	ldr	r3, [pc, #36]	; (8002050 <HAL_Delay+0x40>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	461a      	mov	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	4413      	add	r3, r2
 8002034:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002036:	bf00      	nop
 8002038:	f7ff ffde 	bl	8001ff8 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	429a      	cmp	r2, r3
 8002046:	d8f7      	bhi.n	8002038 <HAL_Delay+0x28>
  {
  }
}
 8002048:	bf00      	nop
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	20000008 	.word	0x20000008

08002054 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002064:	4b0c      	ldr	r3, [pc, #48]	; (8002098 <__NVIC_SetPriorityGrouping+0x44>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002070:	4013      	ands	r3, r2
 8002072:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800207c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002084:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002086:	4a04      	ldr	r2, [pc, #16]	; (8002098 <__NVIC_SetPriorityGrouping+0x44>)
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	60d3      	str	r3, [r2, #12]
}
 800208c:	bf00      	nop
 800208e:	3714      	adds	r7, #20
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	e000ed00 	.word	0xe000ed00

0800209c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020a0:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <__NVIC_GetPriorityGrouping+0x18>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	0a1b      	lsrs	r3, r3, #8
 80020a6:	f003 0307 	and.w	r3, r3, #7
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	e000ed00 	.word	0xe000ed00

080020b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	db0b      	blt.n	80020e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ca:	79fb      	ldrb	r3, [r7, #7]
 80020cc:	f003 021f 	and.w	r2, r3, #31
 80020d0:	4907      	ldr	r1, [pc, #28]	; (80020f0 <__NVIC_EnableIRQ+0x38>)
 80020d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d6:	095b      	lsrs	r3, r3, #5
 80020d8:	2001      	movs	r0, #1
 80020da:	fa00 f202 	lsl.w	r2, r0, r2
 80020de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	e000e100 	.word	0xe000e100

080020f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	6039      	str	r1, [r7, #0]
 80020fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002104:	2b00      	cmp	r3, #0
 8002106:	db0a      	blt.n	800211e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	b2da      	uxtb	r2, r3
 800210c:	490c      	ldr	r1, [pc, #48]	; (8002140 <__NVIC_SetPriority+0x4c>)
 800210e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002112:	0112      	lsls	r2, r2, #4
 8002114:	b2d2      	uxtb	r2, r2
 8002116:	440b      	add	r3, r1
 8002118:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800211c:	e00a      	b.n	8002134 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	b2da      	uxtb	r2, r3
 8002122:	4908      	ldr	r1, [pc, #32]	; (8002144 <__NVIC_SetPriority+0x50>)
 8002124:	79fb      	ldrb	r3, [r7, #7]
 8002126:	f003 030f 	and.w	r3, r3, #15
 800212a:	3b04      	subs	r3, #4
 800212c:	0112      	lsls	r2, r2, #4
 800212e:	b2d2      	uxtb	r2, r2
 8002130:	440b      	add	r3, r1
 8002132:	761a      	strb	r2, [r3, #24]
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	e000e100 	.word	0xe000e100
 8002144:	e000ed00 	.word	0xe000ed00

08002148 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002148:	b480      	push	{r7}
 800214a:	b089      	sub	sp, #36	; 0x24
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	f1c3 0307 	rsb	r3, r3, #7
 8002162:	2b04      	cmp	r3, #4
 8002164:	bf28      	it	cs
 8002166:	2304      	movcs	r3, #4
 8002168:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	3304      	adds	r3, #4
 800216e:	2b06      	cmp	r3, #6
 8002170:	d902      	bls.n	8002178 <NVIC_EncodePriority+0x30>
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	3b03      	subs	r3, #3
 8002176:	e000      	b.n	800217a <NVIC_EncodePriority+0x32>
 8002178:	2300      	movs	r3, #0
 800217a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800217c:	f04f 32ff 	mov.w	r2, #4294967295
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	43da      	mvns	r2, r3
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	401a      	ands	r2, r3
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002190:	f04f 31ff 	mov.w	r1, #4294967295
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	fa01 f303 	lsl.w	r3, r1, r3
 800219a:	43d9      	mvns	r1, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a0:	4313      	orrs	r3, r2
         );
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3724      	adds	r7, #36	; 0x24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
	...

080021b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021c0:	d301      	bcc.n	80021c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021c2:	2301      	movs	r3, #1
 80021c4:	e00f      	b.n	80021e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021c6:	4a0a      	ldr	r2, [pc, #40]	; (80021f0 <SysTick_Config+0x40>)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3b01      	subs	r3, #1
 80021cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ce:	210f      	movs	r1, #15
 80021d0:	f04f 30ff 	mov.w	r0, #4294967295
 80021d4:	f7ff ff8e 	bl	80020f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021d8:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <SysTick_Config+0x40>)
 80021da:	2200      	movs	r2, #0
 80021dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021de:	4b04      	ldr	r3, [pc, #16]	; (80021f0 <SysTick_Config+0x40>)
 80021e0:	2207      	movs	r2, #7
 80021e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	e000e010 	.word	0xe000e010

080021f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f7ff ff29 	bl	8002054 <__NVIC_SetPriorityGrouping>
}
 8002202:	bf00      	nop
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800220a:	b580      	push	{r7, lr}
 800220c:	b086      	sub	sp, #24
 800220e:	af00      	add	r7, sp, #0
 8002210:	4603      	mov	r3, r0
 8002212:	60b9      	str	r1, [r7, #8]
 8002214:	607a      	str	r2, [r7, #4]
 8002216:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002218:	2300      	movs	r3, #0
 800221a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800221c:	f7ff ff3e 	bl	800209c <__NVIC_GetPriorityGrouping>
 8002220:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	68b9      	ldr	r1, [r7, #8]
 8002226:	6978      	ldr	r0, [r7, #20]
 8002228:	f7ff ff8e 	bl	8002148 <NVIC_EncodePriority>
 800222c:	4602      	mov	r2, r0
 800222e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002232:	4611      	mov	r1, r2
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff ff5d 	bl	80020f4 <__NVIC_SetPriority>
}
 800223a:	bf00      	nop
 800223c:	3718      	adds	r7, #24
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b082      	sub	sp, #8
 8002246:	af00      	add	r7, sp, #0
 8002248:	4603      	mov	r3, r0
 800224a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800224c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff ff31 	bl	80020b8 <__NVIC_EnableIRQ>
}
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b082      	sub	sp, #8
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7ff ffa2 	bl	80021b0 <SysTick_Config>
 800226c:	4603      	mov	r3, r0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
	...

08002278 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 800227e:	2300      	movs	r3, #0
 8002280:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002282:	4b4b      	ldr	r3, [pc, #300]	; (80023b0 <HAL_FLASH_IRQHandler+0x138>)
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d020      	beq.n	80022d0 <HAL_FLASH_IRQHandler+0x58>
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800228e:	4b49      	ldr	r3, [pc, #292]	; (80023b4 <HAL_FLASH_IRQHandler+0x13c>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b01      	cmp	r3, #1
 8002296:	d107      	bne.n	80022a8 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8002298:	4b46      	ldr	r3, [pc, #280]	; (80023b4 <HAL_FLASH_IRQHandler+0x13c>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 800229e:	4b45      	ldr	r3, [pc, #276]	; (80023b4 <HAL_FLASH_IRQHandler+0x13c>)
 80022a0:	f04f 32ff 	mov.w	r2, #4294967295
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	e00b      	b.n	80022c0 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 80022a8:	4b42      	ldr	r3, [pc, #264]	; (80023b4 <HAL_FLASH_IRQHandler+0x13c>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d103      	bne.n	80022ba <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 80022b2:	4b40      	ldr	r3, [pc, #256]	; (80023b4 <HAL_FLASH_IRQHandler+0x13c>)
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	607b      	str	r3, [r7, #4]
 80022b8:	e002      	b.n	80022c0 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 80022ba:	4b3e      	ldr	r3, [pc, #248]	; (80023b4 <HAL_FLASH_IRQHandler+0x13c>)
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 80022c0:	f000 f88e 	bl	80023e0 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 f881 	bl	80023cc <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80022ca:	4b3a      	ldr	r3, [pc, #232]	; (80023b4 <HAL_FLASH_IRQHandler+0x13c>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80022d0:	4b37      	ldr	r3, [pc, #220]	; (80023b0 <HAL_FLASH_IRQHandler+0x138>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d04a      	beq.n	8002372 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80022dc:	4b34      	ldr	r3, [pc, #208]	; (80023b0 <HAL_FLASH_IRQHandler+0x138>)
 80022de:	2201      	movs	r2, #1
 80022e0:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 80022e2:	4b34      	ldr	r3, [pc, #208]	; (80023b4 <HAL_FLASH_IRQHandler+0x13c>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d12d      	bne.n	8002348 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 80022ec:	4b31      	ldr	r3, [pc, #196]	; (80023b4 <HAL_FLASH_IRQHandler+0x13c>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	3b01      	subs	r3, #1
 80022f2:	4a30      	ldr	r2, [pc, #192]	; (80023b4 <HAL_FLASH_IRQHandler+0x13c>)
 80022f4:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 80022f6:	4b2f      	ldr	r3, [pc, #188]	; (80023b4 <HAL_FLASH_IRQHandler+0x13c>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d015      	beq.n	800232a <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 80022fe:	4b2d      	ldr	r3, [pc, #180]	; (80023b4 <HAL_FLASH_IRQHandler+0x13c>)
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 f857 	bl	80023b8 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 800230a:	4b2a      	ldr	r3, [pc, #168]	; (80023b4 <HAL_FLASH_IRQHandler+0x13c>)
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	3301      	adds	r3, #1
 8002310:	4a28      	ldr	r2, [pc, #160]	; (80023b4 <HAL_FLASH_IRQHandler+0x13c>)
 8002312:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8002314:	4b27      	ldr	r3, [pc, #156]	; (80023b4 <HAL_FLASH_IRQHandler+0x13c>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 800231a:	4b26      	ldr	r3, [pc, #152]	; (80023b4 <HAL_FLASH_IRQHandler+0x13c>)
 800231c:	7a1b      	ldrb	r3, [r3, #8]
 800231e:	b2db      	uxtb	r3, r3
 8002320:	4619      	mov	r1, r3
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f8c2 	bl	80024ac <FLASH_Erase_Sector>
 8002328:	e023      	b.n	8002372 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 800232a:	f04f 33ff 	mov.w	r3, #4294967295
 800232e:	607b      	str	r3, [r7, #4]
 8002330:	4a20      	ldr	r2, [pc, #128]	; (80023b4 <HAL_FLASH_IRQHandler+0x13c>)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002336:	4b1f      	ldr	r3, [pc, #124]	; (80023b4 <HAL_FLASH_IRQHandler+0x13c>)
 8002338:	2200      	movs	r2, #0
 800233a:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 800233c:	f000 f8fe 	bl	800253c <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 f839 	bl	80023b8 <HAL_FLASH_EndOfOperationCallback>
 8002346:	e014      	b.n	8002372 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8002348:	4b1a      	ldr	r3, [pc, #104]	; (80023b4 <HAL_FLASH_IRQHandler+0x13c>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d107      	bne.n	8002362 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8002352:	f000 f8f3 	bl	800253c <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8002356:	4b17      	ldr	r3, [pc, #92]	; (80023b4 <HAL_FLASH_IRQHandler+0x13c>)
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	4618      	mov	r0, r3
 800235c:	f000 f82c 	bl	80023b8 <HAL_FLASH_EndOfOperationCallback>
 8002360:	e004      	b.n	800236c <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8002362:	4b14      	ldr	r3, [pc, #80]	; (80023b4 <HAL_FLASH_IRQHandler+0x13c>)
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	4618      	mov	r0, r3
 8002368:	f000 f826 	bl	80023b8 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800236c:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <HAL_FLASH_IRQHandler+0x13c>)
 800236e:	2200      	movs	r2, #0
 8002370:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8002372:	4b10      	ldr	r3, [pc, #64]	; (80023b4 <HAL_FLASH_IRQHandler+0x13c>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b00      	cmp	r3, #0
 800237a:	d114      	bne.n	80023a6 <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 800237c:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <HAL_FLASH_IRQHandler+0x138>)
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	4a0b      	ldr	r2, [pc, #44]	; (80023b0 <HAL_FLASH_IRQHandler+0x138>)
 8002382:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002386:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8002388:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <HAL_FLASH_IRQHandler+0x138>)
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	4a08      	ldr	r2, [pc, #32]	; (80023b0 <HAL_FLASH_IRQHandler+0x138>)
 800238e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002392:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8002394:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <HAL_FLASH_IRQHandler+0x138>)
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	4a05      	ldr	r2, [pc, #20]	; (80023b0 <HAL_FLASH_IRQHandler+0x138>)
 800239a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800239e:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 80023a0:	4b04      	ldr	r3, [pc, #16]	; (80023b4 <HAL_FLASH_IRQHandler+0x13c>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	761a      	strb	r2, [r3, #24]
  }
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40023c00 	.word	0x40023c00
 80023b4:	20000db0 	.word	0x20000db0

080023b8 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80023e4:	4b2f      	ldr	r3, [pc, #188]	; (80024a4 <FLASH_SetErrorCode+0xc4>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	f003 0310 	and.w	r3, r3, #16
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d008      	beq.n	8002402 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80023f0:	4b2d      	ldr	r3, [pc, #180]	; (80024a8 <FLASH_SetErrorCode+0xc8>)
 80023f2:	69db      	ldr	r3, [r3, #28]
 80023f4:	f043 0310 	orr.w	r3, r3, #16
 80023f8:	4a2b      	ldr	r2, [pc, #172]	; (80024a8 <FLASH_SetErrorCode+0xc8>)
 80023fa:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80023fc:	4b29      	ldr	r3, [pc, #164]	; (80024a4 <FLASH_SetErrorCode+0xc4>)
 80023fe:	2210      	movs	r2, #16
 8002400:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002402:	4b28      	ldr	r3, [pc, #160]	; (80024a4 <FLASH_SetErrorCode+0xc4>)
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	f003 0320 	and.w	r3, r3, #32
 800240a:	2b00      	cmp	r3, #0
 800240c:	d008      	beq.n	8002420 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800240e:	4b26      	ldr	r3, [pc, #152]	; (80024a8 <FLASH_SetErrorCode+0xc8>)
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	f043 0308 	orr.w	r3, r3, #8
 8002416:	4a24      	ldr	r2, [pc, #144]	; (80024a8 <FLASH_SetErrorCode+0xc8>)
 8002418:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800241a:	4b22      	ldr	r3, [pc, #136]	; (80024a4 <FLASH_SetErrorCode+0xc4>)
 800241c:	2220      	movs	r2, #32
 800241e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002420:	4b20      	ldr	r3, [pc, #128]	; (80024a4 <FLASH_SetErrorCode+0xc4>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002428:	2b00      	cmp	r3, #0
 800242a:	d008      	beq.n	800243e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800242c:	4b1e      	ldr	r3, [pc, #120]	; (80024a8 <FLASH_SetErrorCode+0xc8>)
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	f043 0304 	orr.w	r3, r3, #4
 8002434:	4a1c      	ldr	r2, [pc, #112]	; (80024a8 <FLASH_SetErrorCode+0xc8>)
 8002436:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002438:	4b1a      	ldr	r3, [pc, #104]	; (80024a4 <FLASH_SetErrorCode+0xc4>)
 800243a:	2240      	movs	r2, #64	; 0x40
 800243c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800243e:	4b19      	ldr	r3, [pc, #100]	; (80024a4 <FLASH_SetErrorCode+0xc4>)
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002446:	2b00      	cmp	r3, #0
 8002448:	d008      	beq.n	800245c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800244a:	4b17      	ldr	r3, [pc, #92]	; (80024a8 <FLASH_SetErrorCode+0xc8>)
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	f043 0302 	orr.w	r3, r3, #2
 8002452:	4a15      	ldr	r2, [pc, #84]	; (80024a8 <FLASH_SetErrorCode+0xc8>)
 8002454:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002456:	4b13      	ldr	r3, [pc, #76]	; (80024a4 <FLASH_SetErrorCode+0xc4>)
 8002458:	2280      	movs	r2, #128	; 0x80
 800245a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800245c:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <FLASH_SetErrorCode+0xc4>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002464:	2b00      	cmp	r3, #0
 8002466:	d009      	beq.n	800247c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002468:	4b0f      	ldr	r3, [pc, #60]	; (80024a8 <FLASH_SetErrorCode+0xc8>)
 800246a:	69db      	ldr	r3, [r3, #28]
 800246c:	f043 0301 	orr.w	r3, r3, #1
 8002470:	4a0d      	ldr	r2, [pc, #52]	; (80024a8 <FLASH_SetErrorCode+0xc8>)
 8002472:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002474:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <FLASH_SetErrorCode+0xc4>)
 8002476:	f44f 7280 	mov.w	r2, #256	; 0x100
 800247a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800247c:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <FLASH_SetErrorCode+0xc4>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d008      	beq.n	800249a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002488:	4b07      	ldr	r3, [pc, #28]	; (80024a8 <FLASH_SetErrorCode+0xc8>)
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	f043 0320 	orr.w	r3, r3, #32
 8002490:	4a05      	ldr	r2, [pc, #20]	; (80024a8 <FLASH_SetErrorCode+0xc8>)
 8002492:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002494:	4b03      	ldr	r3, [pc, #12]	; (80024a4 <FLASH_SetErrorCode+0xc4>)
 8002496:	2202      	movs	r2, #2
 8002498:	60da      	str	r2, [r3, #12]
  }
}
 800249a:	bf00      	nop
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	40023c00 	.word	0x40023c00
 80024a8:	20000db0 	.word	0x20000db0

080024ac <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	460b      	mov	r3, r1
 80024b6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80024bc:	78fb      	ldrb	r3, [r7, #3]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d102      	bne.n	80024c8 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80024c2:	2300      	movs	r3, #0
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	e010      	b.n	80024ea <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80024c8:	78fb      	ldrb	r3, [r7, #3]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d103      	bne.n	80024d6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80024ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	e009      	b.n	80024ea <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80024d6:	78fb      	ldrb	r3, [r7, #3]
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d103      	bne.n	80024e4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80024dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	e002      	b.n	80024ea <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80024e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80024e8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80024ea:	4b13      	ldr	r3, [pc, #76]	; (8002538 <FLASH_Erase_Sector+0x8c>)
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	4a12      	ldr	r2, [pc, #72]	; (8002538 <FLASH_Erase_Sector+0x8c>)
 80024f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024f4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80024f6:	4b10      	ldr	r3, [pc, #64]	; (8002538 <FLASH_Erase_Sector+0x8c>)
 80024f8:	691a      	ldr	r2, [r3, #16]
 80024fa:	490f      	ldr	r1, [pc, #60]	; (8002538 <FLASH_Erase_Sector+0x8c>)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4313      	orrs	r3, r2
 8002500:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002502:	4b0d      	ldr	r3, [pc, #52]	; (8002538 <FLASH_Erase_Sector+0x8c>)
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	4a0c      	ldr	r2, [pc, #48]	; (8002538 <FLASH_Erase_Sector+0x8c>)
 8002508:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800250c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800250e:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <FLASH_Erase_Sector+0x8c>)
 8002510:	691a      	ldr	r2, [r3, #16]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	4313      	orrs	r3, r2
 8002518:	4a07      	ldr	r2, [pc, #28]	; (8002538 <FLASH_Erase_Sector+0x8c>)
 800251a:	f043 0302 	orr.w	r3, r3, #2
 800251e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002520:	4b05      	ldr	r3, [pc, #20]	; (8002538 <FLASH_Erase_Sector+0x8c>)
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	4a04      	ldr	r2, [pc, #16]	; (8002538 <FLASH_Erase_Sector+0x8c>)
 8002526:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800252a:	6113      	str	r3, [r2, #16]
}
 800252c:	bf00      	nop
 800252e:	3714      	adds	r7, #20
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	40023c00 	.word	0x40023c00

0800253c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8002540:	4b20      	ldr	r3, [pc, #128]	; (80025c4 <FLASH_FlushCaches+0x88>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002548:	2b00      	cmp	r3, #0
 800254a:	d017      	beq.n	800257c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800254c:	4b1d      	ldr	r3, [pc, #116]	; (80025c4 <FLASH_FlushCaches+0x88>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a1c      	ldr	r2, [pc, #112]	; (80025c4 <FLASH_FlushCaches+0x88>)
 8002552:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002556:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002558:	4b1a      	ldr	r3, [pc, #104]	; (80025c4 <FLASH_FlushCaches+0x88>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a19      	ldr	r2, [pc, #100]	; (80025c4 <FLASH_FlushCaches+0x88>)
 800255e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002562:	6013      	str	r3, [r2, #0]
 8002564:	4b17      	ldr	r3, [pc, #92]	; (80025c4 <FLASH_FlushCaches+0x88>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a16      	ldr	r2, [pc, #88]	; (80025c4 <FLASH_FlushCaches+0x88>)
 800256a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800256e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002570:	4b14      	ldr	r3, [pc, #80]	; (80025c4 <FLASH_FlushCaches+0x88>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a13      	ldr	r2, [pc, #76]	; (80025c4 <FLASH_FlushCaches+0x88>)
 8002576:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800257a:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800257c:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <FLASH_FlushCaches+0x88>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002584:	2b00      	cmp	r3, #0
 8002586:	d017      	beq.n	80025b8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002588:	4b0e      	ldr	r3, [pc, #56]	; (80025c4 <FLASH_FlushCaches+0x88>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a0d      	ldr	r2, [pc, #52]	; (80025c4 <FLASH_FlushCaches+0x88>)
 800258e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002592:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002594:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <FLASH_FlushCaches+0x88>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a0a      	ldr	r2, [pc, #40]	; (80025c4 <FLASH_FlushCaches+0x88>)
 800259a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800259e:	6013      	str	r3, [r2, #0]
 80025a0:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <FLASH_FlushCaches+0x88>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a07      	ldr	r2, [pc, #28]	; (80025c4 <FLASH_FlushCaches+0x88>)
 80025a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025aa:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80025ac:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <FLASH_FlushCaches+0x88>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a04      	ldr	r2, [pc, #16]	; (80025c4 <FLASH_FlushCaches+0x88>)
 80025b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025b6:	6013      	str	r3, [r2, #0]
  }
}
 80025b8:	bf00      	nop
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	40023c00 	.word	0x40023c00

080025c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b089      	sub	sp, #36	; 0x24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025da:	2300      	movs	r3, #0
 80025dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025de:	2300      	movs	r3, #0
 80025e0:	61fb      	str	r3, [r7, #28]
 80025e2:	e165      	b.n	80028b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025e4:	2201      	movs	r2, #1
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	4013      	ands	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	f040 8154 	bne.w	80028aa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d00b      	beq.n	8002622 <HAL_GPIO_Init+0x5a>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b02      	cmp	r3, #2
 8002610:	d007      	beq.n	8002622 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002616:	2b11      	cmp	r3, #17
 8002618:	d003      	beq.n	8002622 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2b12      	cmp	r3, #18
 8002620:	d130      	bne.n	8002684 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	2203      	movs	r2, #3
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	43db      	mvns	r3, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4013      	ands	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	68da      	ldr	r2, [r3, #12]
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4313      	orrs	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002658:	2201      	movs	r2, #1
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	43db      	mvns	r3, r3
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4013      	ands	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	091b      	lsrs	r3, r3, #4
 800266e:	f003 0201 	and.w	r2, r3, #1
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4313      	orrs	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	2203      	movs	r2, #3
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4013      	ands	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d003      	beq.n	80026c4 <HAL_GPIO_Init+0xfc>
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	2b12      	cmp	r3, #18
 80026c2:	d123      	bne.n	800270c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	08da      	lsrs	r2, r3, #3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3208      	adds	r2, #8
 80026cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	220f      	movs	r2, #15
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4013      	ands	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	691a      	ldr	r2, [r3, #16]
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	08da      	lsrs	r2, r3, #3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	3208      	adds	r2, #8
 8002706:	69b9      	ldr	r1, [r7, #24]
 8002708:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	2203      	movs	r2, #3
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4013      	ands	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f003 0203 	and.w	r2, r3, #3
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4313      	orrs	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002748:	2b00      	cmp	r3, #0
 800274a:	f000 80ae 	beq.w	80028aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800274e:	2300      	movs	r3, #0
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	4b5c      	ldr	r3, [pc, #368]	; (80028c4 <HAL_GPIO_Init+0x2fc>)
 8002754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002756:	4a5b      	ldr	r2, [pc, #364]	; (80028c4 <HAL_GPIO_Init+0x2fc>)
 8002758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800275c:	6453      	str	r3, [r2, #68]	; 0x44
 800275e:	4b59      	ldr	r3, [pc, #356]	; (80028c4 <HAL_GPIO_Init+0x2fc>)
 8002760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800276a:	4a57      	ldr	r2, [pc, #348]	; (80028c8 <HAL_GPIO_Init+0x300>)
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	089b      	lsrs	r3, r3, #2
 8002770:	3302      	adds	r3, #2
 8002772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002776:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	f003 0303 	and.w	r3, r3, #3
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	220f      	movs	r2, #15
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43db      	mvns	r3, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4013      	ands	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a4e      	ldr	r2, [pc, #312]	; (80028cc <HAL_GPIO_Init+0x304>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d025      	beq.n	80027e2 <HAL_GPIO_Init+0x21a>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a4d      	ldr	r2, [pc, #308]	; (80028d0 <HAL_GPIO_Init+0x308>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d01f      	beq.n	80027de <HAL_GPIO_Init+0x216>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a4c      	ldr	r2, [pc, #304]	; (80028d4 <HAL_GPIO_Init+0x30c>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d019      	beq.n	80027da <HAL_GPIO_Init+0x212>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a4b      	ldr	r2, [pc, #300]	; (80028d8 <HAL_GPIO_Init+0x310>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d013      	beq.n	80027d6 <HAL_GPIO_Init+0x20e>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a4a      	ldr	r2, [pc, #296]	; (80028dc <HAL_GPIO_Init+0x314>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d00d      	beq.n	80027d2 <HAL_GPIO_Init+0x20a>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a49      	ldr	r2, [pc, #292]	; (80028e0 <HAL_GPIO_Init+0x318>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d007      	beq.n	80027ce <HAL_GPIO_Init+0x206>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a48      	ldr	r2, [pc, #288]	; (80028e4 <HAL_GPIO_Init+0x31c>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d101      	bne.n	80027ca <HAL_GPIO_Init+0x202>
 80027c6:	2306      	movs	r3, #6
 80027c8:	e00c      	b.n	80027e4 <HAL_GPIO_Init+0x21c>
 80027ca:	2307      	movs	r3, #7
 80027cc:	e00a      	b.n	80027e4 <HAL_GPIO_Init+0x21c>
 80027ce:	2305      	movs	r3, #5
 80027d0:	e008      	b.n	80027e4 <HAL_GPIO_Init+0x21c>
 80027d2:	2304      	movs	r3, #4
 80027d4:	e006      	b.n	80027e4 <HAL_GPIO_Init+0x21c>
 80027d6:	2303      	movs	r3, #3
 80027d8:	e004      	b.n	80027e4 <HAL_GPIO_Init+0x21c>
 80027da:	2302      	movs	r3, #2
 80027dc:	e002      	b.n	80027e4 <HAL_GPIO_Init+0x21c>
 80027de:	2301      	movs	r3, #1
 80027e0:	e000      	b.n	80027e4 <HAL_GPIO_Init+0x21c>
 80027e2:	2300      	movs	r3, #0
 80027e4:	69fa      	ldr	r2, [r7, #28]
 80027e6:	f002 0203 	and.w	r2, r2, #3
 80027ea:	0092      	lsls	r2, r2, #2
 80027ec:	4093      	lsls	r3, r2
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027f4:	4934      	ldr	r1, [pc, #208]	; (80028c8 <HAL_GPIO_Init+0x300>)
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	089b      	lsrs	r3, r3, #2
 80027fa:	3302      	adds	r3, #2
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002802:	4b39      	ldr	r3, [pc, #228]	; (80028e8 <HAL_GPIO_Init+0x320>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	43db      	mvns	r3, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4013      	ands	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	4313      	orrs	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002826:	4a30      	ldr	r2, [pc, #192]	; (80028e8 <HAL_GPIO_Init+0x320>)
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800282c:	4b2e      	ldr	r3, [pc, #184]	; (80028e8 <HAL_GPIO_Init+0x320>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	43db      	mvns	r3, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4013      	ands	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d003      	beq.n	8002850 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	4313      	orrs	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002850:	4a25      	ldr	r2, [pc, #148]	; (80028e8 <HAL_GPIO_Init+0x320>)
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002856:	4b24      	ldr	r3, [pc, #144]	; (80028e8 <HAL_GPIO_Init+0x320>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	43db      	mvns	r3, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4013      	ands	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800287a:	4a1b      	ldr	r2, [pc, #108]	; (80028e8 <HAL_GPIO_Init+0x320>)
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002880:	4b19      	ldr	r3, [pc, #100]	; (80028e8 <HAL_GPIO_Init+0x320>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	43db      	mvns	r3, r3
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4013      	ands	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d003      	beq.n	80028a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028a4:	4a10      	ldr	r2, [pc, #64]	; (80028e8 <HAL_GPIO_Init+0x320>)
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	3301      	adds	r3, #1
 80028ae:	61fb      	str	r3, [r7, #28]
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	2b0f      	cmp	r3, #15
 80028b4:	f67f ae96 	bls.w	80025e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028b8:	bf00      	nop
 80028ba:	3724      	adds	r7, #36	; 0x24
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	40023800 	.word	0x40023800
 80028c8:	40013800 	.word	0x40013800
 80028cc:	40020000 	.word	0x40020000
 80028d0:	40020400 	.word	0x40020400
 80028d4:	40020800 	.word	0x40020800
 80028d8:	40020c00 	.word	0x40020c00
 80028dc:	40021000 	.word	0x40021000
 80028e0:	40021400 	.word	0x40021400
 80028e4:	40021800 	.word	0x40021800
 80028e8:	40013c00 	.word	0x40013c00

080028ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	460b      	mov	r3, r1
 80028f6:	807b      	strh	r3, [r7, #2]
 80028f8:	4613      	mov	r3, r2
 80028fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028fc:	787b      	ldrb	r3, [r7, #1]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002902:	887a      	ldrh	r2, [r7, #2]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002908:	e003      	b.n	8002912 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800290a:	887b      	ldrh	r3, [r7, #2]
 800290c:	041a      	lsls	r2, r3, #16
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	619a      	str	r2, [r3, #24]
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
 8002926:	460b      	mov	r3, r1
 8002928:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	695a      	ldr	r2, [r3, #20]
 800292e:	887b      	ldrh	r3, [r7, #2]
 8002930:	401a      	ands	r2, r3
 8002932:	887b      	ldrh	r3, [r7, #2]
 8002934:	429a      	cmp	r2, r3
 8002936:	d104      	bne.n	8002942 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002938:	887b      	ldrh	r3, [r7, #2]
 800293a:	041a      	lsls	r2, r3, #16
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002940:	e002      	b.n	8002948 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002942:	887a      	ldrh	r2, [r7, #2]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	619a      	str	r2, [r3, #24]
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	4603      	mov	r3, r0
 800295c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800295e:	4b08      	ldr	r3, [pc, #32]	; (8002980 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002960:	695a      	ldr	r2, [r3, #20]
 8002962:	88fb      	ldrh	r3, [r7, #6]
 8002964:	4013      	ands	r3, r2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d006      	beq.n	8002978 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800296a:	4a05      	ldr	r2, [pc, #20]	; (8002980 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800296c:	88fb      	ldrh	r3, [r7, #6]
 800296e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002970:	88fb      	ldrh	r3, [r7, #6]
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff f874 	bl	8001a60 <HAL_GPIO_EXTI_Callback>
  }
}
 8002978:	bf00      	nop
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40013c00 	.word	0x40013c00

08002984 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e11f      	b.n	8002bd6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d106      	bne.n	80029b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7ff f8f2 	bl	8001b94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2224      	movs	r2, #36	; 0x24
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 0201 	bic.w	r2, r2, #1
 80029c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029e8:	f001 f872 	bl	8003ad0 <HAL_RCC_GetPCLK1Freq>
 80029ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	4a7b      	ldr	r2, [pc, #492]	; (8002be0 <HAL_I2C_Init+0x25c>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d807      	bhi.n	8002a08 <HAL_I2C_Init+0x84>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	4a7a      	ldr	r2, [pc, #488]	; (8002be4 <HAL_I2C_Init+0x260>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	bf94      	ite	ls
 8002a00:	2301      	movls	r3, #1
 8002a02:	2300      	movhi	r3, #0
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	e006      	b.n	8002a16 <HAL_I2C_Init+0x92>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4a77      	ldr	r2, [pc, #476]	; (8002be8 <HAL_I2C_Init+0x264>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	bf94      	ite	ls
 8002a10:	2301      	movls	r3, #1
 8002a12:	2300      	movhi	r3, #0
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e0db      	b.n	8002bd6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	4a72      	ldr	r2, [pc, #456]	; (8002bec <HAL_I2C_Init+0x268>)
 8002a22:	fba2 2303 	umull	r2, r3, r2, r3
 8002a26:	0c9b      	lsrs	r3, r3, #18
 8002a28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68ba      	ldr	r2, [r7, #8]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	4a64      	ldr	r2, [pc, #400]	; (8002be0 <HAL_I2C_Init+0x25c>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d802      	bhi.n	8002a58 <HAL_I2C_Init+0xd4>
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	3301      	adds	r3, #1
 8002a56:	e009      	b.n	8002a6c <HAL_I2C_Init+0xe8>
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a5e:	fb02 f303 	mul.w	r3, r2, r3
 8002a62:	4a63      	ldr	r2, [pc, #396]	; (8002bf0 <HAL_I2C_Init+0x26c>)
 8002a64:	fba2 2303 	umull	r2, r3, r2, r3
 8002a68:	099b      	lsrs	r3, r3, #6
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	6812      	ldr	r2, [r2, #0]
 8002a70:	430b      	orrs	r3, r1
 8002a72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a7e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	4956      	ldr	r1, [pc, #344]	; (8002be0 <HAL_I2C_Init+0x25c>)
 8002a88:	428b      	cmp	r3, r1
 8002a8a:	d80d      	bhi.n	8002aa8 <HAL_I2C_Init+0x124>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	1e59      	subs	r1, r3, #1
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aa0:	2b04      	cmp	r3, #4
 8002aa2:	bf38      	it	cc
 8002aa4:	2304      	movcc	r3, #4
 8002aa6:	e04f      	b.n	8002b48 <HAL_I2C_Init+0x1c4>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d111      	bne.n	8002ad4 <HAL_I2C_Init+0x150>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	1e58      	subs	r0, r3, #1
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6859      	ldr	r1, [r3, #4]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	440b      	add	r3, r1
 8002abe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	bf0c      	ite	eq
 8002acc:	2301      	moveq	r3, #1
 8002ace:	2300      	movne	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	e012      	b.n	8002afa <HAL_I2C_Init+0x176>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	1e58      	subs	r0, r3, #1
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6859      	ldr	r1, [r3, #4]
 8002adc:	460b      	mov	r3, r1
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	0099      	lsls	r1, r3, #2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aea:	3301      	adds	r3, #1
 8002aec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	bf0c      	ite	eq
 8002af4:	2301      	moveq	r3, #1
 8002af6:	2300      	movne	r3, #0
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <HAL_I2C_Init+0x17e>
 8002afe:	2301      	movs	r3, #1
 8002b00:	e022      	b.n	8002b48 <HAL_I2C_Init+0x1c4>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10e      	bne.n	8002b28 <HAL_I2C_Init+0x1a4>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	1e58      	subs	r0, r3, #1
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6859      	ldr	r1, [r3, #4]
 8002b12:	460b      	mov	r3, r1
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	440b      	add	r3, r1
 8002b18:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b26:	e00f      	b.n	8002b48 <HAL_I2C_Init+0x1c4>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	1e58      	subs	r0, r3, #1
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6859      	ldr	r1, [r3, #4]
 8002b30:	460b      	mov	r3, r1
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	440b      	add	r3, r1
 8002b36:	0099      	lsls	r1, r3, #2
 8002b38:	440b      	add	r3, r1
 8002b3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b3e:	3301      	adds	r3, #1
 8002b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b48:	6879      	ldr	r1, [r7, #4]
 8002b4a:	6809      	ldr	r1, [r1, #0]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69da      	ldr	r2, [r3, #28]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	6911      	ldr	r1, [r2, #16]
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	68d2      	ldr	r2, [r2, #12]
 8002b82:	4311      	orrs	r1, r2
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	6812      	ldr	r2, [r2, #0]
 8002b88:	430b      	orrs	r3, r1
 8002b8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	695a      	ldr	r2, [r3, #20]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f042 0201 	orr.w	r2, r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2220      	movs	r2, #32
 8002bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	000186a0 	.word	0x000186a0
 8002be4:	001e847f 	.word	0x001e847f
 8002be8:	003d08ff 	.word	0x003d08ff
 8002bec:	431bde83 	.word	0x431bde83
 8002bf0:	10624dd3 	.word	0x10624dd3

08002bf4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b088      	sub	sp, #32
 8002bf8:	af02      	add	r7, sp, #8
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	4608      	mov	r0, r1
 8002bfe:	4611      	mov	r1, r2
 8002c00:	461a      	mov	r2, r3
 8002c02:	4603      	mov	r3, r0
 8002c04:	817b      	strh	r3, [r7, #10]
 8002c06:	460b      	mov	r3, r1
 8002c08:	813b      	strh	r3, [r7, #8]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c0e:	f7ff f9f3 	bl	8001ff8 <HAL_GetTick>
 8002c12:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b20      	cmp	r3, #32
 8002c1e:	f040 80d9 	bne.w	8002dd4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	2319      	movs	r3, #25
 8002c28:	2201      	movs	r2, #1
 8002c2a:	496d      	ldr	r1, [pc, #436]	; (8002de0 <HAL_I2C_Mem_Write+0x1ec>)
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f000 fc7f 	bl	8003530 <I2C_WaitOnFlagUntilTimeout>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002c38:	2302      	movs	r3, #2
 8002c3a:	e0cc      	b.n	8002dd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d101      	bne.n	8002c4a <HAL_I2C_Mem_Write+0x56>
 8002c46:	2302      	movs	r3, #2
 8002c48:	e0c5      	b.n	8002dd6 <HAL_I2C_Mem_Write+0x1e2>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d007      	beq.n	8002c70 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0201 	orr.w	r2, r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c7e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2221      	movs	r2, #33	; 0x21
 8002c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2240      	movs	r2, #64	; 0x40
 8002c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6a3a      	ldr	r2, [r7, #32]
 8002c9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ca0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	4a4d      	ldr	r2, [pc, #308]	; (8002de4 <HAL_I2C_Mem_Write+0x1f0>)
 8002cb0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cb2:	88f8      	ldrh	r0, [r7, #6]
 8002cb4:	893a      	ldrh	r2, [r7, #8]
 8002cb6:	8979      	ldrh	r1, [r7, #10]
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	9301      	str	r3, [sp, #4]
 8002cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f000 fab6 	bl	8003234 <I2C_RequestMemoryWrite>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d052      	beq.n	8002d74 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e081      	b.n	8002dd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f000 fd00 	bl	80036dc <I2C_WaitOnTXEFlagUntilTimeout>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00d      	beq.n	8002cfe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d107      	bne.n	8002cfa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cf8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e06b      	b.n	8002dd6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d02:	781a      	ldrb	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0e:	1c5a      	adds	r2, r3, #1
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	3b01      	subs	r3, #1
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b04      	cmp	r3, #4
 8002d3a:	d11b      	bne.n	8002d74 <HAL_I2C_Mem_Write+0x180>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d017      	beq.n	8002d74 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d48:	781a      	ldrb	r2, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d54:	1c5a      	adds	r2, r3, #1
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1aa      	bne.n	8002cd2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	f000 fcec 	bl	800375e <I2C_WaitOnBTFFlagUntilTimeout>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00d      	beq.n	8002da8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d90:	2b04      	cmp	r3, #4
 8002d92:	d107      	bne.n	8002da4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002da2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e016      	b.n	8002dd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002db6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2220      	movs	r2, #32
 8002dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	e000      	b.n	8002dd6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002dd4:	2302      	movs	r3, #2
  }
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3718      	adds	r7, #24
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	00100002 	.word	0x00100002
 8002de4:	ffff0000 	.word	0xffff0000

08002de8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b08c      	sub	sp, #48	; 0x30
 8002dec:	af02      	add	r7, sp, #8
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	4608      	mov	r0, r1
 8002df2:	4611      	mov	r1, r2
 8002df4:	461a      	mov	r2, r3
 8002df6:	4603      	mov	r3, r0
 8002df8:	817b      	strh	r3, [r7, #10]
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	813b      	strh	r3, [r7, #8]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e02:	f7ff f8f9 	bl	8001ff8 <HAL_GetTick>
 8002e06:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b20      	cmp	r3, #32
 8002e12:	f040 8208 	bne.w	8003226 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	2319      	movs	r3, #25
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	497b      	ldr	r1, [pc, #492]	; (800300c <HAL_I2C_Mem_Read+0x224>)
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f000 fb85 	bl	8003530 <I2C_WaitOnFlagUntilTimeout>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	e1fb      	b.n	8003228 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d101      	bne.n	8002e3e <HAL_I2C_Mem_Read+0x56>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	e1f4      	b.n	8003228 <HAL_I2C_Mem_Read+0x440>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d007      	beq.n	8002e64 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 0201 	orr.w	r2, r2, #1
 8002e62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2222      	movs	r2, #34	; 0x22
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2240      	movs	r2, #64	; 0x40
 8002e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002e94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	4a5b      	ldr	r2, [pc, #364]	; (8003010 <HAL_I2C_Mem_Read+0x228>)
 8002ea4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ea6:	88f8      	ldrh	r0, [r7, #6]
 8002ea8:	893a      	ldrh	r2, [r7, #8]
 8002eaa:	8979      	ldrh	r1, [r7, #10]
 8002eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eae:	9301      	str	r3, [sp, #4]
 8002eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 fa52 	bl	8003360 <I2C_RequestMemoryRead>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e1b0      	b.n	8003228 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d113      	bne.n	8002ef6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ece:	2300      	movs	r3, #0
 8002ed0:	623b      	str	r3, [r7, #32]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	623b      	str	r3, [r7, #32]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	623b      	str	r3, [r7, #32]
 8002ee2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	e184      	b.n	8003200 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d11b      	bne.n	8002f36 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f0e:	2300      	movs	r3, #0
 8002f10:	61fb      	str	r3, [r7, #28]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	61fb      	str	r3, [r7, #28]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	61fb      	str	r3, [r7, #28]
 8002f22:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	e164      	b.n	8003200 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d11b      	bne.n	8002f76 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f4c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f5e:	2300      	movs	r3, #0
 8002f60:	61bb      	str	r3, [r7, #24]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	61bb      	str	r3, [r7, #24]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	61bb      	str	r3, [r7, #24]
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	e144      	b.n	8003200 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f76:	2300      	movs	r3, #0
 8002f78:	617b      	str	r3, [r7, #20]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	617b      	str	r3, [r7, #20]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	617b      	str	r3, [r7, #20]
 8002f8a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002f8c:	e138      	b.n	8003200 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f92:	2b03      	cmp	r3, #3
 8002f94:	f200 80f1 	bhi.w	800317a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d123      	bne.n	8002fe8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f000 fc1b 	bl	80037e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e139      	b.n	8003228 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	691a      	ldr	r2, [r3, #16]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbe:	b2d2      	uxtb	r2, r2
 8002fc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc6:	1c5a      	adds	r2, r3, #1
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fe6:	e10b      	b.n	8003200 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d14e      	bne.n	800308e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	4906      	ldr	r1, [pc, #24]	; (8003014 <HAL_I2C_Mem_Read+0x22c>)
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f000 fa98 	bl	8003530 <I2C_WaitOnFlagUntilTimeout>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d008      	beq.n	8003018 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e10e      	b.n	8003228 <HAL_I2C_Mem_Read+0x440>
 800300a:	bf00      	nop
 800300c:	00100002 	.word	0x00100002
 8003010:	ffff0000 	.word	0xffff0000
 8003014:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003026:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	691a      	ldr	r2, [r3, #16]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303a:	1c5a      	adds	r2, r3, #1
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003044:	3b01      	subs	r3, #1
 8003046:	b29a      	uxth	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003050:	b29b      	uxth	r3, r3
 8003052:	3b01      	subs	r3, #1
 8003054:	b29a      	uxth	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	691a      	ldr	r2, [r3, #16]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003064:	b2d2      	uxtb	r2, r2
 8003066:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306c:	1c5a      	adds	r2, r3, #1
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003076:	3b01      	subs	r3, #1
 8003078:	b29a      	uxth	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003082:	b29b      	uxth	r3, r3
 8003084:	3b01      	subs	r3, #1
 8003086:	b29a      	uxth	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800308c:	e0b8      	b.n	8003200 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003094:	2200      	movs	r2, #0
 8003096:	4966      	ldr	r1, [pc, #408]	; (8003230 <HAL_I2C_Mem_Read+0x448>)
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f000 fa49 	bl	8003530 <I2C_WaitOnFlagUntilTimeout>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e0bf      	b.n	8003228 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	691a      	ldr	r2, [r3, #16]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ca:	1c5a      	adds	r2, r3, #1
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d4:	3b01      	subs	r3, #1
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	3b01      	subs	r3, #1
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030f0:	2200      	movs	r2, #0
 80030f2:	494f      	ldr	r1, [pc, #316]	; (8003230 <HAL_I2C_Mem_Read+0x448>)
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f000 fa1b 	bl	8003530 <I2C_WaitOnFlagUntilTimeout>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e091      	b.n	8003228 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003112:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	691a      	ldr	r2, [r3, #16]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003126:	1c5a      	adds	r2, r3, #1
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003130:	3b01      	subs	r3, #1
 8003132:	b29a      	uxth	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800313c:	b29b      	uxth	r3, r3
 800313e:	3b01      	subs	r3, #1
 8003140:	b29a      	uxth	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	691a      	ldr	r2, [r3, #16]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003150:	b2d2      	uxtb	r2, r2
 8003152:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003158:	1c5a      	adds	r2, r3, #1
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003162:	3b01      	subs	r3, #1
 8003164:	b29a      	uxth	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800316e:	b29b      	uxth	r3, r3
 8003170:	3b01      	subs	r3, #1
 8003172:	b29a      	uxth	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003178:	e042      	b.n	8003200 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800317a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800317c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f000 fb2e 	bl	80037e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e04c      	b.n	8003228 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	691a      	ldr	r2, [r3, #16]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	b2d2      	uxtb	r2, r2
 800319a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	1c5a      	adds	r2, r3, #1
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031aa:	3b01      	subs	r3, #1
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	3b01      	subs	r3, #1
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	f003 0304 	and.w	r3, r3, #4
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	d118      	bne.n	8003200 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	691a      	ldr	r2, [r3, #16]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	1c5a      	adds	r2, r3, #1
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ea:	3b01      	subs	r3, #1
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003204:	2b00      	cmp	r3, #0
 8003206:	f47f aec2 	bne.w	8002f8e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2220      	movs	r2, #32
 800320e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003222:	2300      	movs	r3, #0
 8003224:	e000      	b.n	8003228 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003226:	2302      	movs	r3, #2
  }
}
 8003228:	4618      	mov	r0, r3
 800322a:	3728      	adds	r7, #40	; 0x28
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	00010004 	.word	0x00010004

08003234 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b088      	sub	sp, #32
 8003238:	af02      	add	r7, sp, #8
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	4608      	mov	r0, r1
 800323e:	4611      	mov	r1, r2
 8003240:	461a      	mov	r2, r3
 8003242:	4603      	mov	r3, r0
 8003244:	817b      	strh	r3, [r7, #10]
 8003246:	460b      	mov	r3, r1
 8003248:	813b      	strh	r3, [r7, #8]
 800324a:	4613      	mov	r3, r2
 800324c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800325c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800325e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	6a3b      	ldr	r3, [r7, #32]
 8003264:	2200      	movs	r2, #0
 8003266:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f000 f960 	bl	8003530 <I2C_WaitOnFlagUntilTimeout>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00d      	beq.n	8003292 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003280:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003284:	d103      	bne.n	800328e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f44f 7200 	mov.w	r2, #512	; 0x200
 800328c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e05f      	b.n	8003352 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003292:	897b      	ldrh	r3, [r7, #10]
 8003294:	b2db      	uxtb	r3, r3
 8003296:	461a      	mov	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a4:	6a3a      	ldr	r2, [r7, #32]
 80032a6:	492d      	ldr	r1, [pc, #180]	; (800335c <I2C_RequestMemoryWrite+0x128>)
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f000 f998 	bl	80035de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e04c      	b.n	8003352 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032b8:	2300      	movs	r3, #0
 80032ba:	617b      	str	r3, [r7, #20]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	617b      	str	r3, [r7, #20]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	617b      	str	r3, [r7, #20]
 80032cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032d0:	6a39      	ldr	r1, [r7, #32]
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 fa02 	bl	80036dc <I2C_WaitOnTXEFlagUntilTimeout>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00d      	beq.n	80032fa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	d107      	bne.n	80032f6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e02b      	b.n	8003352 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032fa:	88fb      	ldrh	r3, [r7, #6]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d105      	bne.n	800330c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003300:	893b      	ldrh	r3, [r7, #8]
 8003302:	b2da      	uxtb	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	611a      	str	r2, [r3, #16]
 800330a:	e021      	b.n	8003350 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800330c:	893b      	ldrh	r3, [r7, #8]
 800330e:	0a1b      	lsrs	r3, r3, #8
 8003310:	b29b      	uxth	r3, r3
 8003312:	b2da      	uxtb	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800331a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800331c:	6a39      	ldr	r1, [r7, #32]
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 f9dc 	bl	80036dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00d      	beq.n	8003346 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	2b04      	cmp	r3, #4
 8003330:	d107      	bne.n	8003342 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003340:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e005      	b.n	8003352 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003346:	893b      	ldrh	r3, [r7, #8]
 8003348:	b2da      	uxtb	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3718      	adds	r7, #24
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	00010002 	.word	0x00010002

08003360 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b088      	sub	sp, #32
 8003364:	af02      	add	r7, sp, #8
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	4608      	mov	r0, r1
 800336a:	4611      	mov	r1, r2
 800336c:	461a      	mov	r2, r3
 800336e:	4603      	mov	r3, r0
 8003370:	817b      	strh	r3, [r7, #10]
 8003372:	460b      	mov	r3, r1
 8003374:	813b      	strh	r3, [r7, #8]
 8003376:	4613      	mov	r3, r2
 8003378:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003388:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003398:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	9300      	str	r3, [sp, #0]
 800339e:	6a3b      	ldr	r3, [r7, #32]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 f8c2 	bl	8003530 <I2C_WaitOnFlagUntilTimeout>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00d      	beq.n	80033ce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033c0:	d103      	bne.n	80033ca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e0aa      	b.n	8003524 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033ce:	897b      	ldrh	r3, [r7, #10]
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	461a      	mov	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e0:	6a3a      	ldr	r2, [r7, #32]
 80033e2:	4952      	ldr	r1, [pc, #328]	; (800352c <I2C_RequestMemoryRead+0x1cc>)
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f000 f8fa 	bl	80035de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e097      	b.n	8003524 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033f4:	2300      	movs	r3, #0
 80033f6:	617b      	str	r3, [r7, #20]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	617b      	str	r3, [r7, #20]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	617b      	str	r3, [r7, #20]
 8003408:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800340a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800340c:	6a39      	ldr	r1, [r7, #32]
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f000 f964 	bl	80036dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00d      	beq.n	8003436 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	2b04      	cmp	r3, #4
 8003420:	d107      	bne.n	8003432 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003430:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e076      	b.n	8003524 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003436:	88fb      	ldrh	r3, [r7, #6]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d105      	bne.n	8003448 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800343c:	893b      	ldrh	r3, [r7, #8]
 800343e:	b2da      	uxtb	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	611a      	str	r2, [r3, #16]
 8003446:	e021      	b.n	800348c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003448:	893b      	ldrh	r3, [r7, #8]
 800344a:	0a1b      	lsrs	r3, r3, #8
 800344c:	b29b      	uxth	r3, r3
 800344e:	b2da      	uxtb	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003458:	6a39      	ldr	r1, [r7, #32]
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f000 f93e 	bl	80036dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00d      	beq.n	8003482 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	2b04      	cmp	r3, #4
 800346c:	d107      	bne.n	800347e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800347c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e050      	b.n	8003524 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003482:	893b      	ldrh	r3, [r7, #8]
 8003484:	b2da      	uxtb	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800348c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800348e:	6a39      	ldr	r1, [r7, #32]
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 f923 	bl	80036dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00d      	beq.n	80034b8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a0:	2b04      	cmp	r3, #4
 80034a2:	d107      	bne.n	80034b4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034b2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e035      	b.n	8003524 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034c6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	6a3b      	ldr	r3, [r7, #32]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f000 f82b 	bl	8003530 <I2C_WaitOnFlagUntilTimeout>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00d      	beq.n	80034fc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ee:	d103      	bne.n	80034f8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e013      	b.n	8003524 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80034fc:	897b      	ldrh	r3, [r7, #10]
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	f043 0301 	orr.w	r3, r3, #1
 8003504:	b2da      	uxtb	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	6a3a      	ldr	r2, [r7, #32]
 8003510:	4906      	ldr	r1, [pc, #24]	; (800352c <I2C_RequestMemoryRead+0x1cc>)
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f000 f863 	bl	80035de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e000      	b.n	8003524 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	00010002 	.word	0x00010002

08003530 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	603b      	str	r3, [r7, #0]
 800353c:	4613      	mov	r3, r2
 800353e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003540:	e025      	b.n	800358e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003548:	d021      	beq.n	800358e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800354a:	f7fe fd55 	bl	8001ff8 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	429a      	cmp	r2, r3
 8003558:	d302      	bcc.n	8003560 <I2C_WaitOnFlagUntilTimeout+0x30>
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d116      	bne.n	800358e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2220      	movs	r2, #32
 800356a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	f043 0220 	orr.w	r2, r3, #32
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e023      	b.n	80035d6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	0c1b      	lsrs	r3, r3, #16
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b01      	cmp	r3, #1
 8003596:	d10d      	bne.n	80035b4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	43da      	mvns	r2, r3
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	4013      	ands	r3, r2
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	bf0c      	ite	eq
 80035aa:	2301      	moveq	r3, #1
 80035ac:	2300      	movne	r3, #0
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	461a      	mov	r2, r3
 80035b2:	e00c      	b.n	80035ce <I2C_WaitOnFlagUntilTimeout+0x9e>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	43da      	mvns	r2, r3
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	4013      	ands	r3, r2
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	bf0c      	ite	eq
 80035c6:	2301      	moveq	r3, #1
 80035c8:	2300      	movne	r3, #0
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	461a      	mov	r2, r3
 80035ce:	79fb      	ldrb	r3, [r7, #7]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d0b6      	beq.n	8003542 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b084      	sub	sp, #16
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	60f8      	str	r0, [r7, #12]
 80035e6:	60b9      	str	r1, [r7, #8]
 80035e8:	607a      	str	r2, [r7, #4]
 80035ea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035ec:	e051      	b.n	8003692 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035fc:	d123      	bne.n	8003646 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800360c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003616:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2220      	movs	r2, #32
 8003622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	f043 0204 	orr.w	r2, r3, #4
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e046      	b.n	80036d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800364c:	d021      	beq.n	8003692 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800364e:	f7fe fcd3 	bl	8001ff8 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	429a      	cmp	r2, r3
 800365c:	d302      	bcc.n	8003664 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d116      	bne.n	8003692 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2220      	movs	r2, #32
 800366e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	f043 0220 	orr.w	r2, r3, #32
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e020      	b.n	80036d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	0c1b      	lsrs	r3, r3, #16
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b01      	cmp	r3, #1
 800369a:	d10c      	bne.n	80036b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	43da      	mvns	r2, r3
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	4013      	ands	r3, r2
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	bf14      	ite	ne
 80036ae:	2301      	movne	r3, #1
 80036b0:	2300      	moveq	r3, #0
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	e00b      	b.n	80036ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	43da      	mvns	r2, r3
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	4013      	ands	r3, r2
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	bf14      	ite	ne
 80036c8:	2301      	movne	r3, #1
 80036ca:	2300      	moveq	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d18d      	bne.n	80035ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036e8:	e02d      	b.n	8003746 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 f8ce 	bl	800388c <I2C_IsAcknowledgeFailed>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e02d      	b.n	8003756 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003700:	d021      	beq.n	8003746 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003702:	f7fe fc79 	bl	8001ff8 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	429a      	cmp	r2, r3
 8003710:	d302      	bcc.n	8003718 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d116      	bne.n	8003746 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2220      	movs	r2, #32
 8003722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	f043 0220 	orr.w	r2, r3, #32
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e007      	b.n	8003756 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003750:	2b80      	cmp	r3, #128	; 0x80
 8003752:	d1ca      	bne.n	80036ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b084      	sub	sp, #16
 8003762:	af00      	add	r7, sp, #0
 8003764:	60f8      	str	r0, [r7, #12]
 8003766:	60b9      	str	r1, [r7, #8]
 8003768:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800376a:	e02d      	b.n	80037c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 f88d 	bl	800388c <I2C_IsAcknowledgeFailed>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e02d      	b.n	80037d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003782:	d021      	beq.n	80037c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003784:	f7fe fc38 	bl	8001ff8 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	429a      	cmp	r2, r3
 8003792:	d302      	bcc.n	800379a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d116      	bne.n	80037c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b4:	f043 0220 	orr.w	r2, r3, #32
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e007      	b.n	80037d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	f003 0304 	and.w	r3, r3, #4
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d1ca      	bne.n	800376c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037ec:	e042      	b.n	8003874 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	f003 0310 	and.w	r3, r3, #16
 80037f8:	2b10      	cmp	r3, #16
 80037fa:	d119      	bne.n	8003830 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f06f 0210 	mvn.w	r2, #16
 8003804:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2220      	movs	r2, #32
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e029      	b.n	8003884 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003830:	f7fe fbe2 	bl	8001ff8 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	429a      	cmp	r2, r3
 800383e:	d302      	bcc.n	8003846 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d116      	bne.n	8003874 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2220      	movs	r2, #32
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003860:	f043 0220 	orr.w	r2, r3, #32
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e007      	b.n	8003884 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387e:	2b40      	cmp	r3, #64	; 0x40
 8003880:	d1b5      	bne.n	80037ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3710      	adds	r7, #16
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800389e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038a2:	d11b      	bne.n	80038dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2220      	movs	r2, #32
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c8:	f043 0204 	orr.w	r2, r3, #4
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e000      	b.n	80038de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
	...

080038ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d101      	bne.n	8003900 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e0cc      	b.n	8003a9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003900:	4b68      	ldr	r3, [pc, #416]	; (8003aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 030f 	and.w	r3, r3, #15
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	429a      	cmp	r2, r3
 800390c:	d90c      	bls.n	8003928 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800390e:	4b65      	ldr	r3, [pc, #404]	; (8003aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	b2d2      	uxtb	r2, r2
 8003914:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003916:	4b63      	ldr	r3, [pc, #396]	; (8003aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 030f 	and.w	r3, r3, #15
 800391e:	683a      	ldr	r2, [r7, #0]
 8003920:	429a      	cmp	r2, r3
 8003922:	d001      	beq.n	8003928 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e0b8      	b.n	8003a9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d020      	beq.n	8003976 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b00      	cmp	r3, #0
 800393e:	d005      	beq.n	800394c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003940:	4b59      	ldr	r3, [pc, #356]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	4a58      	ldr	r2, [pc, #352]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003946:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800394a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0308 	and.w	r3, r3, #8
 8003954:	2b00      	cmp	r3, #0
 8003956:	d005      	beq.n	8003964 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003958:	4b53      	ldr	r3, [pc, #332]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	4a52      	ldr	r2, [pc, #328]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800395e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003962:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003964:	4b50      	ldr	r3, [pc, #320]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	494d      	ldr	r1, [pc, #308]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003972:	4313      	orrs	r3, r2
 8003974:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	d044      	beq.n	8003a0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d107      	bne.n	800399a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800398a:	4b47      	ldr	r3, [pc, #284]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d119      	bne.n	80039ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e07f      	b.n	8003a9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d003      	beq.n	80039aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039a6:	2b03      	cmp	r3, #3
 80039a8:	d107      	bne.n	80039ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039aa:	4b3f      	ldr	r3, [pc, #252]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d109      	bne.n	80039ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e06f      	b.n	8003a9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ba:	4b3b      	ldr	r3, [pc, #236]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e067      	b.n	8003a9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ca:	4b37      	ldr	r3, [pc, #220]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f023 0203 	bic.w	r2, r3, #3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	4934      	ldr	r1, [pc, #208]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039dc:	f7fe fb0c 	bl	8001ff8 <HAL_GetTick>
 80039e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e2:	e00a      	b.n	80039fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039e4:	f7fe fb08 	bl	8001ff8 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e04f      	b.n	8003a9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039fa:	4b2b      	ldr	r3, [pc, #172]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f003 020c 	and.w	r2, r3, #12
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d1eb      	bne.n	80039e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a0c:	4b25      	ldr	r3, [pc, #148]	; (8003aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 030f 	and.w	r3, r3, #15
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d20c      	bcs.n	8003a34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a1a:	4b22      	ldr	r3, [pc, #136]	; (8003aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	b2d2      	uxtb	r2, r2
 8003a20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a22:	4b20      	ldr	r3, [pc, #128]	; (8003aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 030f 	and.w	r3, r3, #15
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d001      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e032      	b.n	8003a9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d008      	beq.n	8003a52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a40:	4b19      	ldr	r3, [pc, #100]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	4916      	ldr	r1, [pc, #88]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0308 	and.w	r3, r3, #8
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d009      	beq.n	8003a72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a5e:	4b12      	ldr	r3, [pc, #72]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	490e      	ldr	r1, [pc, #56]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a72:	f000 fb7f 	bl	8004174 <HAL_RCC_GetSysClockFreq>
 8003a76:	4601      	mov	r1, r0
 8003a78:	4b0b      	ldr	r3, [pc, #44]	; (8003aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	091b      	lsrs	r3, r3, #4
 8003a7e:	f003 030f 	and.w	r3, r3, #15
 8003a82:	4a0a      	ldr	r2, [pc, #40]	; (8003aac <HAL_RCC_ClockConfig+0x1c0>)
 8003a84:	5cd3      	ldrb	r3, [r2, r3]
 8003a86:	fa21 f303 	lsr.w	r3, r1, r3
 8003a8a:	4a09      	ldr	r2, [pc, #36]	; (8003ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a8e:	4b09      	ldr	r3, [pc, #36]	; (8003ab4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7fe fa6c 	bl	8001f70 <HAL_InitTick>

  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	40023c00 	.word	0x40023c00
 8003aa8:	40023800 	.word	0x40023800
 8003aac:	0800b528 	.word	0x0800b528
 8003ab0:	20000000 	.word	0x20000000
 8003ab4:	20000004 	.word	0x20000004

08003ab8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003abc:	4b03      	ldr	r3, [pc, #12]	; (8003acc <HAL_RCC_GetHCLKFreq+0x14>)
 8003abe:	681b      	ldr	r3, [r3, #0]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	20000000 	.word	0x20000000

08003ad0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ad4:	f7ff fff0 	bl	8003ab8 <HAL_RCC_GetHCLKFreq>
 8003ad8:	4601      	mov	r1, r0
 8003ada:	4b05      	ldr	r3, [pc, #20]	; (8003af0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	0a9b      	lsrs	r3, r3, #10
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	4a03      	ldr	r2, [pc, #12]	; (8003af4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ae6:	5cd3      	ldrb	r3, [r2, r3]
 8003ae8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	40023800 	.word	0x40023800
 8003af4:	0800b538 	.word	0x0800b538

08003af8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003afc:	f7ff ffdc 	bl	8003ab8 <HAL_RCC_GetHCLKFreq>
 8003b00:	4601      	mov	r1, r0
 8003b02:	4b05      	ldr	r3, [pc, #20]	; (8003b18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	0b5b      	lsrs	r3, r3, #13
 8003b08:	f003 0307 	and.w	r3, r3, #7
 8003b0c:	4a03      	ldr	r2, [pc, #12]	; (8003b1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b0e:	5cd3      	ldrb	r3, [r2, r3]
 8003b10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	40023800 	.word	0x40023800
 8003b1c:	0800b538 	.word	0x0800b538

08003b20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b08c      	sub	sp, #48	; 0x30
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003b40:	2300      	movs	r3, #0
 8003b42:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003b44:	2300      	movs	r3, #0
 8003b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d010      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003b58:	4b6f      	ldr	r3, [pc, #444]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b5e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b66:	496c      	ldr	r1, [pc, #432]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003b76:	2301      	movs	r3, #1
 8003b78:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d010      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003b86:	4b64      	ldr	r3, [pc, #400]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b8c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b94:	4960      	ldr	r1, [pc, #384]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d101      	bne.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0304 	and.w	r3, r3, #4
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d017      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bb4:	4b58      	ldr	r3, [pc, #352]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc2:	4955      	ldr	r1, [pc, #340]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bd2:	d101      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d101      	bne.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003be0:	2301      	movs	r3, #1
 8003be2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0308 	and.w	r3, r3, #8
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d017      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003bf0:	4b49      	ldr	r3, [pc, #292]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bf6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bfe:	4946      	ldr	r1, [pc, #280]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c0e:	d101      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003c10:	2301      	movs	r3, #1
 8003c12:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d101      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0320 	and.w	r3, r3, #32
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f000 808a 	beq.w	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60bb      	str	r3, [r7, #8]
 8003c32:	4b39      	ldr	r3, [pc, #228]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c36:	4a38      	ldr	r2, [pc, #224]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c3e:	4b36      	ldr	r3, [pc, #216]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c46:	60bb      	str	r3, [r7, #8]
 8003c48:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003c4a:	4b34      	ldr	r3, [pc, #208]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a33      	ldr	r2, [pc, #204]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c54:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c56:	f7fe f9cf 	bl	8001ff8 <HAL_GetTick>
 8003c5a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003c5c:	e008      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003c5e:	f7fe f9cb 	bl	8001ff8 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e278      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003c70:	4b2a      	ldr	r3, [pc, #168]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d0f0      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c7c:	4b26      	ldr	r3, [pc, #152]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c84:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c86:	6a3b      	ldr	r3, [r7, #32]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d02f      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c94:	6a3a      	ldr	r2, [r7, #32]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d028      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c9a:	4b1f      	ldr	r3, [pc, #124]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ca2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ca4:	4b1e      	ldr	r3, [pc, #120]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003caa:	4b1d      	ldr	r3, [pc, #116]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003cb0:	4a19      	ldr	r2, [pc, #100]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cb2:	6a3b      	ldr	r3, [r7, #32]
 8003cb4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003cb6:	4b18      	ldr	r3, [pc, #96]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d114      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003cc2:	f7fe f999 	bl	8001ff8 <HAL_GetTick>
 8003cc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc8:	e00a      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cca:	f7fe f995 	bl	8001ff8 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d901      	bls.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e240      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce0:	4b0d      	ldr	r3, [pc, #52]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d0ee      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cf4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cf8:	d114      	bne.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003cfa:	4b07      	ldr	r3, [pc, #28]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d06:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d0e:	4902      	ldr	r1, [pc, #8]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	608b      	str	r3, [r1, #8]
 8003d14:	e00c      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003d16:	bf00      	nop
 8003d18:	40023800 	.word	0x40023800
 8003d1c:	40007000 	.word	0x40007000
 8003d20:	42470e40 	.word	0x42470e40
 8003d24:	4b4a      	ldr	r3, [pc, #296]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	4a49      	ldr	r2, [pc, #292]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d2a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003d2e:	6093      	str	r3, [r2, #8]
 8003d30:	4b47      	ldr	r3, [pc, #284]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d3c:	4944      	ldr	r1, [pc, #272]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0310 	and.w	r3, r3, #16
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d004      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003d54:	4b3f      	ldr	r3, [pc, #252]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003d56:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00a      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003d64:	4b3a      	ldr	r3, [pc, #232]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d72:	4937      	ldr	r1, [pc, #220]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00a      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d86:	4b32      	ldr	r3, [pc, #200]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d8c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d94:	492e      	ldr	r1, [pc, #184]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d011      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003da8:	4b29      	ldr	r3, [pc, #164]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dae:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db6:	4926      	ldr	r1, [pc, #152]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dc6:	d101      	bne.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00a      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003dd8:	4b1d      	ldr	r3, [pc, #116]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dde:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de6:	491a      	ldr	r1, [pc, #104]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d011      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003dfa:	4b15      	ldr	r3, [pc, #84]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003dfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e00:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e08:	4911      	ldr	r1, [pc, #68]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e18:	d101      	bne.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d005      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e2c:	f040 80ff 	bne.w	800402e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e30:	4b09      	ldr	r3, [pc, #36]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e36:	f7fe f8df 	bl	8001ff8 <HAL_GetTick>
 8003e3a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e3c:	e00e      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e3e:	f7fe f8db 	bl	8001ff8 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d907      	bls.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e188      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003e50:	40023800 	.word	0x40023800
 8003e54:	424711e0 	.word	0x424711e0
 8003e58:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e5c:	4b7e      	ldr	r3, [pc, #504]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1ea      	bne.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d003      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d009      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d028      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d124      	bne.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003e90:	4b71      	ldr	r3, [pc, #452]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e96:	0c1b      	lsrs	r3, r3, #16
 8003e98:	f003 0303 	and.w	r3, r3, #3
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ea2:	4b6d      	ldr	r3, [pc, #436]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ea4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ea8:	0e1b      	lsrs	r3, r3, #24
 8003eaa:	f003 030f 	and.w	r3, r3, #15
 8003eae:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	019b      	lsls	r3, r3, #6
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	085b      	lsrs	r3, r3, #1
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	041b      	lsls	r3, r3, #16
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	061b      	lsls	r3, r3, #24
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	071b      	lsls	r3, r3, #28
 8003ed2:	4961      	ldr	r1, [pc, #388]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0304 	and.w	r3, r3, #4
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d004      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eee:	d00a      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d035      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f04:	d130      	bne.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003f06:	4b54      	ldr	r3, [pc, #336]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f0c:	0c1b      	lsrs	r3, r3, #16
 8003f0e:	f003 0303 	and.w	r3, r3, #3
 8003f12:	3301      	adds	r3, #1
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f18:	4b4f      	ldr	r3, [pc, #316]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f1e:	0f1b      	lsrs	r3, r3, #28
 8003f20:	f003 0307 	and.w	r3, r3, #7
 8003f24:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685a      	ldr	r2, [r3, #4]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	019b      	lsls	r3, r3, #6
 8003f30:	431a      	orrs	r2, r3
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	085b      	lsrs	r3, r3, #1
 8003f36:	3b01      	subs	r3, #1
 8003f38:	041b      	lsls	r3, r3, #16
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	061b      	lsls	r3, r3, #24
 8003f42:	431a      	orrs	r2, r3
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	071b      	lsls	r3, r3, #28
 8003f48:	4943      	ldr	r1, [pc, #268]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003f50:	4b41      	ldr	r3, [pc, #260]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f56:	f023 021f 	bic.w	r2, r3, #31
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	493d      	ldr	r1, [pc, #244]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d029      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f7c:	d124      	bne.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003f7e:	4b36      	ldr	r3, [pc, #216]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f84:	0c1b      	lsrs	r3, r3, #16
 8003f86:	f003 0303 	and.w	r3, r3, #3
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f90:	4b31      	ldr	r3, [pc, #196]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f96:	0f1b      	lsrs	r3, r3, #28
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	019b      	lsls	r3, r3, #6
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	085b      	lsrs	r3, r3, #1
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	041b      	lsls	r3, r3, #16
 8003fb4:	431a      	orrs	r2, r3
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	061b      	lsls	r3, r3, #24
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	071b      	lsls	r3, r3, #28
 8003fc0:	4925      	ldr	r1, [pc, #148]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d016      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	019b      	lsls	r3, r3, #6
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	085b      	lsrs	r3, r3, #1
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	041b      	lsls	r3, r3, #16
 8003fea:	431a      	orrs	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	061b      	lsls	r3, r3, #24
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	071b      	lsls	r3, r3, #28
 8003ffa:	4917      	ldr	r1, [pc, #92]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004002:	4b16      	ldr	r3, [pc, #88]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004004:	2201      	movs	r2, #1
 8004006:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004008:	f7fd fff6 	bl	8001ff8 <HAL_GetTick>
 800400c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800400e:	e008      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004010:	f7fd fff2 	bl	8001ff8 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e09f      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004022:	4b0d      	ldr	r3, [pc, #52]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d0f0      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800402e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004030:	2b01      	cmp	r3, #1
 8004032:	f040 8095 	bne.w	8004160 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004036:	4b0a      	ldr	r3, [pc, #40]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800403c:	f7fd ffdc 	bl	8001ff8 <HAL_GetTick>
 8004040:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004042:	e00f      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004044:	f7fd ffd8 	bl	8001ff8 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d908      	bls.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e085      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004056:	bf00      	nop
 8004058:	40023800 	.word	0x40023800
 800405c:	42470068 	.word	0x42470068
 8004060:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004064:	4b41      	ldr	r3, [pc, #260]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800406c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004070:	d0e8      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0304 	and.w	r3, r3, #4
 800407a:	2b00      	cmp	r3, #0
 800407c:	d003      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004082:	2b00      	cmp	r3, #0
 8004084:	d009      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800408e:	2b00      	cmp	r3, #0
 8004090:	d02b      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004096:	2b00      	cmp	r3, #0
 8004098:	d127      	bne.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800409a:	4b34      	ldr	r3, [pc, #208]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800409c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a0:	0c1b      	lsrs	r3, r3, #16
 80040a2:	f003 0303 	and.w	r3, r3, #3
 80040a6:	3301      	adds	r3, #1
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	699a      	ldr	r2, [r3, #24]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	69db      	ldr	r3, [r3, #28]
 80040b4:	019b      	lsls	r3, r3, #6
 80040b6:	431a      	orrs	r2, r3
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	085b      	lsrs	r3, r3, #1
 80040bc:	3b01      	subs	r3, #1
 80040be:	041b      	lsls	r3, r3, #16
 80040c0:	431a      	orrs	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c6:	061b      	lsls	r3, r3, #24
 80040c8:	4928      	ldr	r1, [pc, #160]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80040d0:	4b26      	ldr	r3, [pc, #152]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80040d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040d6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040de:	3b01      	subs	r3, #1
 80040e0:	021b      	lsls	r3, r3, #8
 80040e2:	4922      	ldr	r1, [pc, #136]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d01d      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040fe:	d118      	bne.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004100:	4b1a      	ldr	r3, [pc, #104]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004106:	0e1b      	lsrs	r3, r3, #24
 8004108:	f003 030f 	and.w	r3, r3, #15
 800410c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	699a      	ldr	r2, [r3, #24]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	019b      	lsls	r3, r3, #6
 8004118:	431a      	orrs	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	085b      	lsrs	r3, r3, #1
 8004120:	3b01      	subs	r3, #1
 8004122:	041b      	lsls	r3, r3, #16
 8004124:	431a      	orrs	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	061b      	lsls	r3, r3, #24
 800412a:	4910      	ldr	r1, [pc, #64]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800412c:	4313      	orrs	r3, r2
 800412e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004132:	4b0f      	ldr	r3, [pc, #60]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004134:	2201      	movs	r2, #1
 8004136:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004138:	f7fd ff5e 	bl	8001ff8 <HAL_GetTick>
 800413c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800413e:	e008      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004140:	f7fd ff5a 	bl	8001ff8 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e007      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004152:	4b06      	ldr	r3, [pc, #24]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800415a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800415e:	d1ef      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3730      	adds	r7, #48	; 0x30
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	40023800 	.word	0x40023800
 8004170:	42470070 	.word	0x42470070

08004174 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004176:	b087      	sub	sp, #28
 8004178:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800417a:	2300      	movs	r3, #0
 800417c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800417e:	2300      	movs	r3, #0
 8004180:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8004182:	2300      	movs	r3, #0
 8004184:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8004186:	2300      	movs	r3, #0
 8004188:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800418a:	2300      	movs	r3, #0
 800418c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800418e:	4bc6      	ldr	r3, [pc, #792]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 030c 	and.w	r3, r3, #12
 8004196:	2b0c      	cmp	r3, #12
 8004198:	f200 817e 	bhi.w	8004498 <HAL_RCC_GetSysClockFreq+0x324>
 800419c:	a201      	add	r2, pc, #4	; (adr r2, 80041a4 <HAL_RCC_GetSysClockFreq+0x30>)
 800419e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a2:	bf00      	nop
 80041a4:	080041d9 	.word	0x080041d9
 80041a8:	08004499 	.word	0x08004499
 80041ac:	08004499 	.word	0x08004499
 80041b0:	08004499 	.word	0x08004499
 80041b4:	080041df 	.word	0x080041df
 80041b8:	08004499 	.word	0x08004499
 80041bc:	08004499 	.word	0x08004499
 80041c0:	08004499 	.word	0x08004499
 80041c4:	080041e5 	.word	0x080041e5
 80041c8:	08004499 	.word	0x08004499
 80041cc:	08004499 	.word	0x08004499
 80041d0:	08004499 	.word	0x08004499
 80041d4:	08004341 	.word	0x08004341
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041d8:	4bb4      	ldr	r3, [pc, #720]	; (80044ac <HAL_RCC_GetSysClockFreq+0x338>)
 80041da:	613b      	str	r3, [r7, #16]
       break;
 80041dc:	e15f      	b.n	800449e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041de:	4bb4      	ldr	r3, [pc, #720]	; (80044b0 <HAL_RCC_GetSysClockFreq+0x33c>)
 80041e0:	613b      	str	r3, [r7, #16]
      break;
 80041e2:	e15c      	b.n	800449e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041e4:	4bb0      	ldr	r3, [pc, #704]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x334>)
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041ec:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041ee:	4bae      	ldr	r3, [pc, #696]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x334>)
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d04a      	beq.n	8004290 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041fa:	4bab      	ldr	r3, [pc, #684]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x334>)
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	099b      	lsrs	r3, r3, #6
 8004200:	f04f 0400 	mov.w	r4, #0
 8004204:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004208:	f04f 0200 	mov.w	r2, #0
 800420c:	ea03 0501 	and.w	r5, r3, r1
 8004210:	ea04 0602 	and.w	r6, r4, r2
 8004214:	4629      	mov	r1, r5
 8004216:	4632      	mov	r2, r6
 8004218:	f04f 0300 	mov.w	r3, #0
 800421c:	f04f 0400 	mov.w	r4, #0
 8004220:	0154      	lsls	r4, r2, #5
 8004222:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004226:	014b      	lsls	r3, r1, #5
 8004228:	4619      	mov	r1, r3
 800422a:	4622      	mov	r2, r4
 800422c:	1b49      	subs	r1, r1, r5
 800422e:	eb62 0206 	sbc.w	r2, r2, r6
 8004232:	f04f 0300 	mov.w	r3, #0
 8004236:	f04f 0400 	mov.w	r4, #0
 800423a:	0194      	lsls	r4, r2, #6
 800423c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004240:	018b      	lsls	r3, r1, #6
 8004242:	1a5b      	subs	r3, r3, r1
 8004244:	eb64 0402 	sbc.w	r4, r4, r2
 8004248:	f04f 0100 	mov.w	r1, #0
 800424c:	f04f 0200 	mov.w	r2, #0
 8004250:	00e2      	lsls	r2, r4, #3
 8004252:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004256:	00d9      	lsls	r1, r3, #3
 8004258:	460b      	mov	r3, r1
 800425a:	4614      	mov	r4, r2
 800425c:	195b      	adds	r3, r3, r5
 800425e:	eb44 0406 	adc.w	r4, r4, r6
 8004262:	f04f 0100 	mov.w	r1, #0
 8004266:	f04f 0200 	mov.w	r2, #0
 800426a:	0262      	lsls	r2, r4, #9
 800426c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004270:	0259      	lsls	r1, r3, #9
 8004272:	460b      	mov	r3, r1
 8004274:	4614      	mov	r4, r2
 8004276:	4618      	mov	r0, r3
 8004278:	4621      	mov	r1, r4
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f04f 0400 	mov.w	r4, #0
 8004280:	461a      	mov	r2, r3
 8004282:	4623      	mov	r3, r4
 8004284:	f7fc fcb0 	bl	8000be8 <__aeabi_uldivmod>
 8004288:	4603      	mov	r3, r0
 800428a:	460c      	mov	r4, r1
 800428c:	617b      	str	r3, [r7, #20]
 800428e:	e049      	b.n	8004324 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004290:	4b85      	ldr	r3, [pc, #532]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	099b      	lsrs	r3, r3, #6
 8004296:	f04f 0400 	mov.w	r4, #0
 800429a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800429e:	f04f 0200 	mov.w	r2, #0
 80042a2:	ea03 0501 	and.w	r5, r3, r1
 80042a6:	ea04 0602 	and.w	r6, r4, r2
 80042aa:	4629      	mov	r1, r5
 80042ac:	4632      	mov	r2, r6
 80042ae:	f04f 0300 	mov.w	r3, #0
 80042b2:	f04f 0400 	mov.w	r4, #0
 80042b6:	0154      	lsls	r4, r2, #5
 80042b8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80042bc:	014b      	lsls	r3, r1, #5
 80042be:	4619      	mov	r1, r3
 80042c0:	4622      	mov	r2, r4
 80042c2:	1b49      	subs	r1, r1, r5
 80042c4:	eb62 0206 	sbc.w	r2, r2, r6
 80042c8:	f04f 0300 	mov.w	r3, #0
 80042cc:	f04f 0400 	mov.w	r4, #0
 80042d0:	0194      	lsls	r4, r2, #6
 80042d2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80042d6:	018b      	lsls	r3, r1, #6
 80042d8:	1a5b      	subs	r3, r3, r1
 80042da:	eb64 0402 	sbc.w	r4, r4, r2
 80042de:	f04f 0100 	mov.w	r1, #0
 80042e2:	f04f 0200 	mov.w	r2, #0
 80042e6:	00e2      	lsls	r2, r4, #3
 80042e8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80042ec:	00d9      	lsls	r1, r3, #3
 80042ee:	460b      	mov	r3, r1
 80042f0:	4614      	mov	r4, r2
 80042f2:	195b      	adds	r3, r3, r5
 80042f4:	eb44 0406 	adc.w	r4, r4, r6
 80042f8:	f04f 0100 	mov.w	r1, #0
 80042fc:	f04f 0200 	mov.w	r2, #0
 8004300:	02a2      	lsls	r2, r4, #10
 8004302:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004306:	0299      	lsls	r1, r3, #10
 8004308:	460b      	mov	r3, r1
 800430a:	4614      	mov	r4, r2
 800430c:	4618      	mov	r0, r3
 800430e:	4621      	mov	r1, r4
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f04f 0400 	mov.w	r4, #0
 8004316:	461a      	mov	r2, r3
 8004318:	4623      	mov	r3, r4
 800431a:	f7fc fc65 	bl	8000be8 <__aeabi_uldivmod>
 800431e:	4603      	mov	r3, r0
 8004320:	460c      	mov	r4, r1
 8004322:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004324:	4b60      	ldr	r3, [pc, #384]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	0c1b      	lsrs	r3, r3, #16
 800432a:	f003 0303 	and.w	r3, r3, #3
 800432e:	3301      	adds	r3, #1
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	fbb2 f3f3 	udiv	r3, r2, r3
 800433c:	613b      	str	r3, [r7, #16]
      break;
 800433e:	e0ae      	b.n	800449e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004340:	4b59      	ldr	r3, [pc, #356]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004348:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800434a:	4b57      	ldr	r3, [pc, #348]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x334>)
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d04a      	beq.n	80043ec <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004356:	4b54      	ldr	r3, [pc, #336]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	099b      	lsrs	r3, r3, #6
 800435c:	f04f 0400 	mov.w	r4, #0
 8004360:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004364:	f04f 0200 	mov.w	r2, #0
 8004368:	ea03 0501 	and.w	r5, r3, r1
 800436c:	ea04 0602 	and.w	r6, r4, r2
 8004370:	4629      	mov	r1, r5
 8004372:	4632      	mov	r2, r6
 8004374:	f04f 0300 	mov.w	r3, #0
 8004378:	f04f 0400 	mov.w	r4, #0
 800437c:	0154      	lsls	r4, r2, #5
 800437e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004382:	014b      	lsls	r3, r1, #5
 8004384:	4619      	mov	r1, r3
 8004386:	4622      	mov	r2, r4
 8004388:	1b49      	subs	r1, r1, r5
 800438a:	eb62 0206 	sbc.w	r2, r2, r6
 800438e:	f04f 0300 	mov.w	r3, #0
 8004392:	f04f 0400 	mov.w	r4, #0
 8004396:	0194      	lsls	r4, r2, #6
 8004398:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800439c:	018b      	lsls	r3, r1, #6
 800439e:	1a5b      	subs	r3, r3, r1
 80043a0:	eb64 0402 	sbc.w	r4, r4, r2
 80043a4:	f04f 0100 	mov.w	r1, #0
 80043a8:	f04f 0200 	mov.w	r2, #0
 80043ac:	00e2      	lsls	r2, r4, #3
 80043ae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80043b2:	00d9      	lsls	r1, r3, #3
 80043b4:	460b      	mov	r3, r1
 80043b6:	4614      	mov	r4, r2
 80043b8:	195b      	adds	r3, r3, r5
 80043ba:	eb44 0406 	adc.w	r4, r4, r6
 80043be:	f04f 0100 	mov.w	r1, #0
 80043c2:	f04f 0200 	mov.w	r2, #0
 80043c6:	0262      	lsls	r2, r4, #9
 80043c8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80043cc:	0259      	lsls	r1, r3, #9
 80043ce:	460b      	mov	r3, r1
 80043d0:	4614      	mov	r4, r2
 80043d2:	4618      	mov	r0, r3
 80043d4:	4621      	mov	r1, r4
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f04f 0400 	mov.w	r4, #0
 80043dc:	461a      	mov	r2, r3
 80043de:	4623      	mov	r3, r4
 80043e0:	f7fc fc02 	bl	8000be8 <__aeabi_uldivmod>
 80043e4:	4603      	mov	r3, r0
 80043e6:	460c      	mov	r4, r1
 80043e8:	617b      	str	r3, [r7, #20]
 80043ea:	e049      	b.n	8004480 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043ec:	4b2e      	ldr	r3, [pc, #184]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x334>)
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	099b      	lsrs	r3, r3, #6
 80043f2:	f04f 0400 	mov.w	r4, #0
 80043f6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80043fa:	f04f 0200 	mov.w	r2, #0
 80043fe:	ea03 0501 	and.w	r5, r3, r1
 8004402:	ea04 0602 	and.w	r6, r4, r2
 8004406:	4629      	mov	r1, r5
 8004408:	4632      	mov	r2, r6
 800440a:	f04f 0300 	mov.w	r3, #0
 800440e:	f04f 0400 	mov.w	r4, #0
 8004412:	0154      	lsls	r4, r2, #5
 8004414:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004418:	014b      	lsls	r3, r1, #5
 800441a:	4619      	mov	r1, r3
 800441c:	4622      	mov	r2, r4
 800441e:	1b49      	subs	r1, r1, r5
 8004420:	eb62 0206 	sbc.w	r2, r2, r6
 8004424:	f04f 0300 	mov.w	r3, #0
 8004428:	f04f 0400 	mov.w	r4, #0
 800442c:	0194      	lsls	r4, r2, #6
 800442e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004432:	018b      	lsls	r3, r1, #6
 8004434:	1a5b      	subs	r3, r3, r1
 8004436:	eb64 0402 	sbc.w	r4, r4, r2
 800443a:	f04f 0100 	mov.w	r1, #0
 800443e:	f04f 0200 	mov.w	r2, #0
 8004442:	00e2      	lsls	r2, r4, #3
 8004444:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004448:	00d9      	lsls	r1, r3, #3
 800444a:	460b      	mov	r3, r1
 800444c:	4614      	mov	r4, r2
 800444e:	195b      	adds	r3, r3, r5
 8004450:	eb44 0406 	adc.w	r4, r4, r6
 8004454:	f04f 0100 	mov.w	r1, #0
 8004458:	f04f 0200 	mov.w	r2, #0
 800445c:	02a2      	lsls	r2, r4, #10
 800445e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004462:	0299      	lsls	r1, r3, #10
 8004464:	460b      	mov	r3, r1
 8004466:	4614      	mov	r4, r2
 8004468:	4618      	mov	r0, r3
 800446a:	4621      	mov	r1, r4
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f04f 0400 	mov.w	r4, #0
 8004472:	461a      	mov	r2, r3
 8004474:	4623      	mov	r3, r4
 8004476:	f7fc fbb7 	bl	8000be8 <__aeabi_uldivmod>
 800447a:	4603      	mov	r3, r0
 800447c:	460c      	mov	r4, r1
 800447e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004480:	4b09      	ldr	r3, [pc, #36]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	0f1b      	lsrs	r3, r3, #28
 8004486:	f003 0307 	and.w	r3, r3, #7
 800448a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	fbb2 f3f3 	udiv	r3, r2, r3
 8004494:	613b      	str	r3, [r7, #16]
      break;
 8004496:	e002      	b.n	800449e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004498:	4b04      	ldr	r3, [pc, #16]	; (80044ac <HAL_RCC_GetSysClockFreq+0x338>)
 800449a:	613b      	str	r3, [r7, #16]
      break;
 800449c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800449e:	693b      	ldr	r3, [r7, #16]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	371c      	adds	r7, #28
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044a8:	40023800 	.word	0x40023800
 80044ac:	00f42400 	.word	0x00f42400
 80044b0:	007a1200 	.word	0x007a1200

080044b4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b086      	sub	sp, #24
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044bc:	2300      	movs	r3, #0
 80044be:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 8083 	beq.w	80045d4 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80044ce:	4b95      	ldr	r3, [pc, #596]	; (8004724 <HAL_RCC_OscConfig+0x270>)
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f003 030c 	and.w	r3, r3, #12
 80044d6:	2b04      	cmp	r3, #4
 80044d8:	d019      	beq.n	800450e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80044da:	4b92      	ldr	r3, [pc, #584]	; (8004724 <HAL_RCC_OscConfig+0x270>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80044e2:	2b08      	cmp	r3, #8
 80044e4:	d106      	bne.n	80044f4 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80044e6:	4b8f      	ldr	r3, [pc, #572]	; (8004724 <HAL_RCC_OscConfig+0x270>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044f2:	d00c      	beq.n	800450e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044f4:	4b8b      	ldr	r3, [pc, #556]	; (8004724 <HAL_RCC_OscConfig+0x270>)
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80044fc:	2b0c      	cmp	r3, #12
 80044fe:	d112      	bne.n	8004526 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004500:	4b88      	ldr	r3, [pc, #544]	; (8004724 <HAL_RCC_OscConfig+0x270>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004508:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800450c:	d10b      	bne.n	8004526 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800450e:	4b85      	ldr	r3, [pc, #532]	; (8004724 <HAL_RCC_OscConfig+0x270>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d05b      	beq.n	80045d2 <HAL_RCC_OscConfig+0x11e>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d157      	bne.n	80045d2 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e216      	b.n	8004954 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800452e:	d106      	bne.n	800453e <HAL_RCC_OscConfig+0x8a>
 8004530:	4b7c      	ldr	r3, [pc, #496]	; (8004724 <HAL_RCC_OscConfig+0x270>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a7b      	ldr	r2, [pc, #492]	; (8004724 <HAL_RCC_OscConfig+0x270>)
 8004536:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800453a:	6013      	str	r3, [r2, #0]
 800453c:	e01d      	b.n	800457a <HAL_RCC_OscConfig+0xc6>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004546:	d10c      	bne.n	8004562 <HAL_RCC_OscConfig+0xae>
 8004548:	4b76      	ldr	r3, [pc, #472]	; (8004724 <HAL_RCC_OscConfig+0x270>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a75      	ldr	r2, [pc, #468]	; (8004724 <HAL_RCC_OscConfig+0x270>)
 800454e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004552:	6013      	str	r3, [r2, #0]
 8004554:	4b73      	ldr	r3, [pc, #460]	; (8004724 <HAL_RCC_OscConfig+0x270>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a72      	ldr	r2, [pc, #456]	; (8004724 <HAL_RCC_OscConfig+0x270>)
 800455a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800455e:	6013      	str	r3, [r2, #0]
 8004560:	e00b      	b.n	800457a <HAL_RCC_OscConfig+0xc6>
 8004562:	4b70      	ldr	r3, [pc, #448]	; (8004724 <HAL_RCC_OscConfig+0x270>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a6f      	ldr	r2, [pc, #444]	; (8004724 <HAL_RCC_OscConfig+0x270>)
 8004568:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800456c:	6013      	str	r3, [r2, #0]
 800456e:	4b6d      	ldr	r3, [pc, #436]	; (8004724 <HAL_RCC_OscConfig+0x270>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a6c      	ldr	r2, [pc, #432]	; (8004724 <HAL_RCC_OscConfig+0x270>)
 8004574:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004578:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d013      	beq.n	80045aa <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004582:	f7fd fd39 	bl	8001ff8 <HAL_GetTick>
 8004586:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004588:	e008      	b.n	800459c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800458a:	f7fd fd35 	bl	8001ff8 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b64      	cmp	r3, #100	; 0x64
 8004596:	d901      	bls.n	800459c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e1db      	b.n	8004954 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800459c:	4b61      	ldr	r3, [pc, #388]	; (8004724 <HAL_RCC_OscConfig+0x270>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d0f0      	beq.n	800458a <HAL_RCC_OscConfig+0xd6>
 80045a8:	e014      	b.n	80045d4 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045aa:	f7fd fd25 	bl	8001ff8 <HAL_GetTick>
 80045ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045b0:	e008      	b.n	80045c4 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045b2:	f7fd fd21 	bl	8001ff8 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b64      	cmp	r3, #100	; 0x64
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e1c7      	b.n	8004954 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045c4:	4b57      	ldr	r3, [pc, #348]	; (8004724 <HAL_RCC_OscConfig+0x270>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1f0      	bne.n	80045b2 <HAL_RCC_OscConfig+0xfe>
 80045d0:	e000      	b.n	80045d4 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045d2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d06f      	beq.n	80046c0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80045e0:	4b50      	ldr	r3, [pc, #320]	; (8004724 <HAL_RCC_OscConfig+0x270>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f003 030c 	and.w	r3, r3, #12
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d017      	beq.n	800461c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80045ec:	4b4d      	ldr	r3, [pc, #308]	; (8004724 <HAL_RCC_OscConfig+0x270>)
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80045f4:	2b08      	cmp	r3, #8
 80045f6:	d105      	bne.n	8004604 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80045f8:	4b4a      	ldr	r3, [pc, #296]	; (8004724 <HAL_RCC_OscConfig+0x270>)
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00b      	beq.n	800461c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004604:	4b47      	ldr	r3, [pc, #284]	; (8004724 <HAL_RCC_OscConfig+0x270>)
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800460c:	2b0c      	cmp	r3, #12
 800460e:	d11c      	bne.n	800464a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004610:	4b44      	ldr	r3, [pc, #272]	; (8004724 <HAL_RCC_OscConfig+0x270>)
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d116      	bne.n	800464a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800461c:	4b41      	ldr	r3, [pc, #260]	; (8004724 <HAL_RCC_OscConfig+0x270>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0302 	and.w	r3, r3, #2
 8004624:	2b00      	cmp	r3, #0
 8004626:	d005      	beq.n	8004634 <HAL_RCC_OscConfig+0x180>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d001      	beq.n	8004634 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e18f      	b.n	8004954 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004634:	4b3b      	ldr	r3, [pc, #236]	; (8004724 <HAL_RCC_OscConfig+0x270>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	00db      	lsls	r3, r3, #3
 8004642:	4938      	ldr	r1, [pc, #224]	; (8004724 <HAL_RCC_OscConfig+0x270>)
 8004644:	4313      	orrs	r3, r2
 8004646:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004648:	e03a      	b.n	80046c0 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d020      	beq.n	8004694 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004652:	4b35      	ldr	r3, [pc, #212]	; (8004728 <HAL_RCC_OscConfig+0x274>)
 8004654:	2201      	movs	r2, #1
 8004656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004658:	f7fd fcce 	bl	8001ff8 <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800465e:	e008      	b.n	8004672 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004660:	f7fd fcca 	bl	8001ff8 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b02      	cmp	r3, #2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e170      	b.n	8004954 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004672:	4b2c      	ldr	r3, [pc, #176]	; (8004724 <HAL_RCC_OscConfig+0x270>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d0f0      	beq.n	8004660 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800467e:	4b29      	ldr	r3, [pc, #164]	; (8004724 <HAL_RCC_OscConfig+0x270>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	00db      	lsls	r3, r3, #3
 800468c:	4925      	ldr	r1, [pc, #148]	; (8004724 <HAL_RCC_OscConfig+0x270>)
 800468e:	4313      	orrs	r3, r2
 8004690:	600b      	str	r3, [r1, #0]
 8004692:	e015      	b.n	80046c0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004694:	4b24      	ldr	r3, [pc, #144]	; (8004728 <HAL_RCC_OscConfig+0x274>)
 8004696:	2200      	movs	r2, #0
 8004698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800469a:	f7fd fcad 	bl	8001ff8 <HAL_GetTick>
 800469e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046a0:	e008      	b.n	80046b4 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046a2:	f7fd fca9 	bl	8001ff8 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d901      	bls.n	80046b4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e14f      	b.n	8004954 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046b4:	4b1b      	ldr	r3, [pc, #108]	; (8004724 <HAL_RCC_OscConfig+0x270>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0302 	and.w	r3, r3, #2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1f0      	bne.n	80046a2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0308 	and.w	r3, r3, #8
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d037      	beq.n	800473c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	695b      	ldr	r3, [r3, #20]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d016      	beq.n	8004702 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046d4:	4b15      	ldr	r3, [pc, #84]	; (800472c <HAL_RCC_OscConfig+0x278>)
 80046d6:	2201      	movs	r2, #1
 80046d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046da:	f7fd fc8d 	bl	8001ff8 <HAL_GetTick>
 80046de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046e0:	e008      	b.n	80046f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046e2:	f7fd fc89 	bl	8001ff8 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d901      	bls.n	80046f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e12f      	b.n	8004954 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046f4:	4b0b      	ldr	r3, [pc, #44]	; (8004724 <HAL_RCC_OscConfig+0x270>)
 80046f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d0f0      	beq.n	80046e2 <HAL_RCC_OscConfig+0x22e>
 8004700:	e01c      	b.n	800473c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004702:	4b0a      	ldr	r3, [pc, #40]	; (800472c <HAL_RCC_OscConfig+0x278>)
 8004704:	2200      	movs	r2, #0
 8004706:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004708:	f7fd fc76 	bl	8001ff8 <HAL_GetTick>
 800470c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800470e:	e00f      	b.n	8004730 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004710:	f7fd fc72 	bl	8001ff8 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b02      	cmp	r3, #2
 800471c:	d908      	bls.n	8004730 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e118      	b.n	8004954 <HAL_RCC_OscConfig+0x4a0>
 8004722:	bf00      	nop
 8004724:	40023800 	.word	0x40023800
 8004728:	42470000 	.word	0x42470000
 800472c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004730:	4b8a      	ldr	r3, [pc, #552]	; (800495c <HAL_RCC_OscConfig+0x4a8>)
 8004732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1e9      	bne.n	8004710 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0304 	and.w	r3, r3, #4
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 8097 	beq.w	8004878 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800474a:	2300      	movs	r3, #0
 800474c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800474e:	4b83      	ldr	r3, [pc, #524]	; (800495c <HAL_RCC_OscConfig+0x4a8>)
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10f      	bne.n	800477a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800475a:	2300      	movs	r3, #0
 800475c:	60fb      	str	r3, [r7, #12]
 800475e:	4b7f      	ldr	r3, [pc, #508]	; (800495c <HAL_RCC_OscConfig+0x4a8>)
 8004760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004762:	4a7e      	ldr	r2, [pc, #504]	; (800495c <HAL_RCC_OscConfig+0x4a8>)
 8004764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004768:	6413      	str	r3, [r2, #64]	; 0x40
 800476a:	4b7c      	ldr	r3, [pc, #496]	; (800495c <HAL_RCC_OscConfig+0x4a8>)
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004772:	60fb      	str	r3, [r7, #12]
 8004774:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004776:	2301      	movs	r3, #1
 8004778:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800477a:	4b79      	ldr	r3, [pc, #484]	; (8004960 <HAL_RCC_OscConfig+0x4ac>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004782:	2b00      	cmp	r3, #0
 8004784:	d118      	bne.n	80047b8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004786:	4b76      	ldr	r3, [pc, #472]	; (8004960 <HAL_RCC_OscConfig+0x4ac>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a75      	ldr	r2, [pc, #468]	; (8004960 <HAL_RCC_OscConfig+0x4ac>)
 800478c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004790:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004792:	f7fd fc31 	bl	8001ff8 <HAL_GetTick>
 8004796:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004798:	e008      	b.n	80047ac <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800479a:	f7fd fc2d 	bl	8001ff8 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e0d3      	b.n	8004954 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ac:	4b6c      	ldr	r3, [pc, #432]	; (8004960 <HAL_RCC_OscConfig+0x4ac>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d0f0      	beq.n	800479a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d106      	bne.n	80047ce <HAL_RCC_OscConfig+0x31a>
 80047c0:	4b66      	ldr	r3, [pc, #408]	; (800495c <HAL_RCC_OscConfig+0x4a8>)
 80047c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c4:	4a65      	ldr	r2, [pc, #404]	; (800495c <HAL_RCC_OscConfig+0x4a8>)
 80047c6:	f043 0301 	orr.w	r3, r3, #1
 80047ca:	6713      	str	r3, [r2, #112]	; 0x70
 80047cc:	e01c      	b.n	8004808 <HAL_RCC_OscConfig+0x354>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	2b05      	cmp	r3, #5
 80047d4:	d10c      	bne.n	80047f0 <HAL_RCC_OscConfig+0x33c>
 80047d6:	4b61      	ldr	r3, [pc, #388]	; (800495c <HAL_RCC_OscConfig+0x4a8>)
 80047d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047da:	4a60      	ldr	r2, [pc, #384]	; (800495c <HAL_RCC_OscConfig+0x4a8>)
 80047dc:	f043 0304 	orr.w	r3, r3, #4
 80047e0:	6713      	str	r3, [r2, #112]	; 0x70
 80047e2:	4b5e      	ldr	r3, [pc, #376]	; (800495c <HAL_RCC_OscConfig+0x4a8>)
 80047e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e6:	4a5d      	ldr	r2, [pc, #372]	; (800495c <HAL_RCC_OscConfig+0x4a8>)
 80047e8:	f043 0301 	orr.w	r3, r3, #1
 80047ec:	6713      	str	r3, [r2, #112]	; 0x70
 80047ee:	e00b      	b.n	8004808 <HAL_RCC_OscConfig+0x354>
 80047f0:	4b5a      	ldr	r3, [pc, #360]	; (800495c <HAL_RCC_OscConfig+0x4a8>)
 80047f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f4:	4a59      	ldr	r2, [pc, #356]	; (800495c <HAL_RCC_OscConfig+0x4a8>)
 80047f6:	f023 0301 	bic.w	r3, r3, #1
 80047fa:	6713      	str	r3, [r2, #112]	; 0x70
 80047fc:	4b57      	ldr	r3, [pc, #348]	; (800495c <HAL_RCC_OscConfig+0x4a8>)
 80047fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004800:	4a56      	ldr	r2, [pc, #344]	; (800495c <HAL_RCC_OscConfig+0x4a8>)
 8004802:	f023 0304 	bic.w	r3, r3, #4
 8004806:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d015      	beq.n	800483c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004810:	f7fd fbf2 	bl	8001ff8 <HAL_GetTick>
 8004814:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004816:	e00a      	b.n	800482e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004818:	f7fd fbee 	bl	8001ff8 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	f241 3288 	movw	r2, #5000	; 0x1388
 8004826:	4293      	cmp	r3, r2
 8004828:	d901      	bls.n	800482e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e092      	b.n	8004954 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800482e:	4b4b      	ldr	r3, [pc, #300]	; (800495c <HAL_RCC_OscConfig+0x4a8>)
 8004830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d0ee      	beq.n	8004818 <HAL_RCC_OscConfig+0x364>
 800483a:	e014      	b.n	8004866 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800483c:	f7fd fbdc 	bl	8001ff8 <HAL_GetTick>
 8004840:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004842:	e00a      	b.n	800485a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004844:	f7fd fbd8 	bl	8001ff8 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004852:	4293      	cmp	r3, r2
 8004854:	d901      	bls.n	800485a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e07c      	b.n	8004954 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800485a:	4b40      	ldr	r3, [pc, #256]	; (800495c <HAL_RCC_OscConfig+0x4a8>)
 800485c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1ee      	bne.n	8004844 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004866:	7dfb      	ldrb	r3, [r7, #23]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d105      	bne.n	8004878 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800486c:	4b3b      	ldr	r3, [pc, #236]	; (800495c <HAL_RCC_OscConfig+0x4a8>)
 800486e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004870:	4a3a      	ldr	r2, [pc, #232]	; (800495c <HAL_RCC_OscConfig+0x4a8>)
 8004872:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004876:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	699b      	ldr	r3, [r3, #24]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d068      	beq.n	8004952 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004880:	4b36      	ldr	r3, [pc, #216]	; (800495c <HAL_RCC_OscConfig+0x4a8>)
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f003 030c 	and.w	r3, r3, #12
 8004888:	2b08      	cmp	r3, #8
 800488a:	d060      	beq.n	800494e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	2b02      	cmp	r3, #2
 8004892:	d145      	bne.n	8004920 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004894:	4b33      	ldr	r3, [pc, #204]	; (8004964 <HAL_RCC_OscConfig+0x4b0>)
 8004896:	2200      	movs	r2, #0
 8004898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800489a:	f7fd fbad 	bl	8001ff8 <HAL_GetTick>
 800489e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048a0:	e008      	b.n	80048b4 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048a2:	f7fd fba9 	bl	8001ff8 <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d901      	bls.n	80048b4 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e04f      	b.n	8004954 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048b4:	4b29      	ldr	r3, [pc, #164]	; (800495c <HAL_RCC_OscConfig+0x4a8>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1f0      	bne.n	80048a2 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	69da      	ldr	r2, [r3, #28]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a1b      	ldr	r3, [r3, #32]
 80048c8:	431a      	orrs	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ce:	019b      	lsls	r3, r3, #6
 80048d0:	431a      	orrs	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d6:	085b      	lsrs	r3, r3, #1
 80048d8:	3b01      	subs	r3, #1
 80048da:	041b      	lsls	r3, r3, #16
 80048dc:	431a      	orrs	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e2:	061b      	lsls	r3, r3, #24
 80048e4:	431a      	orrs	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ea:	071b      	lsls	r3, r3, #28
 80048ec:	491b      	ldr	r1, [pc, #108]	; (800495c <HAL_RCC_OscConfig+0x4a8>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048f2:	4b1c      	ldr	r3, [pc, #112]	; (8004964 <HAL_RCC_OscConfig+0x4b0>)
 80048f4:	2201      	movs	r2, #1
 80048f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f8:	f7fd fb7e 	bl	8001ff8 <HAL_GetTick>
 80048fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048fe:	e008      	b.n	8004912 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004900:	f7fd fb7a 	bl	8001ff8 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b02      	cmp	r3, #2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e020      	b.n	8004954 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004912:	4b12      	ldr	r3, [pc, #72]	; (800495c <HAL_RCC_OscConfig+0x4a8>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d0f0      	beq.n	8004900 <HAL_RCC_OscConfig+0x44c>
 800491e:	e018      	b.n	8004952 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004920:	4b10      	ldr	r3, [pc, #64]	; (8004964 <HAL_RCC_OscConfig+0x4b0>)
 8004922:	2200      	movs	r2, #0
 8004924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004926:	f7fd fb67 	bl	8001ff8 <HAL_GetTick>
 800492a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800492c:	e008      	b.n	8004940 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800492e:	f7fd fb63 	bl	8001ff8 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2b02      	cmp	r3, #2
 800493a:	d901      	bls.n	8004940 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e009      	b.n	8004954 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004940:	4b06      	ldr	r3, [pc, #24]	; (800495c <HAL_RCC_OscConfig+0x4a8>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1f0      	bne.n	800492e <HAL_RCC_OscConfig+0x47a>
 800494c:	e001      	b.n	8004952 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e000      	b.n	8004954 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3718      	adds	r7, #24
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	40023800 	.word	0x40023800
 8004960:	40007000 	.word	0x40007000
 8004964:	42470060 	.word	0x42470060

08004968 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d101      	bne.n	800497a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e083      	b.n	8004a82 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	7f5b      	ldrb	r3, [r3, #29]
 800497e:	b2db      	uxtb	r3, r3
 8004980:	2b00      	cmp	r3, #0
 8004982:	d105      	bne.n	8004990 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7fd f94a 	bl	8001c24 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2202      	movs	r2, #2
 8004994:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	22ca      	movs	r2, #202	; 0xca
 800499c:	625a      	str	r2, [r3, #36]	; 0x24
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2253      	movs	r2, #83	; 0x53
 80049a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 faa8 	bl	8004efc <RTC_EnterInitMode>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d008      	beq.n	80049c4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	22ff      	movs	r2, #255	; 0xff
 80049b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2204      	movs	r2, #4
 80049be:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e05e      	b.n	8004a82 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	6812      	ldr	r2, [r2, #0]
 80049ce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80049d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049d6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6899      	ldr	r1, [r3, #8]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	431a      	orrs	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	431a      	orrs	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	430a      	orrs	r2, r1
 80049f4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	68d2      	ldr	r2, [r2, #12]
 80049fe:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	6919      	ldr	r1, [r3, #16]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	041a      	lsls	r2, r3, #16
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68da      	ldr	r2, [r3, #12]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a22:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f003 0320 	and.w	r3, r3, #32
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10e      	bne.n	8004a50 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 fa3a 	bl	8004eac <HAL_RTC_WaitForSynchro>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d008      	beq.n	8004a50 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	22ff      	movs	r2, #255	; 0xff
 8004a44:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2204      	movs	r2, #4
 8004a4a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e018      	b.n	8004a82 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a5e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	699a      	ldr	r2, [r3, #24]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	22ff      	movs	r2, #255	; 0xff
 8004a78:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004a80:	2300      	movs	r3, #0
  }
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004a8a:	b590      	push	{r4, r7, lr}
 8004a8c:	b087      	sub	sp, #28
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	60f8      	str	r0, [r7, #12]
 8004a92:	60b9      	str	r1, [r7, #8]
 8004a94:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	7f1b      	ldrb	r3, [r3, #28]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d101      	bne.n	8004aa6 <HAL_RTC_SetTime+0x1c>
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	e0aa      	b.n	8004bfc <HAL_RTC_SetTime+0x172>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2202      	movs	r2, #2
 8004ab0:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d126      	bne.n	8004b06 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d102      	bne.n	8004acc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f000 fa3f 	bl	8004f54 <RTC_ByteToBcd2>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	785b      	ldrb	r3, [r3, #1]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 fa38 	bl	8004f54 <RTC_ByteToBcd2>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004ae8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	789b      	ldrb	r3, [r3, #2]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 fa30 	bl	8004f54 <RTC_ByteToBcd2>
 8004af4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004af6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	78db      	ldrb	r3, [r3, #3]
 8004afe:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004b00:	4313      	orrs	r3, r2
 8004b02:	617b      	str	r3, [r7, #20]
 8004b04:	e018      	b.n	8004b38 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d102      	bne.n	8004b1a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	2200      	movs	r2, #0
 8004b18:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	785b      	ldrb	r3, [r3, #1]
 8004b24:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004b26:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004b28:	68ba      	ldr	r2, [r7, #8]
 8004b2a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004b2c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	78db      	ldrb	r3, [r3, #3]
 8004b32:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004b34:	4313      	orrs	r3, r2
 8004b36:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	22ca      	movs	r2, #202	; 0xca
 8004b3e:	625a      	str	r2, [r3, #36]	; 0x24
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2253      	movs	r2, #83	; 0x53
 8004b46:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f000 f9d7 	bl	8004efc <RTC_EnterInitMode>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00b      	beq.n	8004b6c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	22ff      	movs	r2, #255	; 0xff
 8004b5a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2204      	movs	r2, #4
 8004b60:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e047      	b.n	8004bfc <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004b76:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004b7a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689a      	ldr	r2, [r3, #8]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b8a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6899      	ldr	r1, [r3, #8]
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	68da      	ldr	r2, [r3, #12]
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	431a      	orrs	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68da      	ldr	r2, [r3, #12]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bb2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f003 0320 	and.w	r3, r3, #32
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d111      	bne.n	8004be6 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004bc2:	68f8      	ldr	r0, [r7, #12]
 8004bc4:	f000 f972 	bl	8004eac <HAL_RTC_WaitForSynchro>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00b      	beq.n	8004be6 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	22ff      	movs	r2, #255	; 0xff
 8004bd4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2204      	movs	r2, #4
 8004bda:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e00a      	b.n	8004bfc <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	22ff      	movs	r2, #255	; 0xff
 8004bec:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
  }
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	371c      	adds	r7, #28
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd90      	pop	{r4, r7, pc}

08004c04 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004c36:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004c3a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	0c1b      	lsrs	r3, r3, #16
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c46:	b2da      	uxtb	r2, r3
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	0a1b      	lsrs	r3, r3, #8
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c56:	b2da      	uxtb	r2, r3
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c64:	b2da      	uxtb	r2, r3
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	0c1b      	lsrs	r3, r3, #16
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c74:	b2da      	uxtb	r2, r3
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d11a      	bne.n	8004cb6 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	4618      	mov	r0, r3
 8004c86:	f000 f983 	bl	8004f90 <RTC_Bcd2ToByte>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	785b      	ldrb	r3, [r3, #1]
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 f97a 	bl	8004f90 <RTC_Bcd2ToByte>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	789b      	ldrb	r3, [r3, #2]
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f000 f971 	bl	8004f90 <RTC_Bcd2ToByte>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3718      	adds	r7, #24
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004cc0:	b590      	push	{r4, r7, lr}
 8004cc2:	b087      	sub	sp, #28
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	7f1b      	ldrb	r3, [r3, #28]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d101      	bne.n	8004cdc <HAL_RTC_SetDate+0x1c>
 8004cd8:	2302      	movs	r3, #2
 8004cda:	e094      	b.n	8004e06 <HAL_RTC_SetDate+0x146>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2202      	movs	r2, #2
 8004ce6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10e      	bne.n	8004d0c <HAL_RTC_SetDate+0x4c>
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	785b      	ldrb	r3, [r3, #1]
 8004cf2:	f003 0310 	and.w	r3, r3, #16
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d008      	beq.n	8004d0c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	785b      	ldrb	r3, [r3, #1]
 8004cfe:	f023 0310 	bic.w	r3, r3, #16
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	330a      	adds	r3, #10
 8004d06:	b2da      	uxtb	r2, r3
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d11c      	bne.n	8004d4c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	78db      	ldrb	r3, [r3, #3]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f000 f91c 	bl	8004f54 <RTC_ByteToBcd2>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	785b      	ldrb	r3, [r3, #1]
 8004d24:	4618      	mov	r0, r3
 8004d26:	f000 f915 	bl	8004f54 <RTC_ByteToBcd2>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004d2e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	789b      	ldrb	r3, [r3, #2]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f000 f90d 	bl	8004f54 <RTC_ByteToBcd2>
 8004d3a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004d3c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004d46:	4313      	orrs	r3, r2
 8004d48:	617b      	str	r3, [r7, #20]
 8004d4a:	e00e      	b.n	8004d6a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	78db      	ldrb	r3, [r3, #3]
 8004d50:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	785b      	ldrb	r3, [r3, #1]
 8004d56:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004d58:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8004d5e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004d66:	4313      	orrs	r3, r2
 8004d68:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	22ca      	movs	r2, #202	; 0xca
 8004d70:	625a      	str	r2, [r3, #36]	; 0x24
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2253      	movs	r2, #83	; 0x53
 8004d78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f000 f8be 	bl	8004efc <RTC_EnterInitMode>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00b      	beq.n	8004d9e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	22ff      	movs	r2, #255	; 0xff
 8004d8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2204      	movs	r2, #4
 8004d92:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e033      	b.n	8004e06 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004da8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004dac:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68da      	ldr	r2, [r3, #12]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dbc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f003 0320 	and.w	r3, r3, #32
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d111      	bne.n	8004df0 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004dcc:	68f8      	ldr	r0, [r7, #12]
 8004dce:	f000 f86d 	bl	8004eac <HAL_RTC_WaitForSynchro>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00b      	beq.n	8004df0 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	22ff      	movs	r2, #255	; 0xff
 8004dde:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2204      	movs	r2, #4
 8004de4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e00a      	b.n	8004e06 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	22ff      	movs	r2, #255	; 0xff
 8004df6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004e04:	2300      	movs	r3, #0
  }
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	371c      	adds	r7, #28
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd90      	pop	{r4, r7, pc}

08004e0e <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	b086      	sub	sp, #24
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	60f8      	str	r0, [r7, #12]
 8004e16:	60b9      	str	r1, [r7, #8]
 8004e18:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004e28:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004e2c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	0c1b      	lsrs	r3, r3, #16
 8004e32:	b2da      	uxtb	r2, r3
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	0a1b      	lsrs	r3, r3, #8
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	f003 031f 	and.w	r3, r3, #31
 8004e42:	b2da      	uxtb	r2, r3
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e50:	b2da      	uxtb	r2, r3
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	0b5b      	lsrs	r3, r3, #13
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	f003 0307 	and.w	r3, r3, #7
 8004e60:	b2da      	uxtb	r2, r3
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d11a      	bne.n	8004ea2 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	78db      	ldrb	r3, [r3, #3]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f000 f88d 	bl	8004f90 <RTC_Bcd2ToByte>
 8004e76:	4603      	mov	r3, r0
 8004e78:	461a      	mov	r2, r3
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	785b      	ldrb	r3, [r3, #1]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f000 f884 	bl	8004f90 <RTC_Bcd2ToByte>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	789b      	ldrb	r3, [r3, #2]
 8004e94:	4618      	mov	r0, r3
 8004e96:	f000 f87b 	bl	8004f90 <RTC_Bcd2ToByte>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3718      	adds	r7, #24
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68da      	ldr	r2, [r3, #12]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ec6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004ec8:	f7fd f896 	bl	8001ff8 <HAL_GetTick>
 8004ecc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004ece:	e009      	b.n	8004ee4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004ed0:	f7fd f892 	bl	8001ff8 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ede:	d901      	bls.n	8004ee4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e007      	b.n	8004ef4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	f003 0320 	and.w	r3, r3, #32
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d0ee      	beq.n	8004ed0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f04:	2300      	movs	r3, #0
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d119      	bne.n	8004f4a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f1e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f20:	f7fd f86a 	bl	8001ff8 <HAL_GetTick>
 8004f24:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004f26:	e009      	b.n	8004f3c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004f28:	f7fd f866 	bl	8001ff8 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f36:	d901      	bls.n	8004f3c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e007      	b.n	8004f4c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d0ee      	beq.n	8004f28 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3710      	adds	r7, #16
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8004f62:	e005      	b.n	8004f70 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	3301      	adds	r3, #1
 8004f68:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004f6a:	79fb      	ldrb	r3, [r7, #7]
 8004f6c:	3b0a      	subs	r3, #10
 8004f6e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8004f70:	79fb      	ldrb	r3, [r7, #7]
 8004f72:	2b09      	cmp	r3, #9
 8004f74:	d8f6      	bhi.n	8004f64 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	011b      	lsls	r3, r3, #4
 8004f7c:	b2da      	uxtb	r2, r3
 8004f7e:	79fb      	ldrb	r3, [r7, #7]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	b2db      	uxtb	r3, r3
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3714      	adds	r7, #20
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	4603      	mov	r3, r0
 8004f98:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8004f9e:	79fb      	ldrb	r3, [r7, #7]
 8004fa0:	091b      	lsrs	r3, r3, #4
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	4413      	add	r3, r2
 8004fac:	005b      	lsls	r3, r3, #1
 8004fae:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8004fb0:	79fb      	ldrb	r3, [r7, #7]
 8004fb2:	f003 030f 	and.w	r3, r3, #15
 8004fb6:	b2da      	uxtb	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	4413      	add	r3, r2
 8004fbe:	b2db      	uxtb	r3, r3
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3714      	adds	r7, #20
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b087      	sub	sp, #28
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	3350      	adds	r3, #80	; 0x50
 8004fe2:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	4413      	add	r3, r2
 8004fec:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	601a      	str	r2, [r3, #0]
}
 8004ff4:	bf00      	nop
 8004ff6:	371c      	adds	r7, #28
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d101      	bne.n	8005012 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e056      	b.n	80050c0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800501e:	b2db      	uxtb	r3, r3
 8005020:	2b00      	cmp	r3, #0
 8005022:	d106      	bne.n	8005032 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f7fc fe0f 	bl	8001c50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2202      	movs	r2, #2
 8005036:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005048:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685a      	ldr	r2, [r3, #4]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	431a      	orrs	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	431a      	orrs	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	431a      	orrs	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	431a      	orrs	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800506e:	431a      	orrs	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	69db      	ldr	r3, [r3, #28]
 8005074:	431a      	orrs	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	ea42 0103 	orr.w	r1, r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	430a      	orrs	r2, r1
 8005088:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	0c1b      	lsrs	r3, r3, #16
 8005090:	f003 0104 	and.w	r1, r3, #4
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	430a      	orrs	r2, r1
 800509e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	69da      	ldr	r2, [r3, #28]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050ae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3708      	adds	r7, #8
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b08c      	sub	sp, #48	; 0x30
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
 80050d4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80050d6:	2301      	movs	r3, #1
 80050d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80050da:	2300      	movs	r3, #0
 80050dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d101      	bne.n	80050ee <HAL_SPI_TransmitReceive+0x26>
 80050ea:	2302      	movs	r3, #2
 80050ec:	e18a      	b.n	8005404 <HAL_SPI_TransmitReceive+0x33c>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050f6:	f7fc ff7f 	bl	8001ff8 <HAL_GetTick>
 80050fa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800510c:	887b      	ldrh	r3, [r7, #2]
 800510e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005110:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005114:	2b01      	cmp	r3, #1
 8005116:	d00f      	beq.n	8005138 <HAL_SPI_TransmitReceive+0x70>
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800511e:	d107      	bne.n	8005130 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d103      	bne.n	8005130 <HAL_SPI_TransmitReceive+0x68>
 8005128:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800512c:	2b04      	cmp	r3, #4
 800512e:	d003      	beq.n	8005138 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005130:	2302      	movs	r3, #2
 8005132:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005136:	e15b      	b.n	80053f0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d005      	beq.n	800514a <HAL_SPI_TransmitReceive+0x82>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d002      	beq.n	800514a <HAL_SPI_TransmitReceive+0x82>
 8005144:	887b      	ldrh	r3, [r7, #2]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d103      	bne.n	8005152 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005150:	e14e      	b.n	80053f0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b04      	cmp	r3, #4
 800515c:	d003      	beq.n	8005166 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2205      	movs	r2, #5
 8005162:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	887a      	ldrh	r2, [r7, #2]
 8005176:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	887a      	ldrh	r2, [r7, #2]
 800517c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	68ba      	ldr	r2, [r7, #8]
 8005182:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	887a      	ldrh	r2, [r7, #2]
 8005188:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	887a      	ldrh	r2, [r7, #2]
 800518e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a6:	2b40      	cmp	r3, #64	; 0x40
 80051a8:	d007      	beq.n	80051ba <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051c2:	d178      	bne.n	80052b6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d002      	beq.n	80051d2 <HAL_SPI_TransmitReceive+0x10a>
 80051cc:	8b7b      	ldrh	r3, [r7, #26]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d166      	bne.n	80052a0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d6:	881a      	ldrh	r2, [r3, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e2:	1c9a      	adds	r2, r3, #2
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	3b01      	subs	r3, #1
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051f6:	e053      	b.n	80052a0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b02      	cmp	r3, #2
 8005204:	d11b      	bne.n	800523e <HAL_SPI_TransmitReceive+0x176>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800520a:	b29b      	uxth	r3, r3
 800520c:	2b00      	cmp	r3, #0
 800520e:	d016      	beq.n	800523e <HAL_SPI_TransmitReceive+0x176>
 8005210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005212:	2b01      	cmp	r3, #1
 8005214:	d113      	bne.n	800523e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521a:	881a      	ldrh	r2, [r3, #0]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005226:	1c9a      	adds	r2, r3, #2
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005230:	b29b      	uxth	r3, r3
 8005232:	3b01      	subs	r3, #1
 8005234:	b29a      	uxth	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800523a:	2300      	movs	r3, #0
 800523c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f003 0301 	and.w	r3, r3, #1
 8005248:	2b01      	cmp	r3, #1
 800524a:	d119      	bne.n	8005280 <HAL_SPI_TransmitReceive+0x1b8>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005250:	b29b      	uxth	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d014      	beq.n	8005280 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68da      	ldr	r2, [r3, #12]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005260:	b292      	uxth	r2, r2
 8005262:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005268:	1c9a      	adds	r2, r3, #2
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005272:	b29b      	uxth	r3, r3
 8005274:	3b01      	subs	r3, #1
 8005276:	b29a      	uxth	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800527c:	2301      	movs	r3, #1
 800527e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005280:	f7fc feba 	bl	8001ff8 <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800528c:	429a      	cmp	r2, r3
 800528e:	d807      	bhi.n	80052a0 <HAL_SPI_TransmitReceive+0x1d8>
 8005290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005296:	d003      	beq.n	80052a0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800529e:	e0a7      	b.n	80053f0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1a6      	bne.n	80051f8 <HAL_SPI_TransmitReceive+0x130>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d1a1      	bne.n	80051f8 <HAL_SPI_TransmitReceive+0x130>
 80052b4:	e07c      	b.n	80053b0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d002      	beq.n	80052c4 <HAL_SPI_TransmitReceive+0x1fc>
 80052be:	8b7b      	ldrh	r3, [r7, #26]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d16b      	bne.n	800539c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	330c      	adds	r3, #12
 80052ce:	7812      	ldrb	r2, [r2, #0]
 80052d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d6:	1c5a      	adds	r2, r3, #1
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	3b01      	subs	r3, #1
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052ea:	e057      	b.n	800539c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f003 0302 	and.w	r3, r3, #2
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d11c      	bne.n	8005334 <HAL_SPI_TransmitReceive+0x26c>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052fe:	b29b      	uxth	r3, r3
 8005300:	2b00      	cmp	r3, #0
 8005302:	d017      	beq.n	8005334 <HAL_SPI_TransmitReceive+0x26c>
 8005304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005306:	2b01      	cmp	r3, #1
 8005308:	d114      	bne.n	8005334 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	330c      	adds	r3, #12
 8005314:	7812      	ldrb	r2, [r2, #0]
 8005316:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531c:	1c5a      	adds	r2, r3, #1
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005326:	b29b      	uxth	r3, r3
 8005328:	3b01      	subs	r3, #1
 800532a:	b29a      	uxth	r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005330:	2300      	movs	r3, #0
 8005332:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b01      	cmp	r3, #1
 8005340:	d119      	bne.n	8005376 <HAL_SPI_TransmitReceive+0x2ae>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005346:	b29b      	uxth	r3, r3
 8005348:	2b00      	cmp	r3, #0
 800534a:	d014      	beq.n	8005376 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68da      	ldr	r2, [r3, #12]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005356:	b2d2      	uxtb	r2, r2
 8005358:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535e:	1c5a      	adds	r2, r3, #1
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005368:	b29b      	uxth	r3, r3
 800536a:	3b01      	subs	r3, #1
 800536c:	b29a      	uxth	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005372:	2301      	movs	r3, #1
 8005374:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005376:	f7fc fe3f 	bl	8001ff8 <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005382:	429a      	cmp	r2, r3
 8005384:	d803      	bhi.n	800538e <HAL_SPI_TransmitReceive+0x2c6>
 8005386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800538c:	d102      	bne.n	8005394 <HAL_SPI_TransmitReceive+0x2cc>
 800538e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005390:	2b00      	cmp	r3, #0
 8005392:	d103      	bne.n	800539c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800539a:	e029      	b.n	80053f0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1a2      	bne.n	80052ec <HAL_SPI_TransmitReceive+0x224>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d19d      	bne.n	80052ec <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f000 f893 	bl	80054e0 <SPI_EndRxTxTransaction>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d006      	beq.n	80053ce <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2220      	movs	r2, #32
 80053ca:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80053cc:	e010      	b.n	80053f0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10b      	bne.n	80053ee <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053d6:	2300      	movs	r3, #0
 80053d8:	617b      	str	r3, [r7, #20]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	617b      	str	r3, [r7, #20]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	617b      	str	r3, [r7, #20]
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	e000      	b.n	80053f0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80053ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005400:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005404:	4618      	mov	r0, r3
 8005406:	3730      	adds	r7, #48	; 0x30
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	603b      	str	r3, [r7, #0]
 8005418:	4613      	mov	r3, r2
 800541a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800541c:	e04c      	b.n	80054b8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005424:	d048      	beq.n	80054b8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005426:	f7fc fde7 	bl	8001ff8 <HAL_GetTick>
 800542a:	4602      	mov	r2, r0
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	683a      	ldr	r2, [r7, #0]
 8005432:	429a      	cmp	r2, r3
 8005434:	d902      	bls.n	800543c <SPI_WaitFlagStateUntilTimeout+0x30>
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d13d      	bne.n	80054b8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800544a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005454:	d111      	bne.n	800547a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800545e:	d004      	beq.n	800546a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005468:	d107      	bne.n	800547a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005478:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005482:	d10f      	bne.n	80054a4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005492:	601a      	str	r2, [r3, #0]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054a2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e00f      	b.n	80054d8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	689a      	ldr	r2, [r3, #8]
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	4013      	ands	r3, r2
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	bf0c      	ite	eq
 80054c8:	2301      	moveq	r3, #1
 80054ca:	2300      	movne	r3, #0
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	461a      	mov	r2, r3
 80054d0:	79fb      	ldrb	r3, [r7, #7]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d1a3      	bne.n	800541e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3710      	adds	r7, #16
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b088      	sub	sp, #32
 80054e4:	af02      	add	r7, sp, #8
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80054ec:	4b1b      	ldr	r3, [pc, #108]	; (800555c <SPI_EndRxTxTransaction+0x7c>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a1b      	ldr	r2, [pc, #108]	; (8005560 <SPI_EndRxTxTransaction+0x80>)
 80054f2:	fba2 2303 	umull	r2, r3, r2, r3
 80054f6:	0d5b      	lsrs	r3, r3, #21
 80054f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80054fc:	fb02 f303 	mul.w	r3, r2, r3
 8005500:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800550a:	d112      	bne.n	8005532 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	9300      	str	r3, [sp, #0]
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	2200      	movs	r2, #0
 8005514:	2180      	movs	r1, #128	; 0x80
 8005516:	68f8      	ldr	r0, [r7, #12]
 8005518:	f7ff ff78 	bl	800540c <SPI_WaitFlagStateUntilTimeout>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d016      	beq.n	8005550 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005526:	f043 0220 	orr.w	r2, r3, #32
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e00f      	b.n	8005552 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00a      	beq.n	800554e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	3b01      	subs	r3, #1
 800553c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005548:	2b80      	cmp	r3, #128	; 0x80
 800554a:	d0f2      	beq.n	8005532 <SPI_EndRxTxTransaction+0x52>
 800554c:	e000      	b.n	8005550 <SPI_EndRxTxTransaction+0x70>
        break;
 800554e:	bf00      	nop
  }

  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3718      	adds	r7, #24
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	20000000 	.word	0x20000000
 8005560:	165e9f81 	.word	0x165e9f81

08005564 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e03f      	b.n	80055f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d106      	bne.n	8005590 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f7fc fbd8 	bl	8001d40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2224      	movs	r2, #36	; 0x24
 8005594:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68da      	ldr	r2, [r3, #12]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 f90b 	bl	80057c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	691a      	ldr	r2, [r3, #16]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	695a      	ldr	r2, [r3, #20]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68da      	ldr	r2, [r3, #12]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2220      	movs	r2, #32
 80055e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2220      	movs	r2, #32
 80055f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3708      	adds	r7, #8
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b088      	sub	sp, #32
 8005602:	af02      	add	r7, sp, #8
 8005604:	60f8      	str	r0, [r7, #12]
 8005606:	60b9      	str	r1, [r7, #8]
 8005608:	603b      	str	r3, [r7, #0]
 800560a:	4613      	mov	r3, r2
 800560c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800560e:	2300      	movs	r3, #0
 8005610:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b20      	cmp	r3, #32
 800561c:	f040 8083 	bne.w	8005726 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d002      	beq.n	800562c <HAL_UART_Transmit+0x2e>
 8005626:	88fb      	ldrh	r3, [r7, #6]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d101      	bne.n	8005630 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e07b      	b.n	8005728 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005636:	2b01      	cmp	r3, #1
 8005638:	d101      	bne.n	800563e <HAL_UART_Transmit+0x40>
 800563a:	2302      	movs	r3, #2
 800563c:	e074      	b.n	8005728 <HAL_UART_Transmit+0x12a>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2221      	movs	r2, #33	; 0x21
 8005650:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005654:	f7fc fcd0 	bl	8001ff8 <HAL_GetTick>
 8005658:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	88fa      	ldrh	r2, [r7, #6]
 800565e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	88fa      	ldrh	r2, [r7, #6]
 8005664:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800566e:	e042      	b.n	80056f6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005674:	b29b      	uxth	r3, r3
 8005676:	3b01      	subs	r3, #1
 8005678:	b29a      	uxth	r2, r3
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005686:	d122      	bne.n	80056ce <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	9300      	str	r3, [sp, #0]
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	2200      	movs	r2, #0
 8005690:	2180      	movs	r1, #128	; 0x80
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	f000 f84c 	bl	8005730 <UART_WaitOnFlagUntilTimeout>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d001      	beq.n	80056a2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e042      	b.n	8005728 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	881b      	ldrh	r3, [r3, #0]
 80056aa:	461a      	mov	r2, r3
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056b4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d103      	bne.n	80056c6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	3302      	adds	r3, #2
 80056c2:	60bb      	str	r3, [r7, #8]
 80056c4:	e017      	b.n	80056f6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	3301      	adds	r3, #1
 80056ca:	60bb      	str	r3, [r7, #8]
 80056cc:	e013      	b.n	80056f6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	9300      	str	r3, [sp, #0]
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	2200      	movs	r2, #0
 80056d6:	2180      	movs	r1, #128	; 0x80
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	f000 f829 	bl	8005730 <UART_WaitOnFlagUntilTimeout>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d001      	beq.n	80056e8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e01f      	b.n	8005728 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	1c5a      	adds	r2, r3, #1
 80056ec:	60ba      	str	r2, [r7, #8]
 80056ee:	781a      	ldrb	r2, [r3, #0]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1b7      	bne.n	8005670 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	9300      	str	r3, [sp, #0]
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	2200      	movs	r2, #0
 8005708:	2140      	movs	r1, #64	; 0x40
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f000 f810 	bl	8005730 <UART_WaitOnFlagUntilTimeout>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d001      	beq.n	800571a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e006      	b.n	8005728 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2220      	movs	r2, #32
 800571e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005722:	2300      	movs	r3, #0
 8005724:	e000      	b.n	8005728 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005726:	2302      	movs	r3, #2
  }
}
 8005728:	4618      	mov	r0, r3
 800572a:	3718      	adds	r7, #24
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	603b      	str	r3, [r7, #0]
 800573c:	4613      	mov	r3, r2
 800573e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005740:	e02c      	b.n	800579c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005748:	d028      	beq.n	800579c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d007      	beq.n	8005760 <UART_WaitOnFlagUntilTimeout+0x30>
 8005750:	f7fc fc52 	bl	8001ff8 <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	69ba      	ldr	r2, [r7, #24]
 800575c:	429a      	cmp	r2, r3
 800575e:	d21d      	bcs.n	800579c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68da      	ldr	r2, [r3, #12]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800576e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	695a      	ldr	r2, [r3, #20]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f022 0201 	bic.w	r2, r2, #1
 800577e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2220      	movs	r2, #32
 8005784:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2220      	movs	r2, #32
 800578c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	e00f      	b.n	80057bc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	4013      	ands	r3, r2
 80057a6:	68ba      	ldr	r2, [r7, #8]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	bf0c      	ite	eq
 80057ac:	2301      	moveq	r3, #1
 80057ae:	2300      	movne	r3, #0
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	461a      	mov	r2, r3
 80057b4:	79fb      	ldrb	r3, [r7, #7]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d0c3      	beq.n	8005742 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057c8:	b085      	sub	sp, #20
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	68da      	ldr	r2, [r3, #12]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	430a      	orrs	r2, r1
 80057e2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	689a      	ldr	r2, [r3, #8]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	431a      	orrs	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	431a      	orrs	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	69db      	ldr	r3, [r3, #28]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005806:	f023 030c 	bic.w	r3, r3, #12
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	6812      	ldr	r2, [r2, #0]
 800580e:	68f9      	ldr	r1, [r7, #12]
 8005810:	430b      	orrs	r3, r1
 8005812:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	699a      	ldr	r2, [r3, #24]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	430a      	orrs	r2, r1
 8005828:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005832:	f040 818b 	bne.w	8005b4c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4ac1      	ldr	r2, [pc, #772]	; (8005b40 <UART_SetConfig+0x37c>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d005      	beq.n	800584c <UART_SetConfig+0x88>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4abf      	ldr	r2, [pc, #764]	; (8005b44 <UART_SetConfig+0x380>)
 8005846:	4293      	cmp	r3, r2
 8005848:	f040 80bd 	bne.w	80059c6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800584c:	f7fe f954 	bl	8003af8 <HAL_RCC_GetPCLK2Freq>
 8005850:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	461d      	mov	r5, r3
 8005856:	f04f 0600 	mov.w	r6, #0
 800585a:	46a8      	mov	r8, r5
 800585c:	46b1      	mov	r9, r6
 800585e:	eb18 0308 	adds.w	r3, r8, r8
 8005862:	eb49 0409 	adc.w	r4, r9, r9
 8005866:	4698      	mov	r8, r3
 8005868:	46a1      	mov	r9, r4
 800586a:	eb18 0805 	adds.w	r8, r8, r5
 800586e:	eb49 0906 	adc.w	r9, r9, r6
 8005872:	f04f 0100 	mov.w	r1, #0
 8005876:	f04f 0200 	mov.w	r2, #0
 800587a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800587e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005882:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005886:	4688      	mov	r8, r1
 8005888:	4691      	mov	r9, r2
 800588a:	eb18 0005 	adds.w	r0, r8, r5
 800588e:	eb49 0106 	adc.w	r1, r9, r6
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	461d      	mov	r5, r3
 8005898:	f04f 0600 	mov.w	r6, #0
 800589c:	196b      	adds	r3, r5, r5
 800589e:	eb46 0406 	adc.w	r4, r6, r6
 80058a2:	461a      	mov	r2, r3
 80058a4:	4623      	mov	r3, r4
 80058a6:	f7fb f99f 	bl	8000be8 <__aeabi_uldivmod>
 80058aa:	4603      	mov	r3, r0
 80058ac:	460c      	mov	r4, r1
 80058ae:	461a      	mov	r2, r3
 80058b0:	4ba5      	ldr	r3, [pc, #660]	; (8005b48 <UART_SetConfig+0x384>)
 80058b2:	fba3 2302 	umull	r2, r3, r3, r2
 80058b6:	095b      	lsrs	r3, r3, #5
 80058b8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	461d      	mov	r5, r3
 80058c0:	f04f 0600 	mov.w	r6, #0
 80058c4:	46a9      	mov	r9, r5
 80058c6:	46b2      	mov	sl, r6
 80058c8:	eb19 0309 	adds.w	r3, r9, r9
 80058cc:	eb4a 040a 	adc.w	r4, sl, sl
 80058d0:	4699      	mov	r9, r3
 80058d2:	46a2      	mov	sl, r4
 80058d4:	eb19 0905 	adds.w	r9, r9, r5
 80058d8:	eb4a 0a06 	adc.w	sl, sl, r6
 80058dc:	f04f 0100 	mov.w	r1, #0
 80058e0:	f04f 0200 	mov.w	r2, #0
 80058e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80058ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80058f0:	4689      	mov	r9, r1
 80058f2:	4692      	mov	sl, r2
 80058f4:	eb19 0005 	adds.w	r0, r9, r5
 80058f8:	eb4a 0106 	adc.w	r1, sl, r6
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	461d      	mov	r5, r3
 8005902:	f04f 0600 	mov.w	r6, #0
 8005906:	196b      	adds	r3, r5, r5
 8005908:	eb46 0406 	adc.w	r4, r6, r6
 800590c:	461a      	mov	r2, r3
 800590e:	4623      	mov	r3, r4
 8005910:	f7fb f96a 	bl	8000be8 <__aeabi_uldivmod>
 8005914:	4603      	mov	r3, r0
 8005916:	460c      	mov	r4, r1
 8005918:	461a      	mov	r2, r3
 800591a:	4b8b      	ldr	r3, [pc, #556]	; (8005b48 <UART_SetConfig+0x384>)
 800591c:	fba3 1302 	umull	r1, r3, r3, r2
 8005920:	095b      	lsrs	r3, r3, #5
 8005922:	2164      	movs	r1, #100	; 0x64
 8005924:	fb01 f303 	mul.w	r3, r1, r3
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	00db      	lsls	r3, r3, #3
 800592c:	3332      	adds	r3, #50	; 0x32
 800592e:	4a86      	ldr	r2, [pc, #536]	; (8005b48 <UART_SetConfig+0x384>)
 8005930:	fba2 2303 	umull	r2, r3, r2, r3
 8005934:	095b      	lsrs	r3, r3, #5
 8005936:	005b      	lsls	r3, r3, #1
 8005938:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800593c:	4498      	add	r8, r3
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	461d      	mov	r5, r3
 8005942:	f04f 0600 	mov.w	r6, #0
 8005946:	46a9      	mov	r9, r5
 8005948:	46b2      	mov	sl, r6
 800594a:	eb19 0309 	adds.w	r3, r9, r9
 800594e:	eb4a 040a 	adc.w	r4, sl, sl
 8005952:	4699      	mov	r9, r3
 8005954:	46a2      	mov	sl, r4
 8005956:	eb19 0905 	adds.w	r9, r9, r5
 800595a:	eb4a 0a06 	adc.w	sl, sl, r6
 800595e:	f04f 0100 	mov.w	r1, #0
 8005962:	f04f 0200 	mov.w	r2, #0
 8005966:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800596a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800596e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005972:	4689      	mov	r9, r1
 8005974:	4692      	mov	sl, r2
 8005976:	eb19 0005 	adds.w	r0, r9, r5
 800597a:	eb4a 0106 	adc.w	r1, sl, r6
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	461d      	mov	r5, r3
 8005984:	f04f 0600 	mov.w	r6, #0
 8005988:	196b      	adds	r3, r5, r5
 800598a:	eb46 0406 	adc.w	r4, r6, r6
 800598e:	461a      	mov	r2, r3
 8005990:	4623      	mov	r3, r4
 8005992:	f7fb f929 	bl	8000be8 <__aeabi_uldivmod>
 8005996:	4603      	mov	r3, r0
 8005998:	460c      	mov	r4, r1
 800599a:	461a      	mov	r2, r3
 800599c:	4b6a      	ldr	r3, [pc, #424]	; (8005b48 <UART_SetConfig+0x384>)
 800599e:	fba3 1302 	umull	r1, r3, r3, r2
 80059a2:	095b      	lsrs	r3, r3, #5
 80059a4:	2164      	movs	r1, #100	; 0x64
 80059a6:	fb01 f303 	mul.w	r3, r1, r3
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	00db      	lsls	r3, r3, #3
 80059ae:	3332      	adds	r3, #50	; 0x32
 80059b0:	4a65      	ldr	r2, [pc, #404]	; (8005b48 <UART_SetConfig+0x384>)
 80059b2:	fba2 2303 	umull	r2, r3, r2, r3
 80059b6:	095b      	lsrs	r3, r3, #5
 80059b8:	f003 0207 	and.w	r2, r3, #7
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4442      	add	r2, r8
 80059c2:	609a      	str	r2, [r3, #8]
 80059c4:	e26f      	b.n	8005ea6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80059c6:	f7fe f883 	bl	8003ad0 <HAL_RCC_GetPCLK1Freq>
 80059ca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	461d      	mov	r5, r3
 80059d0:	f04f 0600 	mov.w	r6, #0
 80059d4:	46a8      	mov	r8, r5
 80059d6:	46b1      	mov	r9, r6
 80059d8:	eb18 0308 	adds.w	r3, r8, r8
 80059dc:	eb49 0409 	adc.w	r4, r9, r9
 80059e0:	4698      	mov	r8, r3
 80059e2:	46a1      	mov	r9, r4
 80059e4:	eb18 0805 	adds.w	r8, r8, r5
 80059e8:	eb49 0906 	adc.w	r9, r9, r6
 80059ec:	f04f 0100 	mov.w	r1, #0
 80059f0:	f04f 0200 	mov.w	r2, #0
 80059f4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80059f8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80059fc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005a00:	4688      	mov	r8, r1
 8005a02:	4691      	mov	r9, r2
 8005a04:	eb18 0005 	adds.w	r0, r8, r5
 8005a08:	eb49 0106 	adc.w	r1, r9, r6
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	461d      	mov	r5, r3
 8005a12:	f04f 0600 	mov.w	r6, #0
 8005a16:	196b      	adds	r3, r5, r5
 8005a18:	eb46 0406 	adc.w	r4, r6, r6
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	4623      	mov	r3, r4
 8005a20:	f7fb f8e2 	bl	8000be8 <__aeabi_uldivmod>
 8005a24:	4603      	mov	r3, r0
 8005a26:	460c      	mov	r4, r1
 8005a28:	461a      	mov	r2, r3
 8005a2a:	4b47      	ldr	r3, [pc, #284]	; (8005b48 <UART_SetConfig+0x384>)
 8005a2c:	fba3 2302 	umull	r2, r3, r3, r2
 8005a30:	095b      	lsrs	r3, r3, #5
 8005a32:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	461d      	mov	r5, r3
 8005a3a:	f04f 0600 	mov.w	r6, #0
 8005a3e:	46a9      	mov	r9, r5
 8005a40:	46b2      	mov	sl, r6
 8005a42:	eb19 0309 	adds.w	r3, r9, r9
 8005a46:	eb4a 040a 	adc.w	r4, sl, sl
 8005a4a:	4699      	mov	r9, r3
 8005a4c:	46a2      	mov	sl, r4
 8005a4e:	eb19 0905 	adds.w	r9, r9, r5
 8005a52:	eb4a 0a06 	adc.w	sl, sl, r6
 8005a56:	f04f 0100 	mov.w	r1, #0
 8005a5a:	f04f 0200 	mov.w	r2, #0
 8005a5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a62:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a66:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a6a:	4689      	mov	r9, r1
 8005a6c:	4692      	mov	sl, r2
 8005a6e:	eb19 0005 	adds.w	r0, r9, r5
 8005a72:	eb4a 0106 	adc.w	r1, sl, r6
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	461d      	mov	r5, r3
 8005a7c:	f04f 0600 	mov.w	r6, #0
 8005a80:	196b      	adds	r3, r5, r5
 8005a82:	eb46 0406 	adc.w	r4, r6, r6
 8005a86:	461a      	mov	r2, r3
 8005a88:	4623      	mov	r3, r4
 8005a8a:	f7fb f8ad 	bl	8000be8 <__aeabi_uldivmod>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	460c      	mov	r4, r1
 8005a92:	461a      	mov	r2, r3
 8005a94:	4b2c      	ldr	r3, [pc, #176]	; (8005b48 <UART_SetConfig+0x384>)
 8005a96:	fba3 1302 	umull	r1, r3, r3, r2
 8005a9a:	095b      	lsrs	r3, r3, #5
 8005a9c:	2164      	movs	r1, #100	; 0x64
 8005a9e:	fb01 f303 	mul.w	r3, r1, r3
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	00db      	lsls	r3, r3, #3
 8005aa6:	3332      	adds	r3, #50	; 0x32
 8005aa8:	4a27      	ldr	r2, [pc, #156]	; (8005b48 <UART_SetConfig+0x384>)
 8005aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8005aae:	095b      	lsrs	r3, r3, #5
 8005ab0:	005b      	lsls	r3, r3, #1
 8005ab2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ab6:	4498      	add	r8, r3
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	461d      	mov	r5, r3
 8005abc:	f04f 0600 	mov.w	r6, #0
 8005ac0:	46a9      	mov	r9, r5
 8005ac2:	46b2      	mov	sl, r6
 8005ac4:	eb19 0309 	adds.w	r3, r9, r9
 8005ac8:	eb4a 040a 	adc.w	r4, sl, sl
 8005acc:	4699      	mov	r9, r3
 8005ace:	46a2      	mov	sl, r4
 8005ad0:	eb19 0905 	adds.w	r9, r9, r5
 8005ad4:	eb4a 0a06 	adc.w	sl, sl, r6
 8005ad8:	f04f 0100 	mov.w	r1, #0
 8005adc:	f04f 0200 	mov.w	r2, #0
 8005ae0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ae4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ae8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005aec:	4689      	mov	r9, r1
 8005aee:	4692      	mov	sl, r2
 8005af0:	eb19 0005 	adds.w	r0, r9, r5
 8005af4:	eb4a 0106 	adc.w	r1, sl, r6
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	461d      	mov	r5, r3
 8005afe:	f04f 0600 	mov.w	r6, #0
 8005b02:	196b      	adds	r3, r5, r5
 8005b04:	eb46 0406 	adc.w	r4, r6, r6
 8005b08:	461a      	mov	r2, r3
 8005b0a:	4623      	mov	r3, r4
 8005b0c:	f7fb f86c 	bl	8000be8 <__aeabi_uldivmod>
 8005b10:	4603      	mov	r3, r0
 8005b12:	460c      	mov	r4, r1
 8005b14:	461a      	mov	r2, r3
 8005b16:	4b0c      	ldr	r3, [pc, #48]	; (8005b48 <UART_SetConfig+0x384>)
 8005b18:	fba3 1302 	umull	r1, r3, r3, r2
 8005b1c:	095b      	lsrs	r3, r3, #5
 8005b1e:	2164      	movs	r1, #100	; 0x64
 8005b20:	fb01 f303 	mul.w	r3, r1, r3
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	00db      	lsls	r3, r3, #3
 8005b28:	3332      	adds	r3, #50	; 0x32
 8005b2a:	4a07      	ldr	r2, [pc, #28]	; (8005b48 <UART_SetConfig+0x384>)
 8005b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b30:	095b      	lsrs	r3, r3, #5
 8005b32:	f003 0207 	and.w	r2, r3, #7
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4442      	add	r2, r8
 8005b3c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005b3e:	e1b2      	b.n	8005ea6 <UART_SetConfig+0x6e2>
 8005b40:	40011000 	.word	0x40011000
 8005b44:	40011400 	.word	0x40011400
 8005b48:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4ad7      	ldr	r2, [pc, #860]	; (8005eb0 <UART_SetConfig+0x6ec>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d005      	beq.n	8005b62 <UART_SetConfig+0x39e>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4ad6      	ldr	r2, [pc, #856]	; (8005eb4 <UART_SetConfig+0x6f0>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	f040 80d1 	bne.w	8005d04 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b62:	f7fd ffc9 	bl	8003af8 <HAL_RCC_GetPCLK2Freq>
 8005b66:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	469a      	mov	sl, r3
 8005b6c:	f04f 0b00 	mov.w	fp, #0
 8005b70:	46d0      	mov	r8, sl
 8005b72:	46d9      	mov	r9, fp
 8005b74:	eb18 0308 	adds.w	r3, r8, r8
 8005b78:	eb49 0409 	adc.w	r4, r9, r9
 8005b7c:	4698      	mov	r8, r3
 8005b7e:	46a1      	mov	r9, r4
 8005b80:	eb18 080a 	adds.w	r8, r8, sl
 8005b84:	eb49 090b 	adc.w	r9, r9, fp
 8005b88:	f04f 0100 	mov.w	r1, #0
 8005b8c:	f04f 0200 	mov.w	r2, #0
 8005b90:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005b94:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005b98:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005b9c:	4688      	mov	r8, r1
 8005b9e:	4691      	mov	r9, r2
 8005ba0:	eb1a 0508 	adds.w	r5, sl, r8
 8005ba4:	eb4b 0609 	adc.w	r6, fp, r9
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	4619      	mov	r1, r3
 8005bae:	f04f 0200 	mov.w	r2, #0
 8005bb2:	f04f 0300 	mov.w	r3, #0
 8005bb6:	f04f 0400 	mov.w	r4, #0
 8005bba:	0094      	lsls	r4, r2, #2
 8005bbc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005bc0:	008b      	lsls	r3, r1, #2
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	4623      	mov	r3, r4
 8005bc6:	4628      	mov	r0, r5
 8005bc8:	4631      	mov	r1, r6
 8005bca:	f7fb f80d 	bl	8000be8 <__aeabi_uldivmod>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	460c      	mov	r4, r1
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	4bb8      	ldr	r3, [pc, #736]	; (8005eb8 <UART_SetConfig+0x6f4>)
 8005bd6:	fba3 2302 	umull	r2, r3, r3, r2
 8005bda:	095b      	lsrs	r3, r3, #5
 8005bdc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	469b      	mov	fp, r3
 8005be4:	f04f 0c00 	mov.w	ip, #0
 8005be8:	46d9      	mov	r9, fp
 8005bea:	46e2      	mov	sl, ip
 8005bec:	eb19 0309 	adds.w	r3, r9, r9
 8005bf0:	eb4a 040a 	adc.w	r4, sl, sl
 8005bf4:	4699      	mov	r9, r3
 8005bf6:	46a2      	mov	sl, r4
 8005bf8:	eb19 090b 	adds.w	r9, r9, fp
 8005bfc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005c00:	f04f 0100 	mov.w	r1, #0
 8005c04:	f04f 0200 	mov.w	r2, #0
 8005c08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c0c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c10:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c14:	4689      	mov	r9, r1
 8005c16:	4692      	mov	sl, r2
 8005c18:	eb1b 0509 	adds.w	r5, fp, r9
 8005c1c:	eb4c 060a 	adc.w	r6, ip, sl
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	4619      	mov	r1, r3
 8005c26:	f04f 0200 	mov.w	r2, #0
 8005c2a:	f04f 0300 	mov.w	r3, #0
 8005c2e:	f04f 0400 	mov.w	r4, #0
 8005c32:	0094      	lsls	r4, r2, #2
 8005c34:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005c38:	008b      	lsls	r3, r1, #2
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	4623      	mov	r3, r4
 8005c3e:	4628      	mov	r0, r5
 8005c40:	4631      	mov	r1, r6
 8005c42:	f7fa ffd1 	bl	8000be8 <__aeabi_uldivmod>
 8005c46:	4603      	mov	r3, r0
 8005c48:	460c      	mov	r4, r1
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	4b9a      	ldr	r3, [pc, #616]	; (8005eb8 <UART_SetConfig+0x6f4>)
 8005c4e:	fba3 1302 	umull	r1, r3, r3, r2
 8005c52:	095b      	lsrs	r3, r3, #5
 8005c54:	2164      	movs	r1, #100	; 0x64
 8005c56:	fb01 f303 	mul.w	r3, r1, r3
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	011b      	lsls	r3, r3, #4
 8005c5e:	3332      	adds	r3, #50	; 0x32
 8005c60:	4a95      	ldr	r2, [pc, #596]	; (8005eb8 <UART_SetConfig+0x6f4>)
 8005c62:	fba2 2303 	umull	r2, r3, r2, r3
 8005c66:	095b      	lsrs	r3, r3, #5
 8005c68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c6c:	4498      	add	r8, r3
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	469b      	mov	fp, r3
 8005c72:	f04f 0c00 	mov.w	ip, #0
 8005c76:	46d9      	mov	r9, fp
 8005c78:	46e2      	mov	sl, ip
 8005c7a:	eb19 0309 	adds.w	r3, r9, r9
 8005c7e:	eb4a 040a 	adc.w	r4, sl, sl
 8005c82:	4699      	mov	r9, r3
 8005c84:	46a2      	mov	sl, r4
 8005c86:	eb19 090b 	adds.w	r9, r9, fp
 8005c8a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005c8e:	f04f 0100 	mov.w	r1, #0
 8005c92:	f04f 0200 	mov.w	r2, #0
 8005c96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c9a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c9e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ca2:	4689      	mov	r9, r1
 8005ca4:	4692      	mov	sl, r2
 8005ca6:	eb1b 0509 	adds.w	r5, fp, r9
 8005caa:	eb4c 060a 	adc.w	r6, ip, sl
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	f04f 0200 	mov.w	r2, #0
 8005cb8:	f04f 0300 	mov.w	r3, #0
 8005cbc:	f04f 0400 	mov.w	r4, #0
 8005cc0:	0094      	lsls	r4, r2, #2
 8005cc2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005cc6:	008b      	lsls	r3, r1, #2
 8005cc8:	461a      	mov	r2, r3
 8005cca:	4623      	mov	r3, r4
 8005ccc:	4628      	mov	r0, r5
 8005cce:	4631      	mov	r1, r6
 8005cd0:	f7fa ff8a 	bl	8000be8 <__aeabi_uldivmod>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	460c      	mov	r4, r1
 8005cd8:	461a      	mov	r2, r3
 8005cda:	4b77      	ldr	r3, [pc, #476]	; (8005eb8 <UART_SetConfig+0x6f4>)
 8005cdc:	fba3 1302 	umull	r1, r3, r3, r2
 8005ce0:	095b      	lsrs	r3, r3, #5
 8005ce2:	2164      	movs	r1, #100	; 0x64
 8005ce4:	fb01 f303 	mul.w	r3, r1, r3
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	011b      	lsls	r3, r3, #4
 8005cec:	3332      	adds	r3, #50	; 0x32
 8005cee:	4a72      	ldr	r2, [pc, #456]	; (8005eb8 <UART_SetConfig+0x6f4>)
 8005cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf4:	095b      	lsrs	r3, r3, #5
 8005cf6:	f003 020f 	and.w	r2, r3, #15
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4442      	add	r2, r8
 8005d00:	609a      	str	r2, [r3, #8]
 8005d02:	e0d0      	b.n	8005ea6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d04:	f7fd fee4 	bl	8003ad0 <HAL_RCC_GetPCLK1Freq>
 8005d08:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	469a      	mov	sl, r3
 8005d0e:	f04f 0b00 	mov.w	fp, #0
 8005d12:	46d0      	mov	r8, sl
 8005d14:	46d9      	mov	r9, fp
 8005d16:	eb18 0308 	adds.w	r3, r8, r8
 8005d1a:	eb49 0409 	adc.w	r4, r9, r9
 8005d1e:	4698      	mov	r8, r3
 8005d20:	46a1      	mov	r9, r4
 8005d22:	eb18 080a 	adds.w	r8, r8, sl
 8005d26:	eb49 090b 	adc.w	r9, r9, fp
 8005d2a:	f04f 0100 	mov.w	r1, #0
 8005d2e:	f04f 0200 	mov.w	r2, #0
 8005d32:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005d36:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005d3a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005d3e:	4688      	mov	r8, r1
 8005d40:	4691      	mov	r9, r2
 8005d42:	eb1a 0508 	adds.w	r5, sl, r8
 8005d46:	eb4b 0609 	adc.w	r6, fp, r9
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	4619      	mov	r1, r3
 8005d50:	f04f 0200 	mov.w	r2, #0
 8005d54:	f04f 0300 	mov.w	r3, #0
 8005d58:	f04f 0400 	mov.w	r4, #0
 8005d5c:	0094      	lsls	r4, r2, #2
 8005d5e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005d62:	008b      	lsls	r3, r1, #2
 8005d64:	461a      	mov	r2, r3
 8005d66:	4623      	mov	r3, r4
 8005d68:	4628      	mov	r0, r5
 8005d6a:	4631      	mov	r1, r6
 8005d6c:	f7fa ff3c 	bl	8000be8 <__aeabi_uldivmod>
 8005d70:	4603      	mov	r3, r0
 8005d72:	460c      	mov	r4, r1
 8005d74:	461a      	mov	r2, r3
 8005d76:	4b50      	ldr	r3, [pc, #320]	; (8005eb8 <UART_SetConfig+0x6f4>)
 8005d78:	fba3 2302 	umull	r2, r3, r3, r2
 8005d7c:	095b      	lsrs	r3, r3, #5
 8005d7e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	469b      	mov	fp, r3
 8005d86:	f04f 0c00 	mov.w	ip, #0
 8005d8a:	46d9      	mov	r9, fp
 8005d8c:	46e2      	mov	sl, ip
 8005d8e:	eb19 0309 	adds.w	r3, r9, r9
 8005d92:	eb4a 040a 	adc.w	r4, sl, sl
 8005d96:	4699      	mov	r9, r3
 8005d98:	46a2      	mov	sl, r4
 8005d9a:	eb19 090b 	adds.w	r9, r9, fp
 8005d9e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005da2:	f04f 0100 	mov.w	r1, #0
 8005da6:	f04f 0200 	mov.w	r2, #0
 8005daa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005dae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005db2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005db6:	4689      	mov	r9, r1
 8005db8:	4692      	mov	sl, r2
 8005dba:	eb1b 0509 	adds.w	r5, fp, r9
 8005dbe:	eb4c 060a 	adc.w	r6, ip, sl
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	f04f 0200 	mov.w	r2, #0
 8005dcc:	f04f 0300 	mov.w	r3, #0
 8005dd0:	f04f 0400 	mov.w	r4, #0
 8005dd4:	0094      	lsls	r4, r2, #2
 8005dd6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005dda:	008b      	lsls	r3, r1, #2
 8005ddc:	461a      	mov	r2, r3
 8005dde:	4623      	mov	r3, r4
 8005de0:	4628      	mov	r0, r5
 8005de2:	4631      	mov	r1, r6
 8005de4:	f7fa ff00 	bl	8000be8 <__aeabi_uldivmod>
 8005de8:	4603      	mov	r3, r0
 8005dea:	460c      	mov	r4, r1
 8005dec:	461a      	mov	r2, r3
 8005dee:	4b32      	ldr	r3, [pc, #200]	; (8005eb8 <UART_SetConfig+0x6f4>)
 8005df0:	fba3 1302 	umull	r1, r3, r3, r2
 8005df4:	095b      	lsrs	r3, r3, #5
 8005df6:	2164      	movs	r1, #100	; 0x64
 8005df8:	fb01 f303 	mul.w	r3, r1, r3
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	011b      	lsls	r3, r3, #4
 8005e00:	3332      	adds	r3, #50	; 0x32
 8005e02:	4a2d      	ldr	r2, [pc, #180]	; (8005eb8 <UART_SetConfig+0x6f4>)
 8005e04:	fba2 2303 	umull	r2, r3, r2, r3
 8005e08:	095b      	lsrs	r3, r3, #5
 8005e0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e0e:	4498      	add	r8, r3
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	469b      	mov	fp, r3
 8005e14:	f04f 0c00 	mov.w	ip, #0
 8005e18:	46d9      	mov	r9, fp
 8005e1a:	46e2      	mov	sl, ip
 8005e1c:	eb19 0309 	adds.w	r3, r9, r9
 8005e20:	eb4a 040a 	adc.w	r4, sl, sl
 8005e24:	4699      	mov	r9, r3
 8005e26:	46a2      	mov	sl, r4
 8005e28:	eb19 090b 	adds.w	r9, r9, fp
 8005e2c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005e30:	f04f 0100 	mov.w	r1, #0
 8005e34:	f04f 0200 	mov.w	r2, #0
 8005e38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e3c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e40:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e44:	4689      	mov	r9, r1
 8005e46:	4692      	mov	sl, r2
 8005e48:	eb1b 0509 	adds.w	r5, fp, r9
 8005e4c:	eb4c 060a 	adc.w	r6, ip, sl
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	4619      	mov	r1, r3
 8005e56:	f04f 0200 	mov.w	r2, #0
 8005e5a:	f04f 0300 	mov.w	r3, #0
 8005e5e:	f04f 0400 	mov.w	r4, #0
 8005e62:	0094      	lsls	r4, r2, #2
 8005e64:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005e68:	008b      	lsls	r3, r1, #2
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	4623      	mov	r3, r4
 8005e6e:	4628      	mov	r0, r5
 8005e70:	4631      	mov	r1, r6
 8005e72:	f7fa feb9 	bl	8000be8 <__aeabi_uldivmod>
 8005e76:	4603      	mov	r3, r0
 8005e78:	460c      	mov	r4, r1
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	4b0e      	ldr	r3, [pc, #56]	; (8005eb8 <UART_SetConfig+0x6f4>)
 8005e7e:	fba3 1302 	umull	r1, r3, r3, r2
 8005e82:	095b      	lsrs	r3, r3, #5
 8005e84:	2164      	movs	r1, #100	; 0x64
 8005e86:	fb01 f303 	mul.w	r3, r1, r3
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	011b      	lsls	r3, r3, #4
 8005e8e:	3332      	adds	r3, #50	; 0x32
 8005e90:	4a09      	ldr	r2, [pc, #36]	; (8005eb8 <UART_SetConfig+0x6f4>)
 8005e92:	fba2 2303 	umull	r2, r3, r2, r3
 8005e96:	095b      	lsrs	r3, r3, #5
 8005e98:	f003 020f 	and.w	r2, r3, #15
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4442      	add	r2, r8
 8005ea2:	609a      	str	r2, [r3, #8]
}
 8005ea4:	e7ff      	b.n	8005ea6 <UART_SetConfig+0x6e2>
 8005ea6:	bf00      	nop
 8005ea8:	3714      	adds	r7, #20
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eb0:	40011000 	.word	0x40011000
 8005eb4:	40011400 	.word	0x40011400
 8005eb8:	51eb851f 	.word	0x51eb851f

08005ebc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005ec0:	4904      	ldr	r1, [pc, #16]	; (8005ed4 <MX_FATFS_Init+0x18>)
 8005ec2:	4805      	ldr	r0, [pc, #20]	; (8005ed8 <MX_FATFS_Init+0x1c>)
 8005ec4:	f003 f9aa 	bl	800921c <FATFS_LinkDriver>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	461a      	mov	r2, r3
 8005ecc:	4b03      	ldr	r3, [pc, #12]	; (8005edc <MX_FATFS_Init+0x20>)
 8005ece:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005ed0:	bf00      	nop
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	20000dd0 	.word	0x20000dd0
 8005ed8:	2000000c 	.word	0x2000000c
 8005edc:	20000dd4 	.word	0x20000dd4

08005ee0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005ee4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8005efa:	79fb      	ldrb	r3, [r7, #7]
 8005efc:	4618      	mov	r0, r3
 8005efe:	f000 f9d7 	bl	80062b0 <USER_SPI_initialize>
 8005f02:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3708      	adds	r7, #8
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	4603      	mov	r3, r0
 8005f14:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8005f16:	79fb      	ldrb	r3, [r7, #7]
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f000 fab5 	bl	8006488 <USER_SPI_status>
 8005f1e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3708      	adds	r7, #8
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60b9      	str	r1, [r7, #8]
 8005f30:	607a      	str	r2, [r7, #4]
 8005f32:	603b      	str	r3, [r7, #0]
 8005f34:	4603      	mov	r3, r0
 8005f36:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8005f38:	7bf8      	ldrb	r0, [r7, #15]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	68b9      	ldr	r1, [r7, #8]
 8005f40:	f000 fab8 	bl	80064b4 <USER_SPI_read>
 8005f44:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3710      	adds	r7, #16
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b084      	sub	sp, #16
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
 8005f58:	603b      	str	r3, [r7, #0]
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8005f5e:	7bf8      	ldrb	r0, [r7, #15]
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	68b9      	ldr	r1, [r7, #8]
 8005f66:	f000 fb0b 	bl	8006580 <USER_SPI_write>
 8005f6a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3710      	adds	r7, #16
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	603a      	str	r2, [r7, #0]
 8005f7e:	71fb      	strb	r3, [r7, #7]
 8005f80:	460b      	mov	r3, r1
 8005f82:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8005f84:	79b9      	ldrb	r1, [r7, #6]
 8005f86:	79fb      	ldrb	r3, [r7, #7]
 8005f88:	683a      	ldr	r2, [r7, #0]
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f000 fb74 	bl	8006678 <USER_SPI_ioctl>
 8005f90:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3708      	adds	r7, #8
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
	...

08005f9c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8005fa4:	f7fc f828 	bl	8001ff8 <HAL_GetTick>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	4b04      	ldr	r3, [pc, #16]	; (8005fbc <SPI_Timer_On+0x20>)
 8005fac:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 8005fae:	4a04      	ldr	r2, [pc, #16]	; (8005fc0 <SPI_Timer_On+0x24>)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6013      	str	r3, [r2, #0]
}
 8005fb4:	bf00      	nop
 8005fb6:	3708      	adds	r7, #8
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	20001238 	.word	0x20001238
 8005fc0:	2000123c 	.word	0x2000123c

08005fc4 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8005fc8:	f7fc f816 	bl	8001ff8 <HAL_GetTick>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	4b06      	ldr	r3, [pc, #24]	; (8005fe8 <SPI_Timer_Status+0x24>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	1ad2      	subs	r2, r2, r3
 8005fd4:	4b05      	ldr	r3, [pc, #20]	; (8005fec <SPI_Timer_Status+0x28>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	bf34      	ite	cc
 8005fdc:	2301      	movcc	r3, #1
 8005fde:	2300      	movcs	r3, #0
 8005fe0:	b2db      	uxtb	r3, r3
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	20001238 	.word	0x20001238
 8005fec:	2000123c 	.word	0x2000123c

08005ff0 <xchg_spi>:
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */

)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b086      	sub	sp, #24
 8005ff4:	af02      	add	r7, sp, #8
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8005ffa:	f107 020f 	add.w	r2, r7, #15
 8005ffe:	1df9      	adds	r1, r7, #7
 8006000:	2332      	movs	r3, #50	; 0x32
 8006002:	9300      	str	r3, [sp, #0]
 8006004:	2301      	movs	r3, #1
 8006006:	4804      	ldr	r0, [pc, #16]	; (8006018 <xchg_spi+0x28>)
 8006008:	f7ff f85e 	bl	80050c8 <HAL_SPI_TransmitReceive>
    return rxDat;
 800600c:	7bfb      	ldrb	r3, [r7, #15]
}
 800600e:	4618      	mov	r0, r3
 8006010:	3710      	adds	r7, #16
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
 8006016:	bf00      	nop
 8006018:	200007bc 	.word	0x200007bc

0800601c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800601c:	b590      	push	{r4, r7, lr}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8006026:	2300      	movs	r3, #0
 8006028:	60fb      	str	r3, [r7, #12]
 800602a:	e00a      	b.n	8006042 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	18d4      	adds	r4, r2, r3
 8006032:	20ff      	movs	r0, #255	; 0xff
 8006034:	f7ff ffdc 	bl	8005ff0 <xchg_spi>
 8006038:	4603      	mov	r3, r0
 800603a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	3301      	adds	r3, #1
 8006040:	60fb      	str	r3, [r7, #12]
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	429a      	cmp	r2, r3
 8006048:	d3f0      	bcc.n	800602c <rcvr_spi_multi+0x10>
	}
}
 800604a:	bf00      	nop
 800604c:	3714      	adds	r7, #20
 800604e:	46bd      	mov	sp, r7
 8006050:	bd90      	pop	{r4, r7, pc}

08006052 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8006052:	b580      	push	{r7, lr}
 8006054:	b084      	sub	sp, #16
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
 800605a:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800605c:	2300      	movs	r3, #0
 800605e:	60fb      	str	r3, [r7, #12]
 8006060:	e009      	b.n	8006076 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	4413      	add	r3, r2
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	4618      	mov	r0, r3
 800606c:	f7ff ffc0 	bl	8005ff0 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	3301      	adds	r3, #1
 8006074:	60fb      	str	r3, [r7, #12]
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	429a      	cmp	r2, r3
 800607c:	d3f1      	bcc.n	8006062 <xmit_spi_multi+0x10>
	}
}
 800607e:	bf00      	nop
 8006080:	3710      	adds	r7, #16
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8006086:	b580      	push	{r7, lr}
 8006088:	b086      	sub	sp, #24
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800608e:	f7fb ffb3 	bl	8001ff8 <HAL_GetTick>
 8006092:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8006098:	20ff      	movs	r0, #255	; 0xff
 800609a:	f7ff ffa9 	bl	8005ff0 <xchg_spi>
 800609e:	4603      	mov	r3, r0
 80060a0:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80060a2:	7bfb      	ldrb	r3, [r7, #15]
 80060a4:	2bff      	cmp	r3, #255	; 0xff
 80060a6:	d007      	beq.n	80060b8 <wait_ready+0x32>
 80060a8:	f7fb ffa6 	bl	8001ff8 <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d8ef      	bhi.n	8006098 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80060b8:	7bfb      	ldrb	r3, [r7, #15]
 80060ba:	2bff      	cmp	r3, #255	; 0xff
 80060bc:	bf0c      	ite	eq
 80060be:	2301      	moveq	r3, #1
 80060c0:	2300      	movne	r3, #0
 80060c2:	b2db      	uxtb	r3, r3
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3718      	adds	r7, #24
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80060d0:	2201      	movs	r2, #1
 80060d2:	2101      	movs	r1, #1
 80060d4:	4803      	ldr	r0, [pc, #12]	; (80060e4 <despiselect+0x18>)
 80060d6:	f7fc fc09 	bl	80028ec <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80060da:	20ff      	movs	r0, #255	; 0xff
 80060dc:	f7ff ff88 	bl	8005ff0 <xchg_spi>

}
 80060e0:	bf00      	nop
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	40020800 	.word	0x40020800

080060e8 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80060ec:	2200      	movs	r2, #0
 80060ee:	2101      	movs	r1, #1
 80060f0:	4809      	ldr	r0, [pc, #36]	; (8006118 <spiselect+0x30>)
 80060f2:	f7fc fbfb 	bl	80028ec <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80060f6:	20ff      	movs	r0, #255	; 0xff
 80060f8:	f7ff ff7a 	bl	8005ff0 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80060fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006100:	f7ff ffc1 	bl	8006086 <wait_ready>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d001      	beq.n	800610e <spiselect+0x26>
 800610a:	2301      	movs	r3, #1
 800610c:	e002      	b.n	8006114 <spiselect+0x2c>

	despiselect();
 800610e:	f7ff ffdd 	bl	80060cc <despiselect>
	return 0;	/* Timeout */
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	bd80      	pop	{r7, pc}
 8006118:	40020800 	.word	0x40020800

0800611c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8006126:	20c8      	movs	r0, #200	; 0xc8
 8006128:	f7ff ff38 	bl	8005f9c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800612c:	20ff      	movs	r0, #255	; 0xff
 800612e:	f7ff ff5f 	bl	8005ff0 <xchg_spi>
 8006132:	4603      	mov	r3, r0
 8006134:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8006136:	7bfb      	ldrb	r3, [r7, #15]
 8006138:	2bff      	cmp	r3, #255	; 0xff
 800613a:	d104      	bne.n	8006146 <rcvr_datablock+0x2a>
 800613c:	f7ff ff42 	bl	8005fc4 <SPI_Timer_Status>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1f2      	bne.n	800612c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8006146:	7bfb      	ldrb	r3, [r7, #15]
 8006148:	2bfe      	cmp	r3, #254	; 0xfe
 800614a:	d001      	beq.n	8006150 <rcvr_datablock+0x34>
 800614c:	2300      	movs	r3, #0
 800614e:	e00a      	b.n	8006166 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8006150:	6839      	ldr	r1, [r7, #0]
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f7ff ff62 	bl	800601c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8006158:	20ff      	movs	r0, #255	; 0xff
 800615a:	f7ff ff49 	bl	8005ff0 <xchg_spi>
 800615e:	20ff      	movs	r0, #255	; 0xff
 8006160:	f7ff ff46 	bl	8005ff0 <xchg_spi>

	return 1;						/* Function succeeded */
 8006164:	2301      	movs	r3, #1
}
 8006166:	4618      	mov	r0, r3
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b084      	sub	sp, #16
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
 8006176:	460b      	mov	r3, r1
 8006178:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800617a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800617e:	f7ff ff82 	bl	8006086 <wait_ready>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d101      	bne.n	800618c <xmit_datablock+0x1e>
 8006188:	2300      	movs	r3, #0
 800618a:	e01e      	b.n	80061ca <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800618c:	78fb      	ldrb	r3, [r7, #3]
 800618e:	4618      	mov	r0, r3
 8006190:	f7ff ff2e 	bl	8005ff0 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8006194:	78fb      	ldrb	r3, [r7, #3]
 8006196:	2bfd      	cmp	r3, #253	; 0xfd
 8006198:	d016      	beq.n	80061c8 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800619a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f7ff ff57 	bl	8006052 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80061a4:	20ff      	movs	r0, #255	; 0xff
 80061a6:	f7ff ff23 	bl	8005ff0 <xchg_spi>
 80061aa:	20ff      	movs	r0, #255	; 0xff
 80061ac:	f7ff ff20 	bl	8005ff0 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80061b0:	20ff      	movs	r0, #255	; 0xff
 80061b2:	f7ff ff1d 	bl	8005ff0 <xchg_spi>
 80061b6:	4603      	mov	r3, r0
 80061b8:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80061ba:	7bfb      	ldrb	r3, [r7, #15]
 80061bc:	f003 031f 	and.w	r3, r3, #31
 80061c0:	2b05      	cmp	r3, #5
 80061c2:	d001      	beq.n	80061c8 <xmit_datablock+0x5a>
 80061c4:	2300      	movs	r3, #0
 80061c6:	e000      	b.n	80061ca <xmit_datablock+0x5c>
	}
	return 1;
 80061c8:	2301      	movs	r3, #1
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b084      	sub	sp, #16
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	4603      	mov	r3, r0
 80061da:	6039      	str	r1, [r7, #0]
 80061dc:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80061de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	da0e      	bge.n	8006204 <send_cmd+0x32>
		cmd &= 0x7F;
 80061e6:	79fb      	ldrb	r3, [r7, #7]
 80061e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061ec:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80061ee:	2100      	movs	r1, #0
 80061f0:	2037      	movs	r0, #55	; 0x37
 80061f2:	f7ff ffee 	bl	80061d2 <send_cmd>
 80061f6:	4603      	mov	r3, r0
 80061f8:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80061fa:	7bbb      	ldrb	r3, [r7, #14]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d901      	bls.n	8006204 <send_cmd+0x32>
 8006200:	7bbb      	ldrb	r3, [r7, #14]
 8006202:	e051      	b.n	80062a8 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8006204:	79fb      	ldrb	r3, [r7, #7]
 8006206:	2b0c      	cmp	r3, #12
 8006208:	d008      	beq.n	800621c <send_cmd+0x4a>
		despiselect();
 800620a:	f7ff ff5f 	bl	80060cc <despiselect>
		if (!spiselect()) return 0xFF;
 800620e:	f7ff ff6b 	bl	80060e8 <spiselect>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d101      	bne.n	800621c <send_cmd+0x4a>
 8006218:	23ff      	movs	r3, #255	; 0xff
 800621a:	e045      	b.n	80062a8 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800621c:	79fb      	ldrb	r3, [r7, #7]
 800621e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006222:	b2db      	uxtb	r3, r3
 8006224:	4618      	mov	r0, r3
 8006226:	f7ff fee3 	bl	8005ff0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	0e1b      	lsrs	r3, r3, #24
 800622e:	b2db      	uxtb	r3, r3
 8006230:	4618      	mov	r0, r3
 8006232:	f7ff fedd 	bl	8005ff0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	0c1b      	lsrs	r3, r3, #16
 800623a:	b2db      	uxtb	r3, r3
 800623c:	4618      	mov	r0, r3
 800623e:	f7ff fed7 	bl	8005ff0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	0a1b      	lsrs	r3, r3, #8
 8006246:	b2db      	uxtb	r3, r3
 8006248:	4618      	mov	r0, r3
 800624a:	f7ff fed1 	bl	8005ff0 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	b2db      	uxtb	r3, r3
 8006252:	4618      	mov	r0, r3
 8006254:	f7ff fecc 	bl	8005ff0 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8006258:	2301      	movs	r3, #1
 800625a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800625c:	79fb      	ldrb	r3, [r7, #7]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d101      	bne.n	8006266 <send_cmd+0x94>
 8006262:	2395      	movs	r3, #149	; 0x95
 8006264:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8006266:	79fb      	ldrb	r3, [r7, #7]
 8006268:	2b08      	cmp	r3, #8
 800626a:	d101      	bne.n	8006270 <send_cmd+0x9e>
 800626c:	2387      	movs	r3, #135	; 0x87
 800626e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8006270:	7bfb      	ldrb	r3, [r7, #15]
 8006272:	4618      	mov	r0, r3
 8006274:	f7ff febc 	bl	8005ff0 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8006278:	79fb      	ldrb	r3, [r7, #7]
 800627a:	2b0c      	cmp	r3, #12
 800627c:	d102      	bne.n	8006284 <send_cmd+0xb2>
 800627e:	20ff      	movs	r0, #255	; 0xff
 8006280:	f7ff feb6 	bl	8005ff0 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8006284:	230a      	movs	r3, #10
 8006286:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8006288:	20ff      	movs	r0, #255	; 0xff
 800628a:	f7ff feb1 	bl	8005ff0 <xchg_spi>
 800628e:	4603      	mov	r3, r0
 8006290:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8006292:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006296:	2b00      	cmp	r3, #0
 8006298:	da05      	bge.n	80062a6 <send_cmd+0xd4>
 800629a:	7bfb      	ldrb	r3, [r7, #15]
 800629c:	3b01      	subs	r3, #1
 800629e:	73fb      	strb	r3, [r7, #15]
 80062a0:	7bfb      	ldrb	r3, [r7, #15]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d1f0      	bne.n	8006288 <send_cmd+0xb6>

	return res;							/* Return received response */
 80062a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3710      	adds	r7, #16
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80062b0:	b590      	push	{r4, r7, lr}
 80062b2:	b085      	sub	sp, #20
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	4603      	mov	r3, r0
 80062b8:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80062ba:	79fb      	ldrb	r3, [r7, #7]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d001      	beq.n	80062c4 <USER_SPI_initialize+0x14>
 80062c0:	2301      	movs	r3, #1
 80062c2:	e0d6      	b.n	8006472 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80062c4:	4b6d      	ldr	r3, [pc, #436]	; (800647c <USER_SPI_initialize+0x1cc>)
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	f003 0302 	and.w	r3, r3, #2
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d003      	beq.n	80062da <USER_SPI_initialize+0x2a>
 80062d2:	4b6a      	ldr	r3, [pc, #424]	; (800647c <USER_SPI_initialize+0x1cc>)
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	e0cb      	b.n	8006472 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80062da:	4b69      	ldr	r3, [pc, #420]	; (8006480 <USER_SPI_initialize+0x1d0>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80062e4:	4b66      	ldr	r3, [pc, #408]	; (8006480 <USER_SPI_initialize+0x1d0>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80062ec:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80062ee:	230a      	movs	r3, #10
 80062f0:	73fb      	strb	r3, [r7, #15]
 80062f2:	e005      	b.n	8006300 <USER_SPI_initialize+0x50>
 80062f4:	20ff      	movs	r0, #255	; 0xff
 80062f6:	f7ff fe7b 	bl	8005ff0 <xchg_spi>
 80062fa:	7bfb      	ldrb	r3, [r7, #15]
 80062fc:	3b01      	subs	r3, #1
 80062fe:	73fb      	strb	r3, [r7, #15]
 8006300:	7bfb      	ldrb	r3, [r7, #15]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1f6      	bne.n	80062f4 <USER_SPI_initialize+0x44>

	ty = 0;
 8006306:	2300      	movs	r3, #0
 8006308:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800630a:	2100      	movs	r1, #0
 800630c:	2000      	movs	r0, #0
 800630e:	f7ff ff60 	bl	80061d2 <send_cmd>
 8006312:	4603      	mov	r3, r0
 8006314:	2b01      	cmp	r3, #1
 8006316:	f040 808b 	bne.w	8006430 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800631a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800631e:	f7ff fe3d 	bl	8005f9c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8006322:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006326:	2008      	movs	r0, #8
 8006328:	f7ff ff53 	bl	80061d2 <send_cmd>
 800632c:	4603      	mov	r3, r0
 800632e:	2b01      	cmp	r3, #1
 8006330:	d151      	bne.n	80063d6 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8006332:	2300      	movs	r3, #0
 8006334:	73fb      	strb	r3, [r7, #15]
 8006336:	e00d      	b.n	8006354 <USER_SPI_initialize+0xa4>
 8006338:	7bfc      	ldrb	r4, [r7, #15]
 800633a:	20ff      	movs	r0, #255	; 0xff
 800633c:	f7ff fe58 	bl	8005ff0 <xchg_spi>
 8006340:	4603      	mov	r3, r0
 8006342:	461a      	mov	r2, r3
 8006344:	f107 0310 	add.w	r3, r7, #16
 8006348:	4423      	add	r3, r4
 800634a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800634e:	7bfb      	ldrb	r3, [r7, #15]
 8006350:	3301      	adds	r3, #1
 8006352:	73fb      	strb	r3, [r7, #15]
 8006354:	7bfb      	ldrb	r3, [r7, #15]
 8006356:	2b03      	cmp	r3, #3
 8006358:	d9ee      	bls.n	8006338 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800635a:	7abb      	ldrb	r3, [r7, #10]
 800635c:	2b01      	cmp	r3, #1
 800635e:	d167      	bne.n	8006430 <USER_SPI_initialize+0x180>
 8006360:	7afb      	ldrb	r3, [r7, #11]
 8006362:	2baa      	cmp	r3, #170	; 0xaa
 8006364:	d164      	bne.n	8006430 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8006366:	bf00      	nop
 8006368:	f7ff fe2c 	bl	8005fc4 <SPI_Timer_Status>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d007      	beq.n	8006382 <USER_SPI_initialize+0xd2>
 8006372:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006376:	20a9      	movs	r0, #169	; 0xa9
 8006378:	f7ff ff2b 	bl	80061d2 <send_cmd>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d1f2      	bne.n	8006368 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8006382:	f7ff fe1f 	bl	8005fc4 <SPI_Timer_Status>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d051      	beq.n	8006430 <USER_SPI_initialize+0x180>
 800638c:	2100      	movs	r1, #0
 800638e:	203a      	movs	r0, #58	; 0x3a
 8006390:	f7ff ff1f 	bl	80061d2 <send_cmd>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d14a      	bne.n	8006430 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800639a:	2300      	movs	r3, #0
 800639c:	73fb      	strb	r3, [r7, #15]
 800639e:	e00d      	b.n	80063bc <USER_SPI_initialize+0x10c>
 80063a0:	7bfc      	ldrb	r4, [r7, #15]
 80063a2:	20ff      	movs	r0, #255	; 0xff
 80063a4:	f7ff fe24 	bl	8005ff0 <xchg_spi>
 80063a8:	4603      	mov	r3, r0
 80063aa:	461a      	mov	r2, r3
 80063ac:	f107 0310 	add.w	r3, r7, #16
 80063b0:	4423      	add	r3, r4
 80063b2:	f803 2c08 	strb.w	r2, [r3, #-8]
 80063b6:	7bfb      	ldrb	r3, [r7, #15]
 80063b8:	3301      	adds	r3, #1
 80063ba:	73fb      	strb	r3, [r7, #15]
 80063bc:	7bfb      	ldrb	r3, [r7, #15]
 80063be:	2b03      	cmp	r3, #3
 80063c0:	d9ee      	bls.n	80063a0 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80063c2:	7a3b      	ldrb	r3, [r7, #8]
 80063c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d001      	beq.n	80063d0 <USER_SPI_initialize+0x120>
 80063cc:	230c      	movs	r3, #12
 80063ce:	e000      	b.n	80063d2 <USER_SPI_initialize+0x122>
 80063d0:	2304      	movs	r3, #4
 80063d2:	737b      	strb	r3, [r7, #13]
 80063d4:	e02c      	b.n	8006430 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80063d6:	2100      	movs	r1, #0
 80063d8:	20a9      	movs	r0, #169	; 0xa9
 80063da:	f7ff fefa 	bl	80061d2 <send_cmd>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d804      	bhi.n	80063ee <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80063e4:	2302      	movs	r3, #2
 80063e6:	737b      	strb	r3, [r7, #13]
 80063e8:	23a9      	movs	r3, #169	; 0xa9
 80063ea:	73bb      	strb	r3, [r7, #14]
 80063ec:	e003      	b.n	80063f6 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80063ee:	2301      	movs	r3, #1
 80063f0:	737b      	strb	r3, [r7, #13]
 80063f2:	2301      	movs	r3, #1
 80063f4:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80063f6:	bf00      	nop
 80063f8:	f7ff fde4 	bl	8005fc4 <SPI_Timer_Status>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d007      	beq.n	8006412 <USER_SPI_initialize+0x162>
 8006402:	7bbb      	ldrb	r3, [r7, #14]
 8006404:	2100      	movs	r1, #0
 8006406:	4618      	mov	r0, r3
 8006408:	f7ff fee3 	bl	80061d2 <send_cmd>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d1f2      	bne.n	80063f8 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8006412:	f7ff fdd7 	bl	8005fc4 <SPI_Timer_Status>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d007      	beq.n	800642c <USER_SPI_initialize+0x17c>
 800641c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006420:	2010      	movs	r0, #16
 8006422:	f7ff fed6 	bl	80061d2 <send_cmd>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d001      	beq.n	8006430 <USER_SPI_initialize+0x180>
				ty = 0;
 800642c:	2300      	movs	r3, #0
 800642e:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8006430:	4a14      	ldr	r2, [pc, #80]	; (8006484 <USER_SPI_initialize+0x1d4>)
 8006432:	7b7b      	ldrb	r3, [r7, #13]
 8006434:	7013      	strb	r3, [r2, #0]
	despiselect();
 8006436:	f7ff fe49 	bl	80060cc <despiselect>

	if (ty) {			/* OK */
 800643a:	7b7b      	ldrb	r3, [r7, #13]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d012      	beq.n	8006466 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8006440:	4b0f      	ldr	r3, [pc, #60]	; (8006480 <USER_SPI_initialize+0x1d0>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800644a:	4b0d      	ldr	r3, [pc, #52]	; (8006480 <USER_SPI_initialize+0x1d0>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f042 0210 	orr.w	r2, r2, #16
 8006452:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8006454:	4b09      	ldr	r3, [pc, #36]	; (800647c <USER_SPI_initialize+0x1cc>)
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	b2db      	uxtb	r3, r3
 800645a:	f023 0301 	bic.w	r3, r3, #1
 800645e:	b2da      	uxtb	r2, r3
 8006460:	4b06      	ldr	r3, [pc, #24]	; (800647c <USER_SPI_initialize+0x1cc>)
 8006462:	701a      	strb	r2, [r3, #0]
 8006464:	e002      	b.n	800646c <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8006466:	4b05      	ldr	r3, [pc, #20]	; (800647c <USER_SPI_initialize+0x1cc>)
 8006468:	2201      	movs	r2, #1
 800646a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800646c:	4b03      	ldr	r3, [pc, #12]	; (800647c <USER_SPI_initialize+0x1cc>)
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	b2db      	uxtb	r3, r3
}
 8006472:	4618      	mov	r0, r3
 8006474:	3714      	adds	r7, #20
 8006476:	46bd      	mov	sp, r7
 8006478:	bd90      	pop	{r4, r7, pc}
 800647a:	bf00      	nop
 800647c:	20000020 	.word	0x20000020
 8006480:	200007bc 	.word	0x200007bc
 8006484:	2000077c 	.word	0x2000077c

08006488 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	4603      	mov	r3, r0
 8006490:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8006492:	79fb      	ldrb	r3, [r7, #7]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d001      	beq.n	800649c <USER_SPI_status+0x14>
 8006498:	2301      	movs	r3, #1
 800649a:	e002      	b.n	80064a2 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800649c:	4b04      	ldr	r3, [pc, #16]	; (80064b0 <USER_SPI_status+0x28>)
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	b2db      	uxtb	r3, r3
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	370c      	adds	r7, #12
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	20000020 	.word	0x20000020

080064b4 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60b9      	str	r1, [r7, #8]
 80064bc:	607a      	str	r2, [r7, #4]
 80064be:	603b      	str	r3, [r7, #0]
 80064c0:	4603      	mov	r3, r0
 80064c2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80064c4:	7bfb      	ldrb	r3, [r7, #15]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d102      	bne.n	80064d0 <USER_SPI_read+0x1c>
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d101      	bne.n	80064d4 <USER_SPI_read+0x20>
 80064d0:	2304      	movs	r3, #4
 80064d2:	e04d      	b.n	8006570 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80064d4:	4b28      	ldr	r3, [pc, #160]	; (8006578 <USER_SPI_read+0xc4>)
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	f003 0301 	and.w	r3, r3, #1
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d001      	beq.n	80064e6 <USER_SPI_read+0x32>
 80064e2:	2303      	movs	r3, #3
 80064e4:	e044      	b.n	8006570 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80064e6:	4b25      	ldr	r3, [pc, #148]	; (800657c <USER_SPI_read+0xc8>)
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	f003 0308 	and.w	r3, r3, #8
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d102      	bne.n	80064f8 <USER_SPI_read+0x44>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	025b      	lsls	r3, r3, #9
 80064f6:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d111      	bne.n	8006522 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80064fe:	6879      	ldr	r1, [r7, #4]
 8006500:	2011      	movs	r0, #17
 8006502:	f7ff fe66 	bl	80061d2 <send_cmd>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d129      	bne.n	8006560 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800650c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006510:	68b8      	ldr	r0, [r7, #8]
 8006512:	f7ff fe03 	bl	800611c <rcvr_datablock>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d021      	beq.n	8006560 <USER_SPI_read+0xac>
			count = 0;
 800651c:	2300      	movs	r3, #0
 800651e:	603b      	str	r3, [r7, #0]
 8006520:	e01e      	b.n	8006560 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8006522:	6879      	ldr	r1, [r7, #4]
 8006524:	2012      	movs	r0, #18
 8006526:	f7ff fe54 	bl	80061d2 <send_cmd>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d117      	bne.n	8006560 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8006530:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006534:	68b8      	ldr	r0, [r7, #8]
 8006536:	f7ff fdf1 	bl	800611c <rcvr_datablock>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00a      	beq.n	8006556 <USER_SPI_read+0xa2>
				buff += 512;
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006546:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	3b01      	subs	r3, #1
 800654c:	603b      	str	r3, [r7, #0]
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d1ed      	bne.n	8006530 <USER_SPI_read+0x7c>
 8006554:	e000      	b.n	8006558 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8006556:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8006558:	2100      	movs	r1, #0
 800655a:	200c      	movs	r0, #12
 800655c:	f7ff fe39 	bl	80061d2 <send_cmd>
		}
	}
	despiselect();
 8006560:	f7ff fdb4 	bl	80060cc <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	bf14      	ite	ne
 800656a:	2301      	movne	r3, #1
 800656c:	2300      	moveq	r3, #0
 800656e:	b2db      	uxtb	r3, r3
}
 8006570:	4618      	mov	r0, r3
 8006572:	3710      	adds	r7, #16
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}
 8006578:	20000020 	.word	0x20000020
 800657c:	2000077c 	.word	0x2000077c

08006580 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	60b9      	str	r1, [r7, #8]
 8006588:	607a      	str	r2, [r7, #4]
 800658a:	603b      	str	r3, [r7, #0]
 800658c:	4603      	mov	r3, r0
 800658e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006590:	7bfb      	ldrb	r3, [r7, #15]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d102      	bne.n	800659c <USER_SPI_write+0x1c>
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d101      	bne.n	80065a0 <USER_SPI_write+0x20>
 800659c:	2304      	movs	r3, #4
 800659e:	e063      	b.n	8006668 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80065a0:	4b33      	ldr	r3, [pc, #204]	; (8006670 <USER_SPI_write+0xf0>)
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	f003 0301 	and.w	r3, r3, #1
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d001      	beq.n	80065b2 <USER_SPI_write+0x32>
 80065ae:	2303      	movs	r3, #3
 80065b0:	e05a      	b.n	8006668 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80065b2:	4b2f      	ldr	r3, [pc, #188]	; (8006670 <USER_SPI_write+0xf0>)
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	f003 0304 	and.w	r3, r3, #4
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d001      	beq.n	80065c4 <USER_SPI_write+0x44>
 80065c0:	2302      	movs	r3, #2
 80065c2:	e051      	b.n	8006668 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80065c4:	4b2b      	ldr	r3, [pc, #172]	; (8006674 <USER_SPI_write+0xf4>)
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	f003 0308 	and.w	r3, r3, #8
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d102      	bne.n	80065d6 <USER_SPI_write+0x56>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	025b      	lsls	r3, r3, #9
 80065d4:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d110      	bne.n	80065fe <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80065dc:	6879      	ldr	r1, [r7, #4]
 80065de:	2018      	movs	r0, #24
 80065e0:	f7ff fdf7 	bl	80061d2 <send_cmd>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d136      	bne.n	8006658 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80065ea:	21fe      	movs	r1, #254	; 0xfe
 80065ec:	68b8      	ldr	r0, [r7, #8]
 80065ee:	f7ff fdbe 	bl	800616e <xmit_datablock>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d02f      	beq.n	8006658 <USER_SPI_write+0xd8>
			count = 0;
 80065f8:	2300      	movs	r3, #0
 80065fa:	603b      	str	r3, [r7, #0]
 80065fc:	e02c      	b.n	8006658 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80065fe:	4b1d      	ldr	r3, [pc, #116]	; (8006674 <USER_SPI_write+0xf4>)
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	f003 0306 	and.w	r3, r3, #6
 8006606:	2b00      	cmp	r3, #0
 8006608:	d003      	beq.n	8006612 <USER_SPI_write+0x92>
 800660a:	6839      	ldr	r1, [r7, #0]
 800660c:	2097      	movs	r0, #151	; 0x97
 800660e:	f7ff fde0 	bl	80061d2 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8006612:	6879      	ldr	r1, [r7, #4]
 8006614:	2019      	movs	r0, #25
 8006616:	f7ff fddc 	bl	80061d2 <send_cmd>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d11b      	bne.n	8006658 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8006620:	21fc      	movs	r1, #252	; 0xfc
 8006622:	68b8      	ldr	r0, [r7, #8]
 8006624:	f7ff fda3 	bl	800616e <xmit_datablock>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00a      	beq.n	8006644 <USER_SPI_write+0xc4>
				buff += 512;
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006634:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	3b01      	subs	r3, #1
 800663a:	603b      	str	r3, [r7, #0]
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d1ee      	bne.n	8006620 <USER_SPI_write+0xa0>
 8006642:	e000      	b.n	8006646 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8006644:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8006646:	21fd      	movs	r1, #253	; 0xfd
 8006648:	2000      	movs	r0, #0
 800664a:	f7ff fd90 	bl	800616e <xmit_datablock>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d101      	bne.n	8006658 <USER_SPI_write+0xd8>
 8006654:	2301      	movs	r3, #1
 8006656:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8006658:	f7ff fd38 	bl	80060cc <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	bf14      	ite	ne
 8006662:	2301      	movne	r3, #1
 8006664:	2300      	moveq	r3, #0
 8006666:	b2db      	uxtb	r3, r3
}
 8006668:	4618      	mov	r0, r3
 800666a:	3710      	adds	r7, #16
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}
 8006670:	20000020 	.word	0x20000020
 8006674:	2000077c 	.word	0x2000077c

08006678 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b08c      	sub	sp, #48	; 0x30
 800667c:	af00      	add	r7, sp, #0
 800667e:	4603      	mov	r3, r0
 8006680:	603a      	str	r2, [r7, #0]
 8006682:	71fb      	strb	r3, [r7, #7]
 8006684:	460b      	mov	r3, r1
 8006686:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8006688:	79fb      	ldrb	r3, [r7, #7]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d001      	beq.n	8006692 <USER_SPI_ioctl+0x1a>
 800668e:	2304      	movs	r3, #4
 8006690:	e15a      	b.n	8006948 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006692:	4baf      	ldr	r3, [pc, #700]	; (8006950 <USER_SPI_ioctl+0x2d8>)
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	b2db      	uxtb	r3, r3
 8006698:	f003 0301 	and.w	r3, r3, #1
 800669c:	2b00      	cmp	r3, #0
 800669e:	d001      	beq.n	80066a4 <USER_SPI_ioctl+0x2c>
 80066a0:	2303      	movs	r3, #3
 80066a2:	e151      	b.n	8006948 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 80066aa:	79bb      	ldrb	r3, [r7, #6]
 80066ac:	2b04      	cmp	r3, #4
 80066ae:	f200 8136 	bhi.w	800691e <USER_SPI_ioctl+0x2a6>
 80066b2:	a201      	add	r2, pc, #4	; (adr r2, 80066b8 <USER_SPI_ioctl+0x40>)
 80066b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b8:	080066cd 	.word	0x080066cd
 80066bc:	080066e1 	.word	0x080066e1
 80066c0:	0800691f 	.word	0x0800691f
 80066c4:	0800678d 	.word	0x0800678d
 80066c8:	08006883 	.word	0x08006883
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80066cc:	f7ff fd0c 	bl	80060e8 <spiselect>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	f000 8127 	beq.w	8006926 <USER_SPI_ioctl+0x2ae>
 80066d8:	2300      	movs	r3, #0
 80066da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80066de:	e122      	b.n	8006926 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80066e0:	2100      	movs	r1, #0
 80066e2:	2009      	movs	r0, #9
 80066e4:	f7ff fd75 	bl	80061d2 <send_cmd>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	f040 811d 	bne.w	800692a <USER_SPI_ioctl+0x2b2>
 80066f0:	f107 030c 	add.w	r3, r7, #12
 80066f4:	2110      	movs	r1, #16
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7ff fd10 	bl	800611c <rcvr_datablock>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	f000 8113 	beq.w	800692a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8006704:	7b3b      	ldrb	r3, [r7, #12]
 8006706:	099b      	lsrs	r3, r3, #6
 8006708:	b2db      	uxtb	r3, r3
 800670a:	2b01      	cmp	r3, #1
 800670c:	d111      	bne.n	8006732 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800670e:	7d7b      	ldrb	r3, [r7, #21]
 8006710:	461a      	mov	r2, r3
 8006712:	7d3b      	ldrb	r3, [r7, #20]
 8006714:	021b      	lsls	r3, r3, #8
 8006716:	4413      	add	r3, r2
 8006718:	461a      	mov	r2, r3
 800671a:	7cfb      	ldrb	r3, [r7, #19]
 800671c:	041b      	lsls	r3, r3, #16
 800671e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8006722:	4413      	add	r3, r2
 8006724:	3301      	adds	r3, #1
 8006726:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	029a      	lsls	r2, r3, #10
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	601a      	str	r2, [r3, #0]
 8006730:	e028      	b.n	8006784 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8006732:	7c7b      	ldrb	r3, [r7, #17]
 8006734:	f003 030f 	and.w	r3, r3, #15
 8006738:	b2da      	uxtb	r2, r3
 800673a:	7dbb      	ldrb	r3, [r7, #22]
 800673c:	09db      	lsrs	r3, r3, #7
 800673e:	b2db      	uxtb	r3, r3
 8006740:	4413      	add	r3, r2
 8006742:	b2da      	uxtb	r2, r3
 8006744:	7d7b      	ldrb	r3, [r7, #21]
 8006746:	005b      	lsls	r3, r3, #1
 8006748:	b2db      	uxtb	r3, r3
 800674a:	f003 0306 	and.w	r3, r3, #6
 800674e:	b2db      	uxtb	r3, r3
 8006750:	4413      	add	r3, r2
 8006752:	b2db      	uxtb	r3, r3
 8006754:	3302      	adds	r3, #2
 8006756:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800675a:	7d3b      	ldrb	r3, [r7, #20]
 800675c:	099b      	lsrs	r3, r3, #6
 800675e:	b2db      	uxtb	r3, r3
 8006760:	461a      	mov	r2, r3
 8006762:	7cfb      	ldrb	r3, [r7, #19]
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	441a      	add	r2, r3
 8006768:	7cbb      	ldrb	r3, [r7, #18]
 800676a:	029b      	lsls	r3, r3, #10
 800676c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006770:	4413      	add	r3, r2
 8006772:	3301      	adds	r3, #1
 8006774:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8006776:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800677a:	3b09      	subs	r3, #9
 800677c:	69fa      	ldr	r2, [r7, #28]
 800677e:	409a      	lsls	r2, r3
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8006784:	2300      	movs	r3, #0
 8006786:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800678a:	e0ce      	b.n	800692a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800678c:	4b71      	ldr	r3, [pc, #452]	; (8006954 <USER_SPI_ioctl+0x2dc>)
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	f003 0304 	and.w	r3, r3, #4
 8006794:	2b00      	cmp	r3, #0
 8006796:	d031      	beq.n	80067fc <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8006798:	2100      	movs	r1, #0
 800679a:	208d      	movs	r0, #141	; 0x8d
 800679c:	f7ff fd19 	bl	80061d2 <send_cmd>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f040 80c3 	bne.w	800692e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80067a8:	20ff      	movs	r0, #255	; 0xff
 80067aa:	f7ff fc21 	bl	8005ff0 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80067ae:	f107 030c 	add.w	r3, r7, #12
 80067b2:	2110      	movs	r1, #16
 80067b4:	4618      	mov	r0, r3
 80067b6:	f7ff fcb1 	bl	800611c <rcvr_datablock>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	f000 80b6 	beq.w	800692e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80067c2:	2330      	movs	r3, #48	; 0x30
 80067c4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80067c8:	e007      	b.n	80067da <USER_SPI_ioctl+0x162>
 80067ca:	20ff      	movs	r0, #255	; 0xff
 80067cc:	f7ff fc10 	bl	8005ff0 <xchg_spi>
 80067d0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80067d4:	3b01      	subs	r3, #1
 80067d6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80067da:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d1f3      	bne.n	80067ca <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80067e2:	7dbb      	ldrb	r3, [r7, #22]
 80067e4:	091b      	lsrs	r3, r3, #4
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	461a      	mov	r2, r3
 80067ea:	2310      	movs	r3, #16
 80067ec:	fa03 f202 	lsl.w	r2, r3, r2
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80067f4:	2300      	movs	r3, #0
 80067f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80067fa:	e098      	b.n	800692e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80067fc:	2100      	movs	r1, #0
 80067fe:	2009      	movs	r0, #9
 8006800:	f7ff fce7 	bl	80061d2 <send_cmd>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	f040 8091 	bne.w	800692e <USER_SPI_ioctl+0x2b6>
 800680c:	f107 030c 	add.w	r3, r7, #12
 8006810:	2110      	movs	r1, #16
 8006812:	4618      	mov	r0, r3
 8006814:	f7ff fc82 	bl	800611c <rcvr_datablock>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	f000 8087 	beq.w	800692e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8006820:	4b4c      	ldr	r3, [pc, #304]	; (8006954 <USER_SPI_ioctl+0x2dc>)
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	f003 0302 	and.w	r3, r3, #2
 8006828:	2b00      	cmp	r3, #0
 800682a:	d012      	beq.n	8006852 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800682c:	7dbb      	ldrb	r3, [r7, #22]
 800682e:	005b      	lsls	r3, r3, #1
 8006830:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8006834:	7dfa      	ldrb	r2, [r7, #23]
 8006836:	09d2      	lsrs	r2, r2, #7
 8006838:	b2d2      	uxtb	r2, r2
 800683a:	4413      	add	r3, r2
 800683c:	1c5a      	adds	r2, r3, #1
 800683e:	7e7b      	ldrb	r3, [r7, #25]
 8006840:	099b      	lsrs	r3, r3, #6
 8006842:	b2db      	uxtb	r3, r3
 8006844:	3b01      	subs	r3, #1
 8006846:	fa02 f303 	lsl.w	r3, r2, r3
 800684a:	461a      	mov	r2, r3
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	601a      	str	r2, [r3, #0]
 8006850:	e013      	b.n	800687a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8006852:	7dbb      	ldrb	r3, [r7, #22]
 8006854:	109b      	asrs	r3, r3, #2
 8006856:	b29b      	uxth	r3, r3
 8006858:	f003 031f 	and.w	r3, r3, #31
 800685c:	3301      	adds	r3, #1
 800685e:	7dfa      	ldrb	r2, [r7, #23]
 8006860:	00d2      	lsls	r2, r2, #3
 8006862:	f002 0218 	and.w	r2, r2, #24
 8006866:	7df9      	ldrb	r1, [r7, #23]
 8006868:	0949      	lsrs	r1, r1, #5
 800686a:	b2c9      	uxtb	r1, r1
 800686c:	440a      	add	r2, r1
 800686e:	3201      	adds	r2, #1
 8006870:	fb02 f303 	mul.w	r3, r2, r3
 8006874:	461a      	mov	r2, r3
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800687a:	2300      	movs	r3, #0
 800687c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8006880:	e055      	b.n	800692e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8006882:	4b34      	ldr	r3, [pc, #208]	; (8006954 <USER_SPI_ioctl+0x2dc>)
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	f003 0306 	and.w	r3, r3, #6
 800688a:	2b00      	cmp	r3, #0
 800688c:	d051      	beq.n	8006932 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800688e:	f107 020c 	add.w	r2, r7, #12
 8006892:	79fb      	ldrb	r3, [r7, #7]
 8006894:	210b      	movs	r1, #11
 8006896:	4618      	mov	r0, r3
 8006898:	f7ff feee 	bl	8006678 <USER_SPI_ioctl>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d149      	bne.n	8006936 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80068a2:	7b3b      	ldrb	r3, [r7, #12]
 80068a4:	099b      	lsrs	r3, r3, #6
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d104      	bne.n	80068b6 <USER_SPI_ioctl+0x23e>
 80068ac:	7dbb      	ldrb	r3, [r7, #22]
 80068ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d041      	beq.n	800693a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	623b      	str	r3, [r7, #32]
 80068ba:	6a3b      	ldr	r3, [r7, #32]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	62bb      	str	r3, [r7, #40]	; 0x28
 80068c0:	6a3b      	ldr	r3, [r7, #32]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 80068c6:	4b23      	ldr	r3, [pc, #140]	; (8006954 <USER_SPI_ioctl+0x2dc>)
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	f003 0308 	and.w	r3, r3, #8
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d105      	bne.n	80068de <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80068d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d4:	025b      	lsls	r3, r3, #9
 80068d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80068d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068da:	025b      	lsls	r3, r3, #9
 80068dc:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80068de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068e0:	2020      	movs	r0, #32
 80068e2:	f7ff fc76 	bl	80061d2 <send_cmd>
 80068e6:	4603      	mov	r3, r0
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d128      	bne.n	800693e <USER_SPI_ioctl+0x2c6>
 80068ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068ee:	2021      	movs	r0, #33	; 0x21
 80068f0:	f7ff fc6f 	bl	80061d2 <send_cmd>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d121      	bne.n	800693e <USER_SPI_ioctl+0x2c6>
 80068fa:	2100      	movs	r1, #0
 80068fc:	2026      	movs	r0, #38	; 0x26
 80068fe:	f7ff fc68 	bl	80061d2 <send_cmd>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d11a      	bne.n	800693e <USER_SPI_ioctl+0x2c6>
 8006908:	f247 5030 	movw	r0, #30000	; 0x7530
 800690c:	f7ff fbbb 	bl	8006086 <wait_ready>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d013      	beq.n	800693e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8006916:	2300      	movs	r3, #0
 8006918:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800691c:	e00f      	b.n	800693e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800691e:	2304      	movs	r3, #4
 8006920:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006924:	e00c      	b.n	8006940 <USER_SPI_ioctl+0x2c8>
		break;
 8006926:	bf00      	nop
 8006928:	e00a      	b.n	8006940 <USER_SPI_ioctl+0x2c8>
		break;
 800692a:	bf00      	nop
 800692c:	e008      	b.n	8006940 <USER_SPI_ioctl+0x2c8>
		break;
 800692e:	bf00      	nop
 8006930:	e006      	b.n	8006940 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8006932:	bf00      	nop
 8006934:	e004      	b.n	8006940 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006936:	bf00      	nop
 8006938:	e002      	b.n	8006940 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800693a:	bf00      	nop
 800693c:	e000      	b.n	8006940 <USER_SPI_ioctl+0x2c8>
		break;
 800693e:	bf00      	nop
	}

	despiselect();
 8006940:	f7ff fbc4 	bl	80060cc <despiselect>

	return res;
 8006944:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006948:	4618      	mov	r0, r3
 800694a:	3730      	adds	r7, #48	; 0x30
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	20000020 	.word	0x20000020
 8006954:	2000077c 	.word	0x2000077c

08006958 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	4603      	mov	r3, r0
 8006960:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006962:	79fb      	ldrb	r3, [r7, #7]
 8006964:	4a08      	ldr	r2, [pc, #32]	; (8006988 <disk_status+0x30>)
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	4413      	add	r3, r2
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	79fa      	ldrb	r2, [r7, #7]
 8006970:	4905      	ldr	r1, [pc, #20]	; (8006988 <disk_status+0x30>)
 8006972:	440a      	add	r2, r1
 8006974:	7a12      	ldrb	r2, [r2, #8]
 8006976:	4610      	mov	r0, r2
 8006978:	4798      	blx	r3
 800697a:	4603      	mov	r3, r0
 800697c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800697e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006980:	4618      	mov	r0, r3
 8006982:	3710      	adds	r7, #16
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	200007a8 	.word	0x200007a8

0800698c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	4603      	mov	r3, r0
 8006994:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006996:	2300      	movs	r3, #0
 8006998:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800699a:	79fb      	ldrb	r3, [r7, #7]
 800699c:	4a0d      	ldr	r2, [pc, #52]	; (80069d4 <disk_initialize+0x48>)
 800699e:	5cd3      	ldrb	r3, [r2, r3]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d111      	bne.n	80069c8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80069a4:	79fb      	ldrb	r3, [r7, #7]
 80069a6:	4a0b      	ldr	r2, [pc, #44]	; (80069d4 <disk_initialize+0x48>)
 80069a8:	2101      	movs	r1, #1
 80069aa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80069ac:	79fb      	ldrb	r3, [r7, #7]
 80069ae:	4a09      	ldr	r2, [pc, #36]	; (80069d4 <disk_initialize+0x48>)
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	4413      	add	r3, r2
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	79fa      	ldrb	r2, [r7, #7]
 80069ba:	4906      	ldr	r1, [pc, #24]	; (80069d4 <disk_initialize+0x48>)
 80069bc:	440a      	add	r2, r1
 80069be:	7a12      	ldrb	r2, [r2, #8]
 80069c0:	4610      	mov	r0, r2
 80069c2:	4798      	blx	r3
 80069c4:	4603      	mov	r3, r0
 80069c6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80069c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	200007a8 	.word	0x200007a8

080069d8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80069d8:	b590      	push	{r4, r7, lr}
 80069da:	b087      	sub	sp, #28
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60b9      	str	r1, [r7, #8]
 80069e0:	607a      	str	r2, [r7, #4]
 80069e2:	603b      	str	r3, [r7, #0]
 80069e4:	4603      	mov	r3, r0
 80069e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80069e8:	7bfb      	ldrb	r3, [r7, #15]
 80069ea:	4a0a      	ldr	r2, [pc, #40]	; (8006a14 <disk_read+0x3c>)
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	4413      	add	r3, r2
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	689c      	ldr	r4, [r3, #8]
 80069f4:	7bfb      	ldrb	r3, [r7, #15]
 80069f6:	4a07      	ldr	r2, [pc, #28]	; (8006a14 <disk_read+0x3c>)
 80069f8:	4413      	add	r3, r2
 80069fa:	7a18      	ldrb	r0, [r3, #8]
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	68b9      	ldr	r1, [r7, #8]
 8006a02:	47a0      	blx	r4
 8006a04:	4603      	mov	r3, r0
 8006a06:	75fb      	strb	r3, [r7, #23]
  return res;
 8006a08:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	371c      	adds	r7, #28
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd90      	pop	{r4, r7, pc}
 8006a12:	bf00      	nop
 8006a14:	200007a8 	.word	0x200007a8

08006a18 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006a18:	b590      	push	{r4, r7, lr}
 8006a1a:	b087      	sub	sp, #28
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60b9      	str	r1, [r7, #8]
 8006a20:	607a      	str	r2, [r7, #4]
 8006a22:	603b      	str	r3, [r7, #0]
 8006a24:	4603      	mov	r3, r0
 8006a26:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006a28:	7bfb      	ldrb	r3, [r7, #15]
 8006a2a:	4a0a      	ldr	r2, [pc, #40]	; (8006a54 <disk_write+0x3c>)
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	4413      	add	r3, r2
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	68dc      	ldr	r4, [r3, #12]
 8006a34:	7bfb      	ldrb	r3, [r7, #15]
 8006a36:	4a07      	ldr	r2, [pc, #28]	; (8006a54 <disk_write+0x3c>)
 8006a38:	4413      	add	r3, r2
 8006a3a:	7a18      	ldrb	r0, [r3, #8]
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	68b9      	ldr	r1, [r7, #8]
 8006a42:	47a0      	blx	r4
 8006a44:	4603      	mov	r3, r0
 8006a46:	75fb      	strb	r3, [r7, #23]
  return res;
 8006a48:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	371c      	adds	r7, #28
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd90      	pop	{r4, r7, pc}
 8006a52:	bf00      	nop
 8006a54:	200007a8 	.word	0x200007a8

08006a58 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	4603      	mov	r3, r0
 8006a60:	603a      	str	r2, [r7, #0]
 8006a62:	71fb      	strb	r3, [r7, #7]
 8006a64:	460b      	mov	r3, r1
 8006a66:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006a68:	79fb      	ldrb	r3, [r7, #7]
 8006a6a:	4a09      	ldr	r2, [pc, #36]	; (8006a90 <disk_ioctl+0x38>)
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	4413      	add	r3, r2
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	79fa      	ldrb	r2, [r7, #7]
 8006a76:	4906      	ldr	r1, [pc, #24]	; (8006a90 <disk_ioctl+0x38>)
 8006a78:	440a      	add	r2, r1
 8006a7a:	7a10      	ldrb	r0, [r2, #8]
 8006a7c:	79b9      	ldrb	r1, [r7, #6]
 8006a7e:	683a      	ldr	r2, [r7, #0]
 8006a80:	4798      	blx	r3
 8006a82:	4603      	mov	r3, r0
 8006a84:	73fb      	strb	r3, [r7, #15]
  return res;
 8006a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3710      	adds	r7, #16
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	200007a8 	.word	0x200007a8

08006a94 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006a94:	b480      	push	{r7}
 8006a96:	b085      	sub	sp, #20
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006aa4:	89fb      	ldrh	r3, [r7, #14]
 8006aa6:	021b      	lsls	r3, r3, #8
 8006aa8:	b21a      	sxth	r2, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	b21b      	sxth	r3, r3
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	b21b      	sxth	r3, r3
 8006ab4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006ab6:	89fb      	ldrh	r3, [r7, #14]
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3714      	adds	r7, #20
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b085      	sub	sp, #20
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	3303      	adds	r3, #3
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	021b      	lsls	r3, r3, #8
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	3202      	adds	r2, #2
 8006adc:	7812      	ldrb	r2, [r2, #0]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	021b      	lsls	r3, r3, #8
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	3201      	adds	r2, #1
 8006aea:	7812      	ldrb	r2, [r2, #0]
 8006aec:	4313      	orrs	r3, r2
 8006aee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	021b      	lsls	r3, r3, #8
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	7812      	ldrb	r2, [r2, #0]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	60fb      	str	r3, [r7, #12]
	return rv;
 8006afc:	68fb      	ldr	r3, [r7, #12]
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3714      	adds	r7, #20
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr

08006b0a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006b0a:	b480      	push	{r7}
 8006b0c:	b083      	sub	sp, #12
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
 8006b12:	460b      	mov	r3, r1
 8006b14:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	1c5a      	adds	r2, r3, #1
 8006b1a:	607a      	str	r2, [r7, #4]
 8006b1c:	887a      	ldrh	r2, [r7, #2]
 8006b1e:	b2d2      	uxtb	r2, r2
 8006b20:	701a      	strb	r2, [r3, #0]
 8006b22:	887b      	ldrh	r3, [r7, #2]
 8006b24:	0a1b      	lsrs	r3, r3, #8
 8006b26:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	1c5a      	adds	r2, r3, #1
 8006b2c:	607a      	str	r2, [r7, #4]
 8006b2e:	887a      	ldrh	r2, [r7, #2]
 8006b30:	b2d2      	uxtb	r2, r2
 8006b32:	701a      	strb	r2, [r3, #0]
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	1c5a      	adds	r2, r3, #1
 8006b4e:	607a      	str	r2, [r7, #4]
 8006b50:	683a      	ldr	r2, [r7, #0]
 8006b52:	b2d2      	uxtb	r2, r2
 8006b54:	701a      	strb	r2, [r3, #0]
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	0a1b      	lsrs	r3, r3, #8
 8006b5a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	1c5a      	adds	r2, r3, #1
 8006b60:	607a      	str	r2, [r7, #4]
 8006b62:	683a      	ldr	r2, [r7, #0]
 8006b64:	b2d2      	uxtb	r2, r2
 8006b66:	701a      	strb	r2, [r3, #0]
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	0a1b      	lsrs	r3, r3, #8
 8006b6c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	1c5a      	adds	r2, r3, #1
 8006b72:	607a      	str	r2, [r7, #4]
 8006b74:	683a      	ldr	r2, [r7, #0]
 8006b76:	b2d2      	uxtb	r2, r2
 8006b78:	701a      	strb	r2, [r3, #0]
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	0a1b      	lsrs	r3, r3, #8
 8006b7e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	1c5a      	adds	r2, r3, #1
 8006b84:	607a      	str	r2, [r7, #4]
 8006b86:	683a      	ldr	r2, [r7, #0]
 8006b88:	b2d2      	uxtb	r2, r2
 8006b8a:	701a      	strb	r2, [r3, #0]
}
 8006b8c:	bf00      	nop
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006b98:	b480      	push	{r7}
 8006b9a:	b087      	sub	sp, #28
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	60b9      	str	r1, [r7, #8]
 8006ba2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00d      	beq.n	8006bce <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006bb2:	693a      	ldr	r2, [r7, #16]
 8006bb4:	1c53      	adds	r3, r2, #1
 8006bb6:	613b      	str	r3, [r7, #16]
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	1c59      	adds	r1, r3, #1
 8006bbc:	6179      	str	r1, [r7, #20]
 8006bbe:	7812      	ldrb	r2, [r2, #0]
 8006bc0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	607b      	str	r3, [r7, #4]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d1f1      	bne.n	8006bb2 <mem_cpy+0x1a>
	}
}
 8006bce:	bf00      	nop
 8006bd0:	371c      	adds	r7, #28
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr

08006bda <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006bda:	b480      	push	{r7}
 8006bdc:	b087      	sub	sp, #28
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	60f8      	str	r0, [r7, #12]
 8006be2:	60b9      	str	r1, [r7, #8]
 8006be4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	1c5a      	adds	r2, r3, #1
 8006bee:	617a      	str	r2, [r7, #20]
 8006bf0:	68ba      	ldr	r2, [r7, #8]
 8006bf2:	b2d2      	uxtb	r2, r2
 8006bf4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	607b      	str	r3, [r7, #4]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1f3      	bne.n	8006bea <mem_set+0x10>
}
 8006c02:	bf00      	nop
 8006c04:	371c      	adds	r7, #28
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr

08006c0e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006c0e:	b480      	push	{r7}
 8006c10:	b089      	sub	sp, #36	; 0x24
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	60f8      	str	r0, [r7, #12]
 8006c16:	60b9      	str	r1, [r7, #8]
 8006c18:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	61fb      	str	r3, [r7, #28]
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006c22:	2300      	movs	r3, #0
 8006c24:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	1c5a      	adds	r2, r3, #1
 8006c2a:	61fa      	str	r2, [r7, #28]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	4619      	mov	r1, r3
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	1c5a      	adds	r2, r3, #1
 8006c34:	61ba      	str	r2, [r7, #24]
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	1acb      	subs	r3, r1, r3
 8006c3a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	607b      	str	r3, [r7, #4]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d002      	beq.n	8006c4e <mem_cmp+0x40>
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d0eb      	beq.n	8006c26 <mem_cmp+0x18>

	return r;
 8006c4e:	697b      	ldr	r3, [r7, #20]
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3724      	adds	r7, #36	; 0x24
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006c66:	e002      	b.n	8006c6e <chk_chr+0x12>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	607b      	str	r3, [r7, #4]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d005      	beq.n	8006c82 <chk_chr+0x26>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d1f2      	bne.n	8006c68 <chk_chr+0xc>
	return *str;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	781b      	ldrb	r3, [r3, #0]
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	370c      	adds	r7, #12
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
	...

08006c94 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	60bb      	str	r3, [r7, #8]
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	60fb      	str	r3, [r7, #12]
 8006ca6:	e029      	b.n	8006cfc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006ca8:	4a27      	ldr	r2, [pc, #156]	; (8006d48 <chk_lock+0xb4>)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	011b      	lsls	r3, r3, #4
 8006cae:	4413      	add	r3, r2
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d01d      	beq.n	8006cf2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006cb6:	4a24      	ldr	r2, [pc, #144]	; (8006d48 <chk_lock+0xb4>)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	011b      	lsls	r3, r3, #4
 8006cbc:	4413      	add	r3, r2
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d116      	bne.n	8006cf6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006cc8:	4a1f      	ldr	r2, [pc, #124]	; (8006d48 <chk_lock+0xb4>)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	011b      	lsls	r3, r3, #4
 8006cce:	4413      	add	r3, r2
 8006cd0:	3304      	adds	r3, #4
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d10c      	bne.n	8006cf6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006cdc:	4a1a      	ldr	r2, [pc, #104]	; (8006d48 <chk_lock+0xb4>)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	011b      	lsls	r3, r3, #4
 8006ce2:	4413      	add	r3, r2
 8006ce4:	3308      	adds	r3, #8
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d102      	bne.n	8006cf6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006cf0:	e007      	b.n	8006d02 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	60fb      	str	r3, [r7, #12]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d9d2      	bls.n	8006ca8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	d109      	bne.n	8006d1c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d102      	bne.n	8006d14 <chk_lock+0x80>
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	2b02      	cmp	r3, #2
 8006d12:	d101      	bne.n	8006d18 <chk_lock+0x84>
 8006d14:	2300      	movs	r3, #0
 8006d16:	e010      	b.n	8006d3a <chk_lock+0xa6>
 8006d18:	2312      	movs	r3, #18
 8006d1a:	e00e      	b.n	8006d3a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d108      	bne.n	8006d34 <chk_lock+0xa0>
 8006d22:	4a09      	ldr	r2, [pc, #36]	; (8006d48 <chk_lock+0xb4>)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	011b      	lsls	r3, r3, #4
 8006d28:	4413      	add	r3, r2
 8006d2a:	330c      	adds	r3, #12
 8006d2c:	881b      	ldrh	r3, [r3, #0]
 8006d2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d32:	d101      	bne.n	8006d38 <chk_lock+0xa4>
 8006d34:	2310      	movs	r3, #16
 8006d36:	e000      	b.n	8006d3a <chk_lock+0xa6>
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3714      	adds	r7, #20
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	20000788 	.word	0x20000788

08006d4c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006d52:	2300      	movs	r3, #0
 8006d54:	607b      	str	r3, [r7, #4]
 8006d56:	e002      	b.n	8006d5e <enq_lock+0x12>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	607b      	str	r3, [r7, #4]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d806      	bhi.n	8006d72 <enq_lock+0x26>
 8006d64:	4a09      	ldr	r2, [pc, #36]	; (8006d8c <enq_lock+0x40>)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	011b      	lsls	r3, r3, #4
 8006d6a:	4413      	add	r3, r2
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d1f2      	bne.n	8006d58 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2b02      	cmp	r3, #2
 8006d76:	bf14      	ite	ne
 8006d78:	2301      	movne	r3, #1
 8006d7a:	2300      	moveq	r3, #0
 8006d7c:	b2db      	uxtb	r3, r3
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	370c      	adds	r7, #12
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	20000788 	.word	0x20000788

08006d90 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b085      	sub	sp, #20
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	60fb      	str	r3, [r7, #12]
 8006d9e:	e01f      	b.n	8006de0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006da0:	4a41      	ldr	r2, [pc, #260]	; (8006ea8 <inc_lock+0x118>)
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	011b      	lsls	r3, r3, #4
 8006da6:	4413      	add	r3, r2
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d113      	bne.n	8006dda <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006db2:	4a3d      	ldr	r2, [pc, #244]	; (8006ea8 <inc_lock+0x118>)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	011b      	lsls	r3, r3, #4
 8006db8:	4413      	add	r3, r2
 8006dba:	3304      	adds	r3, #4
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d109      	bne.n	8006dda <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006dc6:	4a38      	ldr	r2, [pc, #224]	; (8006ea8 <inc_lock+0x118>)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	011b      	lsls	r3, r3, #4
 8006dcc:	4413      	add	r3, r2
 8006dce:	3308      	adds	r3, #8
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d006      	beq.n	8006de8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	60fb      	str	r3, [r7, #12]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d9dc      	bls.n	8006da0 <inc_lock+0x10>
 8006de6:	e000      	b.n	8006dea <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006de8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2b02      	cmp	r3, #2
 8006dee:	d132      	bne.n	8006e56 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006df0:	2300      	movs	r3, #0
 8006df2:	60fb      	str	r3, [r7, #12]
 8006df4:	e002      	b.n	8006dfc <inc_lock+0x6c>
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	60fb      	str	r3, [r7, #12]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d806      	bhi.n	8006e10 <inc_lock+0x80>
 8006e02:	4a29      	ldr	r2, [pc, #164]	; (8006ea8 <inc_lock+0x118>)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	011b      	lsls	r3, r3, #4
 8006e08:	4413      	add	r3, r2
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d1f2      	bne.n	8006df6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	d101      	bne.n	8006e1a <inc_lock+0x8a>
 8006e16:	2300      	movs	r3, #0
 8006e18:	e040      	b.n	8006e9c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	4922      	ldr	r1, [pc, #136]	; (8006ea8 <inc_lock+0x118>)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	011b      	lsls	r3, r3, #4
 8006e24:	440b      	add	r3, r1
 8006e26:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	689a      	ldr	r2, [r3, #8]
 8006e2c:	491e      	ldr	r1, [pc, #120]	; (8006ea8 <inc_lock+0x118>)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	011b      	lsls	r3, r3, #4
 8006e32:	440b      	add	r3, r1
 8006e34:	3304      	adds	r3, #4
 8006e36:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	695a      	ldr	r2, [r3, #20]
 8006e3c:	491a      	ldr	r1, [pc, #104]	; (8006ea8 <inc_lock+0x118>)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	011b      	lsls	r3, r3, #4
 8006e42:	440b      	add	r3, r1
 8006e44:	3308      	adds	r3, #8
 8006e46:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006e48:	4a17      	ldr	r2, [pc, #92]	; (8006ea8 <inc_lock+0x118>)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	011b      	lsls	r3, r3, #4
 8006e4e:	4413      	add	r3, r2
 8006e50:	330c      	adds	r3, #12
 8006e52:	2200      	movs	r2, #0
 8006e54:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d009      	beq.n	8006e70 <inc_lock+0xe0>
 8006e5c:	4a12      	ldr	r2, [pc, #72]	; (8006ea8 <inc_lock+0x118>)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	011b      	lsls	r3, r3, #4
 8006e62:	4413      	add	r3, r2
 8006e64:	330c      	adds	r3, #12
 8006e66:	881b      	ldrh	r3, [r3, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d001      	beq.n	8006e70 <inc_lock+0xe0>
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	e015      	b.n	8006e9c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d108      	bne.n	8006e88 <inc_lock+0xf8>
 8006e76:	4a0c      	ldr	r2, [pc, #48]	; (8006ea8 <inc_lock+0x118>)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	011b      	lsls	r3, r3, #4
 8006e7c:	4413      	add	r3, r2
 8006e7e:	330c      	adds	r3, #12
 8006e80:	881b      	ldrh	r3, [r3, #0]
 8006e82:	3301      	adds	r3, #1
 8006e84:	b29a      	uxth	r2, r3
 8006e86:	e001      	b.n	8006e8c <inc_lock+0xfc>
 8006e88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e8c:	4906      	ldr	r1, [pc, #24]	; (8006ea8 <inc_lock+0x118>)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	011b      	lsls	r3, r3, #4
 8006e92:	440b      	add	r3, r1
 8006e94:	330c      	adds	r3, #12
 8006e96:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	3301      	adds	r3, #1
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3714      	adds	r7, #20
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr
 8006ea8:	20000788 	.word	0x20000788

08006eac <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b085      	sub	sp, #20
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	607b      	str	r3, [r7, #4]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d825      	bhi.n	8006f0c <dec_lock+0x60>
		n = Files[i].ctr;
 8006ec0:	4a17      	ldr	r2, [pc, #92]	; (8006f20 <dec_lock+0x74>)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	011b      	lsls	r3, r3, #4
 8006ec6:	4413      	add	r3, r2
 8006ec8:	330c      	adds	r3, #12
 8006eca:	881b      	ldrh	r3, [r3, #0]
 8006ecc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006ece:	89fb      	ldrh	r3, [r7, #14]
 8006ed0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ed4:	d101      	bne.n	8006eda <dec_lock+0x2e>
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006eda:	89fb      	ldrh	r3, [r7, #14]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d002      	beq.n	8006ee6 <dec_lock+0x3a>
 8006ee0:	89fb      	ldrh	r3, [r7, #14]
 8006ee2:	3b01      	subs	r3, #1
 8006ee4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006ee6:	4a0e      	ldr	r2, [pc, #56]	; (8006f20 <dec_lock+0x74>)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	011b      	lsls	r3, r3, #4
 8006eec:	4413      	add	r3, r2
 8006eee:	330c      	adds	r3, #12
 8006ef0:	89fa      	ldrh	r2, [r7, #14]
 8006ef2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006ef4:	89fb      	ldrh	r3, [r7, #14]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d105      	bne.n	8006f06 <dec_lock+0x5a>
 8006efa:	4a09      	ldr	r2, [pc, #36]	; (8006f20 <dec_lock+0x74>)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	011b      	lsls	r3, r3, #4
 8006f00:	4413      	add	r3, r2
 8006f02:	2200      	movs	r2, #0
 8006f04:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006f06:	2300      	movs	r3, #0
 8006f08:	737b      	strb	r3, [r7, #13]
 8006f0a:	e001      	b.n	8006f10 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006f0c:	2302      	movs	r3, #2
 8006f0e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006f10:	7b7b      	ldrb	r3, [r7, #13]
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3714      	adds	r7, #20
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	20000788 	.word	0x20000788

08006f24 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b085      	sub	sp, #20
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	60fb      	str	r3, [r7, #12]
 8006f30:	e010      	b.n	8006f54 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006f32:	4a0d      	ldr	r2, [pc, #52]	; (8006f68 <clear_lock+0x44>)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	011b      	lsls	r3, r3, #4
 8006f38:	4413      	add	r3, r2
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d105      	bne.n	8006f4e <clear_lock+0x2a>
 8006f42:	4a09      	ldr	r2, [pc, #36]	; (8006f68 <clear_lock+0x44>)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	011b      	lsls	r3, r3, #4
 8006f48:	4413      	add	r3, r2
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	3301      	adds	r3, #1
 8006f52:	60fb      	str	r3, [r7, #12]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d9eb      	bls.n	8006f32 <clear_lock+0xe>
	}
}
 8006f5a:	bf00      	nop
 8006f5c:	3714      	adds	r7, #20
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	20000788 	.word	0x20000788

08006f6c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b086      	sub	sp, #24
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006f74:	2300      	movs	r3, #0
 8006f76:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	78db      	ldrb	r3, [r3, #3]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d034      	beq.n	8006fea <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f84:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	7858      	ldrb	r0, [r3, #1]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006f90:	2301      	movs	r3, #1
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	f7ff fd40 	bl	8006a18 <disk_write>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d002      	beq.n	8006fa4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	73fb      	strb	r3, [r7, #15]
 8006fa2:	e022      	b.n	8006fea <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a1b      	ldr	r3, [r3, #32]
 8006fae:	697a      	ldr	r2, [r7, #20]
 8006fb0:	1ad2      	subs	r2, r2, r3
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	699b      	ldr	r3, [r3, #24]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d217      	bcs.n	8006fea <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	789b      	ldrb	r3, [r3, #2]
 8006fbe:	613b      	str	r3, [r7, #16]
 8006fc0:	e010      	b.n	8006fe4 <sync_window+0x78>
					wsect += fs->fsize;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	699b      	ldr	r3, [r3, #24]
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	4413      	add	r3, r2
 8006fca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	7858      	ldrb	r0, [r3, #1]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	697a      	ldr	r2, [r7, #20]
 8006fda:	f7ff fd1d 	bl	8006a18 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	613b      	str	r3, [r7, #16]
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d8eb      	bhi.n	8006fc2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3718      	adds	r7, #24
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006ffe:	2300      	movs	r3, #0
 8007000:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007006:	683a      	ldr	r2, [r7, #0]
 8007008:	429a      	cmp	r2, r3
 800700a:	d01b      	beq.n	8007044 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f7ff ffad 	bl	8006f6c <sync_window>
 8007012:	4603      	mov	r3, r0
 8007014:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007016:	7bfb      	ldrb	r3, [r7, #15]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d113      	bne.n	8007044 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	7858      	ldrb	r0, [r3, #1]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007026:	2301      	movs	r3, #1
 8007028:	683a      	ldr	r2, [r7, #0]
 800702a:	f7ff fcd5 	bl	80069d8 <disk_read>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d004      	beq.n	800703e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007034:	f04f 33ff 	mov.w	r3, #4294967295
 8007038:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800703a:	2301      	movs	r3, #1
 800703c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	683a      	ldr	r2, [r7, #0]
 8007042:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8007044:	7bfb      	ldrb	r3, [r7, #15]
}
 8007046:	4618      	mov	r0, r3
 8007048:	3710      	adds	r7, #16
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
	...

08007050 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f7ff ff87 	bl	8006f6c <sync_window>
 800705e:	4603      	mov	r3, r0
 8007060:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007062:	7bfb      	ldrb	r3, [r7, #15]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d158      	bne.n	800711a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	2b03      	cmp	r3, #3
 800706e:	d148      	bne.n	8007102 <sync_fs+0xb2>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	791b      	ldrb	r3, [r3, #4]
 8007074:	2b01      	cmp	r3, #1
 8007076:	d144      	bne.n	8007102 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	3330      	adds	r3, #48	; 0x30
 800707c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007080:	2100      	movs	r1, #0
 8007082:	4618      	mov	r0, r3
 8007084:	f7ff fda9 	bl	8006bda <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	3330      	adds	r3, #48	; 0x30
 800708c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007090:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007094:	4618      	mov	r0, r3
 8007096:	f7ff fd38 	bl	8006b0a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	3330      	adds	r3, #48	; 0x30
 800709e:	4921      	ldr	r1, [pc, #132]	; (8007124 <sync_fs+0xd4>)
 80070a0:	4618      	mov	r0, r3
 80070a2:	f7ff fd4d 	bl	8006b40 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	3330      	adds	r3, #48	; 0x30
 80070aa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80070ae:	491e      	ldr	r1, [pc, #120]	; (8007128 <sync_fs+0xd8>)
 80070b0:	4618      	mov	r0, r3
 80070b2:	f7ff fd45 	bl	8006b40 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	3330      	adds	r3, #48	; 0x30
 80070ba:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	4619      	mov	r1, r3
 80070c4:	4610      	mov	r0, r2
 80070c6:	f7ff fd3b 	bl	8006b40 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	3330      	adds	r3, #48	; 0x30
 80070ce:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	68db      	ldr	r3, [r3, #12]
 80070d6:	4619      	mov	r1, r3
 80070d8:	4610      	mov	r0, r2
 80070da:	f7ff fd31 	bl	8006b40 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	69db      	ldr	r3, [r3, #28]
 80070e2:	1c5a      	adds	r2, r3, #1
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	7858      	ldrb	r0, [r3, #1]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070f6:	2301      	movs	r3, #1
 80070f8:	f7ff fc8e 	bl	8006a18 <disk_write>
			fs->fsi_flag = 0;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	785b      	ldrb	r3, [r3, #1]
 8007106:	2200      	movs	r2, #0
 8007108:	2100      	movs	r1, #0
 800710a:	4618      	mov	r0, r3
 800710c:	f7ff fca4 	bl	8006a58 <disk_ioctl>
 8007110:	4603      	mov	r3, r0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d001      	beq.n	800711a <sync_fs+0xca>
 8007116:	2301      	movs	r3, #1
 8007118:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800711a:	7bfb      	ldrb	r3, [r7, #15]
}
 800711c:	4618      	mov	r0, r3
 800711e:	3710      	adds	r7, #16
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}
 8007124:	41615252 	.word	0x41615252
 8007128:	61417272 	.word	0x61417272

0800712c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	3b02      	subs	r3, #2
 800713a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	695b      	ldr	r3, [r3, #20]
 8007140:	3b02      	subs	r3, #2
 8007142:	683a      	ldr	r2, [r7, #0]
 8007144:	429a      	cmp	r2, r3
 8007146:	d301      	bcc.n	800714c <clust2sect+0x20>
 8007148:	2300      	movs	r3, #0
 800714a:	e008      	b.n	800715e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	895b      	ldrh	r3, [r3, #10]
 8007150:	461a      	mov	r2, r3
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	fb03 f202 	mul.w	r2, r3, r2
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800715c:	4413      	add	r3, r2
}
 800715e:	4618      	mov	r0, r3
 8007160:	370c      	adds	r7, #12
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr

0800716a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800716a:	b580      	push	{r7, lr}
 800716c:	b086      	sub	sp, #24
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
 8007172:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	2b01      	cmp	r3, #1
 800717e:	d904      	bls.n	800718a <get_fat+0x20>
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	695b      	ldr	r3, [r3, #20]
 8007184:	683a      	ldr	r2, [r7, #0]
 8007186:	429a      	cmp	r2, r3
 8007188:	d302      	bcc.n	8007190 <get_fat+0x26>
		val = 1;	/* Internal error */
 800718a:	2301      	movs	r3, #1
 800718c:	617b      	str	r3, [r7, #20]
 800718e:	e08c      	b.n	80072aa <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007190:	f04f 33ff 	mov.w	r3, #4294967295
 8007194:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	2b02      	cmp	r3, #2
 800719c:	d045      	beq.n	800722a <get_fat+0xc0>
 800719e:	2b03      	cmp	r3, #3
 80071a0:	d05d      	beq.n	800725e <get_fat+0xf4>
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d177      	bne.n	8007296 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	60fb      	str	r3, [r7, #12]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	085b      	lsrs	r3, r3, #1
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	4413      	add	r3, r2
 80071b2:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	6a1a      	ldr	r2, [r3, #32]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	0a5b      	lsrs	r3, r3, #9
 80071bc:	4413      	add	r3, r2
 80071be:	4619      	mov	r1, r3
 80071c0:	6938      	ldr	r0, [r7, #16]
 80071c2:	f7ff ff17 	bl	8006ff4 <move_window>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d167      	bne.n	800729c <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	1c5a      	adds	r2, r3, #1
 80071d0:	60fa      	str	r2, [r7, #12]
 80071d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071d6:	693a      	ldr	r2, [r7, #16]
 80071d8:	4413      	add	r3, r2
 80071da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80071de:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	6a1a      	ldr	r2, [r3, #32]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	0a5b      	lsrs	r3, r3, #9
 80071e8:	4413      	add	r3, r2
 80071ea:	4619      	mov	r1, r3
 80071ec:	6938      	ldr	r0, [r7, #16]
 80071ee:	f7ff ff01 	bl	8006ff4 <move_window>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d153      	bne.n	80072a0 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071fe:	693a      	ldr	r2, [r7, #16]
 8007200:	4413      	add	r3, r2
 8007202:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007206:	021b      	lsls	r3, r3, #8
 8007208:	461a      	mov	r2, r3
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	4313      	orrs	r3, r2
 800720e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	f003 0301 	and.w	r3, r3, #1
 8007216:	2b00      	cmp	r3, #0
 8007218:	d002      	beq.n	8007220 <get_fat+0xb6>
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	091b      	lsrs	r3, r3, #4
 800721e:	e002      	b.n	8007226 <get_fat+0xbc>
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007226:	617b      	str	r3, [r7, #20]
			break;
 8007228:	e03f      	b.n	80072aa <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	6a1a      	ldr	r2, [r3, #32]
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	0a1b      	lsrs	r3, r3, #8
 8007232:	4413      	add	r3, r2
 8007234:	4619      	mov	r1, r3
 8007236:	6938      	ldr	r0, [r7, #16]
 8007238:	f7ff fedc 	bl	8006ff4 <move_window>
 800723c:	4603      	mov	r3, r0
 800723e:	2b00      	cmp	r3, #0
 8007240:	d130      	bne.n	80072a4 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	005b      	lsls	r3, r3, #1
 800724c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007250:	4413      	add	r3, r2
 8007252:	4618      	mov	r0, r3
 8007254:	f7ff fc1e 	bl	8006a94 <ld_word>
 8007258:	4603      	mov	r3, r0
 800725a:	617b      	str	r3, [r7, #20]
			break;
 800725c:	e025      	b.n	80072aa <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	6a1a      	ldr	r2, [r3, #32]
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	09db      	lsrs	r3, r3, #7
 8007266:	4413      	add	r3, r2
 8007268:	4619      	mov	r1, r3
 800726a:	6938      	ldr	r0, [r7, #16]
 800726c:	f7ff fec2 	bl	8006ff4 <move_window>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d118      	bne.n	80072a8 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007284:	4413      	add	r3, r2
 8007286:	4618      	mov	r0, r3
 8007288:	f7ff fc1c 	bl	8006ac4 <ld_dword>
 800728c:	4603      	mov	r3, r0
 800728e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007292:	617b      	str	r3, [r7, #20]
			break;
 8007294:	e009      	b.n	80072aa <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007296:	2301      	movs	r3, #1
 8007298:	617b      	str	r3, [r7, #20]
 800729a:	e006      	b.n	80072aa <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800729c:	bf00      	nop
 800729e:	e004      	b.n	80072aa <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80072a0:	bf00      	nop
 80072a2:	e002      	b.n	80072aa <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80072a4:	bf00      	nop
 80072a6:	e000      	b.n	80072aa <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80072a8:	bf00      	nop
		}
	}

	return val;
 80072aa:	697b      	ldr	r3, [r7, #20]
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3718      	adds	r7, #24
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80072b4:	b590      	push	{r4, r7, lr}
 80072b6:	b089      	sub	sp, #36	; 0x24
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80072c0:	2302      	movs	r3, #2
 80072c2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	f240 80d6 	bls.w	8007478 <put_fat+0x1c4>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	695b      	ldr	r3, [r3, #20]
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	f080 80d0 	bcs.w	8007478 <put_fat+0x1c4>
		switch (fs->fs_type) {
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	2b02      	cmp	r3, #2
 80072de:	d073      	beq.n	80073c8 <put_fat+0x114>
 80072e0:	2b03      	cmp	r3, #3
 80072e2:	f000 8091 	beq.w	8007408 <put_fat+0x154>
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	f040 80c6 	bne.w	8007478 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	61bb      	str	r3, [r7, #24]
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	085b      	lsrs	r3, r3, #1
 80072f4:	69ba      	ldr	r2, [r7, #24]
 80072f6:	4413      	add	r3, r2
 80072f8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6a1a      	ldr	r2, [r3, #32]
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	0a5b      	lsrs	r3, r3, #9
 8007302:	4413      	add	r3, r2
 8007304:	4619      	mov	r1, r3
 8007306:	68f8      	ldr	r0, [r7, #12]
 8007308:	f7ff fe74 	bl	8006ff4 <move_window>
 800730c:	4603      	mov	r3, r0
 800730e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007310:	7ffb      	ldrb	r3, [r7, #31]
 8007312:	2b00      	cmp	r3, #0
 8007314:	f040 80a9 	bne.w	800746a <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	1c59      	adds	r1, r3, #1
 8007322:	61b9      	str	r1, [r7, #24]
 8007324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007328:	4413      	add	r3, r2
 800732a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	f003 0301 	and.w	r3, r3, #1
 8007332:	2b00      	cmp	r3, #0
 8007334:	d00d      	beq.n	8007352 <put_fat+0x9e>
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	b25b      	sxtb	r3, r3
 800733c:	f003 030f 	and.w	r3, r3, #15
 8007340:	b25a      	sxtb	r2, r3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	b2db      	uxtb	r3, r3
 8007346:	011b      	lsls	r3, r3, #4
 8007348:	b25b      	sxtb	r3, r3
 800734a:	4313      	orrs	r3, r2
 800734c:	b25b      	sxtb	r3, r3
 800734e:	b2db      	uxtb	r3, r3
 8007350:	e001      	b.n	8007356 <put_fat+0xa2>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	b2db      	uxtb	r3, r3
 8007356:	697a      	ldr	r2, [r7, #20]
 8007358:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2201      	movs	r2, #1
 800735e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6a1a      	ldr	r2, [r3, #32]
 8007364:	69bb      	ldr	r3, [r7, #24]
 8007366:	0a5b      	lsrs	r3, r3, #9
 8007368:	4413      	add	r3, r2
 800736a:	4619      	mov	r1, r3
 800736c:	68f8      	ldr	r0, [r7, #12]
 800736e:	f7ff fe41 	bl	8006ff4 <move_window>
 8007372:	4603      	mov	r3, r0
 8007374:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007376:	7ffb      	ldrb	r3, [r7, #31]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d178      	bne.n	800746e <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007382:	69bb      	ldr	r3, [r7, #24]
 8007384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007388:	4413      	add	r3, r2
 800738a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	f003 0301 	and.w	r3, r3, #1
 8007392:	2b00      	cmp	r3, #0
 8007394:	d003      	beq.n	800739e <put_fat+0xea>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	091b      	lsrs	r3, r3, #4
 800739a:	b2db      	uxtb	r3, r3
 800739c:	e00e      	b.n	80073bc <put_fat+0x108>
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	b25b      	sxtb	r3, r3
 80073a4:	f023 030f 	bic.w	r3, r3, #15
 80073a8:	b25a      	sxtb	r2, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	0a1b      	lsrs	r3, r3, #8
 80073ae:	b25b      	sxtb	r3, r3
 80073b0:	f003 030f 	and.w	r3, r3, #15
 80073b4:	b25b      	sxtb	r3, r3
 80073b6:	4313      	orrs	r3, r2
 80073b8:	b25b      	sxtb	r3, r3
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	697a      	ldr	r2, [r7, #20]
 80073be:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2201      	movs	r2, #1
 80073c4:	70da      	strb	r2, [r3, #3]
			break;
 80073c6:	e057      	b.n	8007478 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6a1a      	ldr	r2, [r3, #32]
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	0a1b      	lsrs	r3, r3, #8
 80073d0:	4413      	add	r3, r2
 80073d2:	4619      	mov	r1, r3
 80073d4:	68f8      	ldr	r0, [r7, #12]
 80073d6:	f7ff fe0d 	bl	8006ff4 <move_window>
 80073da:	4603      	mov	r3, r0
 80073dc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80073de:	7ffb      	ldrb	r3, [r7, #31]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d146      	bne.n	8007472 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	005b      	lsls	r3, r3, #1
 80073ee:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80073f2:	4413      	add	r3, r2
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	b292      	uxth	r2, r2
 80073f8:	4611      	mov	r1, r2
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7ff fb85 	bl	8006b0a <st_word>
			fs->wflag = 1;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2201      	movs	r2, #1
 8007404:	70da      	strb	r2, [r3, #3]
			break;
 8007406:	e037      	b.n	8007478 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6a1a      	ldr	r2, [r3, #32]
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	09db      	lsrs	r3, r3, #7
 8007410:	4413      	add	r3, r2
 8007412:	4619      	mov	r1, r3
 8007414:	68f8      	ldr	r0, [r7, #12]
 8007416:	f7ff fded 	bl	8006ff4 <move_window>
 800741a:	4603      	mov	r3, r0
 800741c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800741e:	7ffb      	ldrb	r3, [r7, #31]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d128      	bne.n	8007476 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007438:	4413      	add	r3, r2
 800743a:	4618      	mov	r0, r3
 800743c:	f7ff fb42 	bl	8006ac4 <ld_dword>
 8007440:	4603      	mov	r3, r0
 8007442:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007446:	4323      	orrs	r3, r4
 8007448:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007458:	4413      	add	r3, r2
 800745a:	6879      	ldr	r1, [r7, #4]
 800745c:	4618      	mov	r0, r3
 800745e:	f7ff fb6f 	bl	8006b40 <st_dword>
			fs->wflag = 1;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2201      	movs	r2, #1
 8007466:	70da      	strb	r2, [r3, #3]
			break;
 8007468:	e006      	b.n	8007478 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800746a:	bf00      	nop
 800746c:	e004      	b.n	8007478 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800746e:	bf00      	nop
 8007470:	e002      	b.n	8007478 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8007472:	bf00      	nop
 8007474:	e000      	b.n	8007478 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8007476:	bf00      	nop
		}
	}
	return res;
 8007478:	7ffb      	ldrb	r3, [r7, #31]
}
 800747a:	4618      	mov	r0, r3
 800747c:	3724      	adds	r7, #36	; 0x24
 800747e:	46bd      	mov	sp, r7
 8007480:	bd90      	pop	{r4, r7, pc}

08007482 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007482:	b580      	push	{r7, lr}
 8007484:	b088      	sub	sp, #32
 8007486:	af00      	add	r7, sp, #0
 8007488:	60f8      	str	r0, [r7, #12]
 800748a:	60b9      	str	r1, [r7, #8]
 800748c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800748e:	2300      	movs	r3, #0
 8007490:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	2b01      	cmp	r3, #1
 800749c:	d904      	bls.n	80074a8 <remove_chain+0x26>
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	695b      	ldr	r3, [r3, #20]
 80074a2:	68ba      	ldr	r2, [r7, #8]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d301      	bcc.n	80074ac <remove_chain+0x2a>
 80074a8:	2302      	movs	r3, #2
 80074aa:	e04b      	b.n	8007544 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d00c      	beq.n	80074cc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80074b2:	f04f 32ff 	mov.w	r2, #4294967295
 80074b6:	6879      	ldr	r1, [r7, #4]
 80074b8:	69b8      	ldr	r0, [r7, #24]
 80074ba:	f7ff fefb 	bl	80072b4 <put_fat>
 80074be:	4603      	mov	r3, r0
 80074c0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80074c2:	7ffb      	ldrb	r3, [r7, #31]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d001      	beq.n	80074cc <remove_chain+0x4a>
 80074c8:	7ffb      	ldrb	r3, [r7, #31]
 80074ca:	e03b      	b.n	8007544 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80074cc:	68b9      	ldr	r1, [r7, #8]
 80074ce:	68f8      	ldr	r0, [r7, #12]
 80074d0:	f7ff fe4b 	bl	800716a <get_fat>
 80074d4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d031      	beq.n	8007540 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d101      	bne.n	80074e6 <remove_chain+0x64>
 80074e2:	2302      	movs	r3, #2
 80074e4:	e02e      	b.n	8007544 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ec:	d101      	bne.n	80074f2 <remove_chain+0x70>
 80074ee:	2301      	movs	r3, #1
 80074f0:	e028      	b.n	8007544 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80074f2:	2200      	movs	r2, #0
 80074f4:	68b9      	ldr	r1, [r7, #8]
 80074f6:	69b8      	ldr	r0, [r7, #24]
 80074f8:	f7ff fedc 	bl	80072b4 <put_fat>
 80074fc:	4603      	mov	r3, r0
 80074fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007500:	7ffb      	ldrb	r3, [r7, #31]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d001      	beq.n	800750a <remove_chain+0x88>
 8007506:	7ffb      	ldrb	r3, [r7, #31]
 8007508:	e01c      	b.n	8007544 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	691a      	ldr	r2, [r3, #16]
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	695b      	ldr	r3, [r3, #20]
 8007512:	3b02      	subs	r3, #2
 8007514:	429a      	cmp	r2, r3
 8007516:	d20b      	bcs.n	8007530 <remove_chain+0xae>
			fs->free_clst++;
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	691b      	ldr	r3, [r3, #16]
 800751c:	1c5a      	adds	r2, r3, #1
 800751e:	69bb      	ldr	r3, [r7, #24]
 8007520:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8007522:	69bb      	ldr	r3, [r7, #24]
 8007524:	791b      	ldrb	r3, [r3, #4]
 8007526:	f043 0301 	orr.w	r3, r3, #1
 800752a:	b2da      	uxtb	r2, r3
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	695b      	ldr	r3, [r3, #20]
 8007538:	68ba      	ldr	r2, [r7, #8]
 800753a:	429a      	cmp	r2, r3
 800753c:	d3c6      	bcc.n	80074cc <remove_chain+0x4a>
 800753e:	e000      	b.n	8007542 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007540:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	3720      	adds	r7, #32
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b088      	sub	sp, #32
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d10d      	bne.n	800757e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d004      	beq.n	8007578 <create_chain+0x2c>
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	695b      	ldr	r3, [r3, #20]
 8007572:	69ba      	ldr	r2, [r7, #24]
 8007574:	429a      	cmp	r2, r3
 8007576:	d31b      	bcc.n	80075b0 <create_chain+0x64>
 8007578:	2301      	movs	r3, #1
 800757a:	61bb      	str	r3, [r7, #24]
 800757c:	e018      	b.n	80075b0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800757e:	6839      	ldr	r1, [r7, #0]
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f7ff fdf2 	bl	800716a <get_fat>
 8007586:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2b01      	cmp	r3, #1
 800758c:	d801      	bhi.n	8007592 <create_chain+0x46>
 800758e:	2301      	movs	r3, #1
 8007590:	e070      	b.n	8007674 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007598:	d101      	bne.n	800759e <create_chain+0x52>
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	e06a      	b.n	8007674 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	695b      	ldr	r3, [r3, #20]
 80075a2:	68fa      	ldr	r2, [r7, #12]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d201      	bcs.n	80075ac <create_chain+0x60>
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	e063      	b.n	8007674 <create_chain+0x128>
		scl = clst;
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	3301      	adds	r3, #1
 80075b8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	695b      	ldr	r3, [r3, #20]
 80075be:	69fa      	ldr	r2, [r7, #28]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d307      	bcc.n	80075d4 <create_chain+0x88>
				ncl = 2;
 80075c4:	2302      	movs	r3, #2
 80075c6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80075c8:	69fa      	ldr	r2, [r7, #28]
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d901      	bls.n	80075d4 <create_chain+0x88>
 80075d0:	2300      	movs	r3, #0
 80075d2:	e04f      	b.n	8007674 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80075d4:	69f9      	ldr	r1, [r7, #28]
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f7ff fdc7 	bl	800716a <get_fat>
 80075dc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d00e      	beq.n	8007602 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d003      	beq.n	80075f2 <create_chain+0xa6>
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075f0:	d101      	bne.n	80075f6 <create_chain+0xaa>
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	e03e      	b.n	8007674 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80075f6:	69fa      	ldr	r2, [r7, #28]
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d1da      	bne.n	80075b4 <create_chain+0x68>
 80075fe:	2300      	movs	r3, #0
 8007600:	e038      	b.n	8007674 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007602:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007604:	f04f 32ff 	mov.w	r2, #4294967295
 8007608:	69f9      	ldr	r1, [r7, #28]
 800760a:	6938      	ldr	r0, [r7, #16]
 800760c:	f7ff fe52 	bl	80072b4 <put_fat>
 8007610:	4603      	mov	r3, r0
 8007612:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007614:	7dfb      	ldrb	r3, [r7, #23]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d109      	bne.n	800762e <create_chain+0xe2>
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d006      	beq.n	800762e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007620:	69fa      	ldr	r2, [r7, #28]
 8007622:	6839      	ldr	r1, [r7, #0]
 8007624:	6938      	ldr	r0, [r7, #16]
 8007626:	f7ff fe45 	bl	80072b4 <put_fat>
 800762a:	4603      	mov	r3, r0
 800762c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800762e:	7dfb      	ldrb	r3, [r7, #23]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d116      	bne.n	8007662 <create_chain+0x116>
		fs->last_clst = ncl;
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	69fa      	ldr	r2, [r7, #28]
 8007638:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	691a      	ldr	r2, [r3, #16]
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	695b      	ldr	r3, [r3, #20]
 8007642:	3b02      	subs	r3, #2
 8007644:	429a      	cmp	r2, r3
 8007646:	d804      	bhi.n	8007652 <create_chain+0x106>
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	1e5a      	subs	r2, r3, #1
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	791b      	ldrb	r3, [r3, #4]
 8007656:	f043 0301 	orr.w	r3, r3, #1
 800765a:	b2da      	uxtb	r2, r3
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	711a      	strb	r2, [r3, #4]
 8007660:	e007      	b.n	8007672 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007662:	7dfb      	ldrb	r3, [r7, #23]
 8007664:	2b01      	cmp	r3, #1
 8007666:	d102      	bne.n	800766e <create_chain+0x122>
 8007668:	f04f 33ff 	mov.w	r3, #4294967295
 800766c:	e000      	b.n	8007670 <create_chain+0x124>
 800766e:	2301      	movs	r3, #1
 8007670:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007672:	69fb      	ldr	r3, [r7, #28]
}
 8007674:	4618      	mov	r0, r3
 8007676:	3720      	adds	r7, #32
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800767c:	b480      	push	{r7}
 800767e:	b087      	sub	sp, #28
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007690:	3304      	adds	r3, #4
 8007692:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	0a5b      	lsrs	r3, r3, #9
 8007698:	68fa      	ldr	r2, [r7, #12]
 800769a:	8952      	ldrh	r2, [r2, #10]
 800769c:	fbb3 f3f2 	udiv	r3, r3, r2
 80076a0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	1d1a      	adds	r2, r3, #4
 80076a6:	613a      	str	r2, [r7, #16]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d101      	bne.n	80076b6 <clmt_clust+0x3a>
 80076b2:	2300      	movs	r3, #0
 80076b4:	e010      	b.n	80076d8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80076b6:	697a      	ldr	r2, [r7, #20]
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d307      	bcc.n	80076ce <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80076be:	697a      	ldr	r2, [r7, #20]
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	1ad3      	subs	r3, r2, r3
 80076c4:	617b      	str	r3, [r7, #20]
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	3304      	adds	r3, #4
 80076ca:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80076cc:	e7e9      	b.n	80076a2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80076ce:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	4413      	add	r3, r2
}
 80076d8:	4618      	mov	r0, r3
 80076da:	371c      	adds	r7, #28
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b086      	sub	sp, #24
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80076fa:	d204      	bcs.n	8007706 <dir_sdi+0x22>
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	f003 031f 	and.w	r3, r3, #31
 8007702:	2b00      	cmp	r3, #0
 8007704:	d001      	beq.n	800770a <dir_sdi+0x26>
		return FR_INT_ERR;
 8007706:	2302      	movs	r3, #2
 8007708:	e063      	b.n	80077d2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	683a      	ldr	r2, [r7, #0]
 800770e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d106      	bne.n	800772a <dir_sdi+0x46>
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	2b02      	cmp	r3, #2
 8007722:	d902      	bls.n	800772a <dir_sdi+0x46>
		clst = fs->dirbase;
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007728:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d10c      	bne.n	800774a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	095b      	lsrs	r3, r3, #5
 8007734:	693a      	ldr	r2, [r7, #16]
 8007736:	8912      	ldrh	r2, [r2, #8]
 8007738:	4293      	cmp	r3, r2
 800773a:	d301      	bcc.n	8007740 <dir_sdi+0x5c>
 800773c:	2302      	movs	r3, #2
 800773e:	e048      	b.n	80077d2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	61da      	str	r2, [r3, #28]
 8007748:	e029      	b.n	800779e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	895b      	ldrh	r3, [r3, #10]
 800774e:	025b      	lsls	r3, r3, #9
 8007750:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007752:	e019      	b.n	8007788 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6979      	ldr	r1, [r7, #20]
 8007758:	4618      	mov	r0, r3
 800775a:	f7ff fd06 	bl	800716a <get_fat>
 800775e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007766:	d101      	bne.n	800776c <dir_sdi+0x88>
 8007768:	2301      	movs	r3, #1
 800776a:	e032      	b.n	80077d2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	2b01      	cmp	r3, #1
 8007770:	d904      	bls.n	800777c <dir_sdi+0x98>
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	695b      	ldr	r3, [r3, #20]
 8007776:	697a      	ldr	r2, [r7, #20]
 8007778:	429a      	cmp	r2, r3
 800777a:	d301      	bcc.n	8007780 <dir_sdi+0x9c>
 800777c:	2302      	movs	r3, #2
 800777e:	e028      	b.n	80077d2 <dir_sdi+0xee>
			ofs -= csz;
 8007780:	683a      	ldr	r2, [r7, #0]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	1ad3      	subs	r3, r2, r3
 8007786:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007788:	683a      	ldr	r2, [r7, #0]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	429a      	cmp	r2, r3
 800778e:	d2e1      	bcs.n	8007754 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007790:	6979      	ldr	r1, [r7, #20]
 8007792:	6938      	ldr	r0, [r7, #16]
 8007794:	f7ff fcca 	bl	800712c <clust2sect>
 8007798:	4602      	mov	r2, r0
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	697a      	ldr	r2, [r7, #20]
 80077a2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	69db      	ldr	r3, [r3, #28]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d101      	bne.n	80077b0 <dir_sdi+0xcc>
 80077ac:	2302      	movs	r3, #2
 80077ae:	e010      	b.n	80077d2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	69da      	ldr	r2, [r3, #28]
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	0a5b      	lsrs	r3, r3, #9
 80077b8:	441a      	add	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ca:	441a      	add	r2, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80077d0:	2300      	movs	r3, #0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3718      	adds	r7, #24
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}

080077da <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80077da:	b580      	push	{r7, lr}
 80077dc:	b086      	sub	sp, #24
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
 80077e2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	695b      	ldr	r3, [r3, #20]
 80077ee:	3320      	adds	r3, #32
 80077f0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	69db      	ldr	r3, [r3, #28]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d003      	beq.n	8007802 <dir_next+0x28>
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007800:	d301      	bcc.n	8007806 <dir_next+0x2c>
 8007802:	2304      	movs	r3, #4
 8007804:	e0aa      	b.n	800795c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800780c:	2b00      	cmp	r3, #0
 800780e:	f040 8098 	bne.w	8007942 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	69db      	ldr	r3, [r3, #28]
 8007816:	1c5a      	adds	r2, r3, #1
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	699b      	ldr	r3, [r3, #24]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d10b      	bne.n	800783c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	095b      	lsrs	r3, r3, #5
 8007828:	68fa      	ldr	r2, [r7, #12]
 800782a:	8912      	ldrh	r2, [r2, #8]
 800782c:	4293      	cmp	r3, r2
 800782e:	f0c0 8088 	bcc.w	8007942 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	61da      	str	r2, [r3, #28]
 8007838:	2304      	movs	r3, #4
 800783a:	e08f      	b.n	800795c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	0a5b      	lsrs	r3, r3, #9
 8007840:	68fa      	ldr	r2, [r7, #12]
 8007842:	8952      	ldrh	r2, [r2, #10]
 8007844:	3a01      	subs	r2, #1
 8007846:	4013      	ands	r3, r2
 8007848:	2b00      	cmp	r3, #0
 800784a:	d17a      	bne.n	8007942 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	699b      	ldr	r3, [r3, #24]
 8007852:	4619      	mov	r1, r3
 8007854:	4610      	mov	r0, r2
 8007856:	f7ff fc88 	bl	800716a <get_fat>
 800785a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	2b01      	cmp	r3, #1
 8007860:	d801      	bhi.n	8007866 <dir_next+0x8c>
 8007862:	2302      	movs	r3, #2
 8007864:	e07a      	b.n	800795c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800786c:	d101      	bne.n	8007872 <dir_next+0x98>
 800786e:	2301      	movs	r3, #1
 8007870:	e074      	b.n	800795c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	695b      	ldr	r3, [r3, #20]
 8007876:	697a      	ldr	r2, [r7, #20]
 8007878:	429a      	cmp	r2, r3
 800787a:	d358      	bcc.n	800792e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d104      	bne.n	800788c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	61da      	str	r2, [r3, #28]
 8007888:	2304      	movs	r3, #4
 800788a:	e067      	b.n	800795c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	699b      	ldr	r3, [r3, #24]
 8007892:	4619      	mov	r1, r3
 8007894:	4610      	mov	r0, r2
 8007896:	f7ff fe59 	bl	800754c <create_chain>
 800789a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d101      	bne.n	80078a6 <dir_next+0xcc>
 80078a2:	2307      	movs	r3, #7
 80078a4:	e05a      	b.n	800795c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d101      	bne.n	80078b0 <dir_next+0xd6>
 80078ac:	2302      	movs	r3, #2
 80078ae:	e055      	b.n	800795c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b6:	d101      	bne.n	80078bc <dir_next+0xe2>
 80078b8:	2301      	movs	r3, #1
 80078ba:	e04f      	b.n	800795c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80078bc:	68f8      	ldr	r0, [r7, #12]
 80078be:	f7ff fb55 	bl	8006f6c <sync_window>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d001      	beq.n	80078cc <dir_next+0xf2>
 80078c8:	2301      	movs	r3, #1
 80078ca:	e047      	b.n	800795c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	3330      	adds	r3, #48	; 0x30
 80078d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078d4:	2100      	movs	r1, #0
 80078d6:	4618      	mov	r0, r3
 80078d8:	f7ff f97f 	bl	8006bda <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80078dc:	2300      	movs	r3, #0
 80078de:	613b      	str	r3, [r7, #16]
 80078e0:	6979      	ldr	r1, [r7, #20]
 80078e2:	68f8      	ldr	r0, [r7, #12]
 80078e4:	f7ff fc22 	bl	800712c <clust2sect>
 80078e8:	4602      	mov	r2, r0
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80078ee:	e012      	b.n	8007916 <dir_next+0x13c>
						fs->wflag = 1;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2201      	movs	r2, #1
 80078f4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80078f6:	68f8      	ldr	r0, [r7, #12]
 80078f8:	f7ff fb38 	bl	8006f6c <sync_window>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d001      	beq.n	8007906 <dir_next+0x12c>
 8007902:	2301      	movs	r3, #1
 8007904:	e02a      	b.n	800795c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	3301      	adds	r3, #1
 800790a:	613b      	str	r3, [r7, #16]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007910:	1c5a      	adds	r2, r3, #1
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	62da      	str	r2, [r3, #44]	; 0x2c
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	895b      	ldrh	r3, [r3, #10]
 800791a:	461a      	mov	r2, r3
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	4293      	cmp	r3, r2
 8007920:	d3e6      	bcc.n	80078f0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	1ad2      	subs	r2, r2, r3
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	697a      	ldr	r2, [r7, #20]
 8007932:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007934:	6979      	ldr	r1, [r7, #20]
 8007936:	68f8      	ldr	r0, [r7, #12]
 8007938:	f7ff fbf8 	bl	800712c <clust2sect>
 800793c:	4602      	mov	r2, r0
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	68ba      	ldr	r2, [r7, #8]
 8007946:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007954:	441a      	add	r2, r3
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800795a:	2300      	movs	r3, #0
}
 800795c:	4618      	mov	r0, r3
 800795e:	3718      	adds	r7, #24
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b086      	sub	sp, #24
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007974:	2100      	movs	r1, #0
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f7ff feb4 	bl	80076e4 <dir_sdi>
 800797c:	4603      	mov	r3, r0
 800797e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007980:	7dfb      	ldrb	r3, [r7, #23]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d12b      	bne.n	80079de <dir_alloc+0x7a>
		n = 0;
 8007986:	2300      	movs	r3, #0
 8007988:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	69db      	ldr	r3, [r3, #28]
 800798e:	4619      	mov	r1, r3
 8007990:	68f8      	ldr	r0, [r7, #12]
 8007992:	f7ff fb2f 	bl	8006ff4 <move_window>
 8007996:	4603      	mov	r3, r0
 8007998:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800799a:	7dfb      	ldrb	r3, [r7, #23]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d11d      	bne.n	80079dc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6a1b      	ldr	r3, [r3, #32]
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	2be5      	cmp	r3, #229	; 0xe5
 80079a8:	d004      	beq.n	80079b4 <dir_alloc+0x50>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6a1b      	ldr	r3, [r3, #32]
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d107      	bne.n	80079c4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	3301      	adds	r3, #1
 80079b8:	613b      	str	r3, [r7, #16]
 80079ba:	693a      	ldr	r2, [r7, #16]
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	429a      	cmp	r2, r3
 80079c0:	d102      	bne.n	80079c8 <dir_alloc+0x64>
 80079c2:	e00c      	b.n	80079de <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80079c4:	2300      	movs	r3, #0
 80079c6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80079c8:	2101      	movs	r1, #1
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f7ff ff05 	bl	80077da <dir_next>
 80079d0:	4603      	mov	r3, r0
 80079d2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80079d4:	7dfb      	ldrb	r3, [r7, #23]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d0d7      	beq.n	800798a <dir_alloc+0x26>
 80079da:	e000      	b.n	80079de <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80079dc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80079de:	7dfb      	ldrb	r3, [r7, #23]
 80079e0:	2b04      	cmp	r3, #4
 80079e2:	d101      	bne.n	80079e8 <dir_alloc+0x84>
 80079e4:	2307      	movs	r3, #7
 80079e6:	75fb      	strb	r3, [r7, #23]
	return res;
 80079e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3718      	adds	r7, #24
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}

080079f2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80079f2:	b580      	push	{r7, lr}
 80079f4:	b084      	sub	sp, #16
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
 80079fa:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	331a      	adds	r3, #26
 8007a00:	4618      	mov	r0, r3
 8007a02:	f7ff f847 	bl	8006a94 <ld_word>
 8007a06:	4603      	mov	r3, r0
 8007a08:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	2b03      	cmp	r3, #3
 8007a10:	d109      	bne.n	8007a26 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	3314      	adds	r3, #20
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7ff f83c 	bl	8006a94 <ld_word>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	041b      	lsls	r3, r3, #16
 8007a20:	68fa      	ldr	r2, [r7, #12]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007a26:	68fb      	ldr	r3, [r7, #12]
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3710      	adds	r7, #16
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	331a      	adds	r3, #26
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	b292      	uxth	r2, r2
 8007a44:	4611      	mov	r1, r2
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7ff f85f 	bl	8006b0a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	2b03      	cmp	r3, #3
 8007a52:	d109      	bne.n	8007a68 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	f103 0214 	add.w	r2, r3, #20
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	0c1b      	lsrs	r3, r3, #16
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	4619      	mov	r1, r3
 8007a62:	4610      	mov	r0, r2
 8007a64:	f7ff f851 	bl	8006b0a <st_word>
	}
}
 8007a68:	bf00      	nop
 8007a6a:	3710      	adds	r7, #16
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b086      	sub	sp, #24
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007a7e:	2100      	movs	r1, #0
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f7ff fe2f 	bl	80076e4 <dir_sdi>
 8007a86:	4603      	mov	r3, r0
 8007a88:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007a8a:	7dfb      	ldrb	r3, [r7, #23]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d001      	beq.n	8007a94 <dir_find+0x24>
 8007a90:	7dfb      	ldrb	r3, [r7, #23]
 8007a92:	e03e      	b.n	8007b12 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	69db      	ldr	r3, [r3, #28]
 8007a98:	4619      	mov	r1, r3
 8007a9a:	6938      	ldr	r0, [r7, #16]
 8007a9c:	f7ff faaa 	bl	8006ff4 <move_window>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007aa4:	7dfb      	ldrb	r3, [r7, #23]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d12f      	bne.n	8007b0a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a1b      	ldr	r3, [r3, #32]
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007ab2:	7bfb      	ldrb	r3, [r7, #15]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d102      	bne.n	8007abe <dir_find+0x4e>
 8007ab8:	2304      	movs	r3, #4
 8007aba:	75fb      	strb	r3, [r7, #23]
 8007abc:	e028      	b.n	8007b10 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a1b      	ldr	r3, [r3, #32]
 8007ac2:	330b      	adds	r3, #11
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007aca:	b2da      	uxtb	r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6a1b      	ldr	r3, [r3, #32]
 8007ad4:	330b      	adds	r3, #11
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	f003 0308 	and.w	r3, r3, #8
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d10a      	bne.n	8007af6 <dir_find+0x86>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6a18      	ldr	r0, [r3, #32]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	3324      	adds	r3, #36	; 0x24
 8007ae8:	220b      	movs	r2, #11
 8007aea:	4619      	mov	r1, r3
 8007aec:	f7ff f88f 	bl	8006c0e <mem_cmp>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d00b      	beq.n	8007b0e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007af6:	2100      	movs	r1, #0
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f7ff fe6e 	bl	80077da <dir_next>
 8007afe:	4603      	mov	r3, r0
 8007b00:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007b02:	7dfb      	ldrb	r3, [r7, #23]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d0c5      	beq.n	8007a94 <dir_find+0x24>
 8007b08:	e002      	b.n	8007b10 <dir_find+0xa0>
		if (res != FR_OK) break;
 8007b0a:	bf00      	nop
 8007b0c:	e000      	b.n	8007b10 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007b0e:	bf00      	nop

	return res;
 8007b10:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3718      	adds	r7, #24
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b084      	sub	sp, #16
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007b28:	2101      	movs	r1, #1
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f7ff ff1a 	bl	8007964 <dir_alloc>
 8007b30:	4603      	mov	r3, r0
 8007b32:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007b34:	7bfb      	ldrb	r3, [r7, #15]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d11c      	bne.n	8007b74 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	69db      	ldr	r3, [r3, #28]
 8007b3e:	4619      	mov	r1, r3
 8007b40:	68b8      	ldr	r0, [r7, #8]
 8007b42:	f7ff fa57 	bl	8006ff4 <move_window>
 8007b46:	4603      	mov	r3, r0
 8007b48:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007b4a:	7bfb      	ldrb	r3, [r7, #15]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d111      	bne.n	8007b74 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6a1b      	ldr	r3, [r3, #32]
 8007b54:	2220      	movs	r2, #32
 8007b56:	2100      	movs	r1, #0
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f7ff f83e 	bl	8006bda <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a18      	ldr	r0, [r3, #32]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	3324      	adds	r3, #36	; 0x24
 8007b66:	220b      	movs	r2, #11
 8007b68:	4619      	mov	r1, r3
 8007b6a:	f7ff f815 	bl	8006b98 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	2201      	movs	r2, #1
 8007b72:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
	...

08007b80 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b088      	sub	sp, #32
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	60fb      	str	r3, [r7, #12]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	3324      	adds	r3, #36	; 0x24
 8007b94:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007b96:	220b      	movs	r2, #11
 8007b98:	2120      	movs	r1, #32
 8007b9a:	68b8      	ldr	r0, [r7, #8]
 8007b9c:	f7ff f81d 	bl	8006bda <mem_set>
	si = i = 0; ni = 8;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	613b      	str	r3, [r7, #16]
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	617b      	str	r3, [r7, #20]
 8007ba8:	2308      	movs	r3, #8
 8007baa:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	1c5a      	adds	r2, r3, #1
 8007bb0:	617a      	str	r2, [r7, #20]
 8007bb2:	68fa      	ldr	r2, [r7, #12]
 8007bb4:	4413      	add	r3, r2
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007bba:	7ffb      	ldrb	r3, [r7, #31]
 8007bbc:	2b20      	cmp	r3, #32
 8007bbe:	d94e      	bls.n	8007c5e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007bc0:	7ffb      	ldrb	r3, [r7, #31]
 8007bc2:	2b2f      	cmp	r3, #47	; 0x2f
 8007bc4:	d006      	beq.n	8007bd4 <create_name+0x54>
 8007bc6:	7ffb      	ldrb	r3, [r7, #31]
 8007bc8:	2b5c      	cmp	r3, #92	; 0x5c
 8007bca:	d110      	bne.n	8007bee <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007bcc:	e002      	b.n	8007bd4 <create_name+0x54>
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	3301      	adds	r3, #1
 8007bd2:	617b      	str	r3, [r7, #20]
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	4413      	add	r3, r2
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	2b2f      	cmp	r3, #47	; 0x2f
 8007bde:	d0f6      	beq.n	8007bce <create_name+0x4e>
 8007be0:	68fa      	ldr	r2, [r7, #12]
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	4413      	add	r3, r2
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	2b5c      	cmp	r3, #92	; 0x5c
 8007bea:	d0f0      	beq.n	8007bce <create_name+0x4e>
			break;
 8007bec:	e038      	b.n	8007c60 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007bee:	7ffb      	ldrb	r3, [r7, #31]
 8007bf0:	2b2e      	cmp	r3, #46	; 0x2e
 8007bf2:	d003      	beq.n	8007bfc <create_name+0x7c>
 8007bf4:	693a      	ldr	r2, [r7, #16]
 8007bf6:	69bb      	ldr	r3, [r7, #24]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d30c      	bcc.n	8007c16 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007bfc:	69bb      	ldr	r3, [r7, #24]
 8007bfe:	2b0b      	cmp	r3, #11
 8007c00:	d002      	beq.n	8007c08 <create_name+0x88>
 8007c02:	7ffb      	ldrb	r3, [r7, #31]
 8007c04:	2b2e      	cmp	r3, #46	; 0x2e
 8007c06:	d001      	beq.n	8007c0c <create_name+0x8c>
 8007c08:	2306      	movs	r3, #6
 8007c0a:	e044      	b.n	8007c96 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007c0c:	2308      	movs	r3, #8
 8007c0e:	613b      	str	r3, [r7, #16]
 8007c10:	230b      	movs	r3, #11
 8007c12:	61bb      	str	r3, [r7, #24]
			continue;
 8007c14:	e022      	b.n	8007c5c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007c16:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	da04      	bge.n	8007c28 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007c1e:	7ffb      	ldrb	r3, [r7, #31]
 8007c20:	3b80      	subs	r3, #128	; 0x80
 8007c22:	4a1f      	ldr	r2, [pc, #124]	; (8007ca0 <create_name+0x120>)
 8007c24:	5cd3      	ldrb	r3, [r2, r3]
 8007c26:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007c28:	7ffb      	ldrb	r3, [r7, #31]
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	481d      	ldr	r0, [pc, #116]	; (8007ca4 <create_name+0x124>)
 8007c2e:	f7ff f815 	bl	8006c5c <chk_chr>
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d001      	beq.n	8007c3c <create_name+0xbc>
 8007c38:	2306      	movs	r3, #6
 8007c3a:	e02c      	b.n	8007c96 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007c3c:	7ffb      	ldrb	r3, [r7, #31]
 8007c3e:	2b60      	cmp	r3, #96	; 0x60
 8007c40:	d905      	bls.n	8007c4e <create_name+0xce>
 8007c42:	7ffb      	ldrb	r3, [r7, #31]
 8007c44:	2b7a      	cmp	r3, #122	; 0x7a
 8007c46:	d802      	bhi.n	8007c4e <create_name+0xce>
 8007c48:	7ffb      	ldrb	r3, [r7, #31]
 8007c4a:	3b20      	subs	r3, #32
 8007c4c:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	1c5a      	adds	r2, r3, #1
 8007c52:	613a      	str	r2, [r7, #16]
 8007c54:	68ba      	ldr	r2, [r7, #8]
 8007c56:	4413      	add	r3, r2
 8007c58:	7ffa      	ldrb	r2, [r7, #31]
 8007c5a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007c5c:	e7a6      	b.n	8007bac <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007c5e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007c60:	68fa      	ldr	r2, [r7, #12]
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	441a      	add	r2, r3
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d101      	bne.n	8007c74 <create_name+0xf4>
 8007c70:	2306      	movs	r3, #6
 8007c72:	e010      	b.n	8007c96 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	2be5      	cmp	r3, #229	; 0xe5
 8007c7a:	d102      	bne.n	8007c82 <create_name+0x102>
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	2205      	movs	r2, #5
 8007c80:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007c82:	7ffb      	ldrb	r3, [r7, #31]
 8007c84:	2b20      	cmp	r3, #32
 8007c86:	d801      	bhi.n	8007c8c <create_name+0x10c>
 8007c88:	2204      	movs	r2, #4
 8007c8a:	e000      	b.n	8007c8e <create_name+0x10e>
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	330b      	adds	r3, #11
 8007c92:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007c94:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3720      	adds	r7, #32
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	0800b540 	.word	0x0800b540
 8007ca4:	0800b4e4 	.word	0x0800b4e4

08007ca8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b086      	sub	sp, #24
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007cbc:	e002      	b.n	8007cc4 <follow_path+0x1c>
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	603b      	str	r3, [r7, #0]
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	2b2f      	cmp	r3, #47	; 0x2f
 8007cca:	d0f8      	beq.n	8007cbe <follow_path+0x16>
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	2b5c      	cmp	r3, #92	; 0x5c
 8007cd2:	d0f4      	beq.n	8007cbe <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	2b1f      	cmp	r3, #31
 8007ce0:	d80a      	bhi.n	8007cf8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2280      	movs	r2, #128	; 0x80
 8007ce6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007cea:	2100      	movs	r1, #0
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f7ff fcf9 	bl	80076e4 <dir_sdi>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	75fb      	strb	r3, [r7, #23]
 8007cf6:	e043      	b.n	8007d80 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007cf8:	463b      	mov	r3, r7
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f7ff ff3f 	bl	8007b80 <create_name>
 8007d02:	4603      	mov	r3, r0
 8007d04:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007d06:	7dfb      	ldrb	r3, [r7, #23]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d134      	bne.n	8007d76 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f7ff feaf 	bl	8007a70 <dir_find>
 8007d12:	4603      	mov	r3, r0
 8007d14:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007d1c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007d1e:	7dfb      	ldrb	r3, [r7, #23]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d00a      	beq.n	8007d3a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007d24:	7dfb      	ldrb	r3, [r7, #23]
 8007d26:	2b04      	cmp	r3, #4
 8007d28:	d127      	bne.n	8007d7a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007d2a:	7afb      	ldrb	r3, [r7, #11]
 8007d2c:	f003 0304 	and.w	r3, r3, #4
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d122      	bne.n	8007d7a <follow_path+0xd2>
 8007d34:	2305      	movs	r3, #5
 8007d36:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007d38:	e01f      	b.n	8007d7a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007d3a:	7afb      	ldrb	r3, [r7, #11]
 8007d3c:	f003 0304 	and.w	r3, r3, #4
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d11c      	bne.n	8007d7e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	799b      	ldrb	r3, [r3, #6]
 8007d48:	f003 0310 	and.w	r3, r3, #16
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d102      	bne.n	8007d56 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007d50:	2305      	movs	r3, #5
 8007d52:	75fb      	strb	r3, [r7, #23]
 8007d54:	e014      	b.n	8007d80 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	695b      	ldr	r3, [r3, #20]
 8007d60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d64:	4413      	add	r3, r2
 8007d66:	4619      	mov	r1, r3
 8007d68:	68f8      	ldr	r0, [r7, #12]
 8007d6a:	f7ff fe42 	bl	80079f2 <ld_clust>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007d74:	e7c0      	b.n	8007cf8 <follow_path+0x50>
			if (res != FR_OK) break;
 8007d76:	bf00      	nop
 8007d78:	e002      	b.n	8007d80 <follow_path+0xd8>
				break;
 8007d7a:	bf00      	nop
 8007d7c:	e000      	b.n	8007d80 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007d7e:	bf00      	nop
			}
		}
	}

	return res;
 8007d80:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3718      	adds	r7, #24
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007d8a:	b480      	push	{r7}
 8007d8c:	b087      	sub	sp, #28
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007d92:	f04f 33ff 	mov.w	r3, #4294967295
 8007d96:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d031      	beq.n	8007e04 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	617b      	str	r3, [r7, #20]
 8007da6:	e002      	b.n	8007dae <get_ldnumber+0x24>
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	3301      	adds	r3, #1
 8007dac:	617b      	str	r3, [r7, #20]
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	2b20      	cmp	r3, #32
 8007db4:	d903      	bls.n	8007dbe <get_ldnumber+0x34>
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	2b3a      	cmp	r3, #58	; 0x3a
 8007dbc:	d1f4      	bne.n	8007da8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	2b3a      	cmp	r3, #58	; 0x3a
 8007dc4:	d11c      	bne.n	8007e00 <get_ldnumber+0x76>
			tp = *path;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	1c5a      	adds	r2, r3, #1
 8007dd0:	60fa      	str	r2, [r7, #12]
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	3b30      	subs	r3, #48	; 0x30
 8007dd6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	2b09      	cmp	r3, #9
 8007ddc:	d80e      	bhi.n	8007dfc <get_ldnumber+0x72>
 8007dde:	68fa      	ldr	r2, [r7, #12]
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d10a      	bne.n	8007dfc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d107      	bne.n	8007dfc <get_ldnumber+0x72>
					vol = (int)i;
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	3301      	adds	r3, #1
 8007df4:	617b      	str	r3, [r7, #20]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	697a      	ldr	r2, [r7, #20]
 8007dfa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	e002      	b.n	8007e06 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007e00:	2300      	movs	r3, #0
 8007e02:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007e04:	693b      	ldr	r3, [r7, #16]
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	371c      	adds	r7, #28
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr
	...

08007e14 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b082      	sub	sp, #8
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	70da      	strb	r2, [r3, #3]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f04f 32ff 	mov.w	r2, #4294967295
 8007e2a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007e2c:	6839      	ldr	r1, [r7, #0]
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f7ff f8e0 	bl	8006ff4 <move_window>
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d001      	beq.n	8007e3e <check_fs+0x2a>
 8007e3a:	2304      	movs	r3, #4
 8007e3c:	e038      	b.n	8007eb0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	3330      	adds	r3, #48	; 0x30
 8007e42:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007e46:	4618      	mov	r0, r3
 8007e48:	f7fe fe24 	bl	8006a94 <ld_word>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	461a      	mov	r2, r3
 8007e50:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d001      	beq.n	8007e5c <check_fs+0x48>
 8007e58:	2303      	movs	r3, #3
 8007e5a:	e029      	b.n	8007eb0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007e62:	2be9      	cmp	r3, #233	; 0xe9
 8007e64:	d009      	beq.n	8007e7a <check_fs+0x66>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007e6c:	2beb      	cmp	r3, #235	; 0xeb
 8007e6e:	d11e      	bne.n	8007eae <check_fs+0x9a>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007e76:	2b90      	cmp	r3, #144	; 0x90
 8007e78:	d119      	bne.n	8007eae <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	3330      	adds	r3, #48	; 0x30
 8007e7e:	3336      	adds	r3, #54	; 0x36
 8007e80:	4618      	mov	r0, r3
 8007e82:	f7fe fe1f 	bl	8006ac4 <ld_dword>
 8007e86:	4603      	mov	r3, r0
 8007e88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007e8c:	4a0a      	ldr	r2, [pc, #40]	; (8007eb8 <check_fs+0xa4>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d101      	bne.n	8007e96 <check_fs+0x82>
 8007e92:	2300      	movs	r3, #0
 8007e94:	e00c      	b.n	8007eb0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	3330      	adds	r3, #48	; 0x30
 8007e9a:	3352      	adds	r3, #82	; 0x52
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f7fe fe11 	bl	8006ac4 <ld_dword>
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	4b05      	ldr	r3, [pc, #20]	; (8007ebc <check_fs+0xa8>)
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d101      	bne.n	8007eae <check_fs+0x9a>
 8007eaa:	2300      	movs	r3, #0
 8007eac:	e000      	b.n	8007eb0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007eae:	2302      	movs	r3, #2
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3708      	adds	r7, #8
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	00544146 	.word	0x00544146
 8007ebc:	33544146 	.word	0x33544146

08007ec0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b096      	sub	sp, #88	; 0x58
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	4613      	mov	r3, r2
 8007ecc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007ed4:	68f8      	ldr	r0, [r7, #12]
 8007ed6:	f7ff ff58 	bl	8007d8a <get_ldnumber>
 8007eda:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	da01      	bge.n	8007ee6 <find_volume+0x26>
 8007ee2:	230b      	movs	r3, #11
 8007ee4:	e22e      	b.n	8008344 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007ee6:	4aa8      	ldr	r2, [pc, #672]	; (8008188 <find_volume+0x2c8>)
 8007ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007eee:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d101      	bne.n	8007efa <find_volume+0x3a>
 8007ef6:	230c      	movs	r3, #12
 8007ef8:	e224      	b.n	8008344 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007efe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007f00:	79fb      	ldrb	r3, [r7, #7]
 8007f02:	f023 0301 	bic.w	r3, r3, #1
 8007f06:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d01a      	beq.n	8007f46 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f12:	785b      	ldrb	r3, [r3, #1]
 8007f14:	4618      	mov	r0, r3
 8007f16:	f7fe fd1f 	bl	8006958 <disk_status>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007f20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f24:	f003 0301 	and.w	r3, r3, #1
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d10c      	bne.n	8007f46 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007f2c:	79fb      	ldrb	r3, [r7, #7]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d007      	beq.n	8007f42 <find_volume+0x82>
 8007f32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f36:	f003 0304 	and.w	r3, r3, #4
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d001      	beq.n	8007f42 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007f3e:	230a      	movs	r3, #10
 8007f40:	e200      	b.n	8008344 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8007f42:	2300      	movs	r3, #0
 8007f44:	e1fe      	b.n	8008344 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f48:	2200      	movs	r2, #0
 8007f4a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f4e:	b2da      	uxtb	r2, r3
 8007f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f52:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f56:	785b      	ldrb	r3, [r3, #1]
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f7fe fd17 	bl	800698c <disk_initialize>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007f64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f68:	f003 0301 	and.w	r3, r3, #1
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d001      	beq.n	8007f74 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007f70:	2303      	movs	r3, #3
 8007f72:	e1e7      	b.n	8008344 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007f74:	79fb      	ldrb	r3, [r7, #7]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d007      	beq.n	8007f8a <find_volume+0xca>
 8007f7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f7e:	f003 0304 	and.w	r3, r3, #4
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d001      	beq.n	8007f8a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007f86:	230a      	movs	r3, #10
 8007f88:	e1dc      	b.n	8008344 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007f8e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007f90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f92:	f7ff ff3f 	bl	8007e14 <check_fs>
 8007f96:	4603      	mov	r3, r0
 8007f98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007f9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007fa0:	2b02      	cmp	r3, #2
 8007fa2:	d14b      	bne.n	800803c <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	643b      	str	r3, [r7, #64]	; 0x40
 8007fa8:	e01f      	b.n	8007fea <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007fb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fb2:	011b      	lsls	r3, r3, #4
 8007fb4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007fb8:	4413      	add	r3, r2
 8007fba:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fbe:	3304      	adds	r3, #4
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d006      	beq.n	8007fd4 <find_volume+0x114>
 8007fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc8:	3308      	adds	r3, #8
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f7fe fd7a 	bl	8006ac4 <ld_dword>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	e000      	b.n	8007fd6 <find_volume+0x116>
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007fde:	440b      	add	r3, r1
 8007fe0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007fe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	643b      	str	r3, [r7, #64]	; 0x40
 8007fea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fec:	2b03      	cmp	r3, #3
 8007fee:	d9dc      	bls.n	8007faa <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d002      	beq.n	8008000 <find_volume+0x140>
 8007ffa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ffc:	3b01      	subs	r3, #1
 8007ffe:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008008:	4413      	add	r3, r2
 800800a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800800e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008010:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008012:	2b00      	cmp	r3, #0
 8008014:	d005      	beq.n	8008022 <find_volume+0x162>
 8008016:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008018:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800801a:	f7ff fefb 	bl	8007e14 <check_fs>
 800801e:	4603      	mov	r3, r0
 8008020:	e000      	b.n	8008024 <find_volume+0x164>
 8008022:	2303      	movs	r3, #3
 8008024:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008028:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800802c:	2b01      	cmp	r3, #1
 800802e:	d905      	bls.n	800803c <find_volume+0x17c>
 8008030:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008032:	3301      	adds	r3, #1
 8008034:	643b      	str	r3, [r7, #64]	; 0x40
 8008036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008038:	2b03      	cmp	r3, #3
 800803a:	d9e1      	bls.n	8008000 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800803c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008040:	2b04      	cmp	r3, #4
 8008042:	d101      	bne.n	8008048 <find_volume+0x188>
 8008044:	2301      	movs	r3, #1
 8008046:	e17d      	b.n	8008344 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008048:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800804c:	2b01      	cmp	r3, #1
 800804e:	d901      	bls.n	8008054 <find_volume+0x194>
 8008050:	230d      	movs	r3, #13
 8008052:	e177      	b.n	8008344 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008056:	3330      	adds	r3, #48	; 0x30
 8008058:	330b      	adds	r3, #11
 800805a:	4618      	mov	r0, r3
 800805c:	f7fe fd1a 	bl	8006a94 <ld_word>
 8008060:	4603      	mov	r3, r0
 8008062:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008066:	d001      	beq.n	800806c <find_volume+0x1ac>
 8008068:	230d      	movs	r3, #13
 800806a:	e16b      	b.n	8008344 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800806c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800806e:	3330      	adds	r3, #48	; 0x30
 8008070:	3316      	adds	r3, #22
 8008072:	4618      	mov	r0, r3
 8008074:	f7fe fd0e 	bl	8006a94 <ld_word>
 8008078:	4603      	mov	r3, r0
 800807a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800807c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800807e:	2b00      	cmp	r3, #0
 8008080:	d106      	bne.n	8008090 <find_volume+0x1d0>
 8008082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008084:	3330      	adds	r3, #48	; 0x30
 8008086:	3324      	adds	r3, #36	; 0x24
 8008088:	4618      	mov	r0, r3
 800808a:	f7fe fd1b 	bl	8006ac4 <ld_dword>
 800808e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008092:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008094:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008098:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800809c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800809e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80080a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a2:	789b      	ldrb	r3, [r3, #2]
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	d005      	beq.n	80080b4 <find_volume+0x1f4>
 80080a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080aa:	789b      	ldrb	r3, [r3, #2]
 80080ac:	2b02      	cmp	r3, #2
 80080ae:	d001      	beq.n	80080b4 <find_volume+0x1f4>
 80080b0:	230d      	movs	r3, #13
 80080b2:	e147      	b.n	8008344 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80080b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b6:	789b      	ldrb	r3, [r3, #2]
 80080b8:	461a      	mov	r2, r3
 80080ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080bc:	fb02 f303 	mul.w	r3, r2, r3
 80080c0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80080c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080c8:	b29a      	uxth	r2, r3
 80080ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080cc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80080ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d0:	895b      	ldrh	r3, [r3, #10]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d008      	beq.n	80080e8 <find_volume+0x228>
 80080d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d8:	895b      	ldrh	r3, [r3, #10]
 80080da:	461a      	mov	r2, r3
 80080dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080de:	895b      	ldrh	r3, [r3, #10]
 80080e0:	3b01      	subs	r3, #1
 80080e2:	4013      	ands	r3, r2
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d001      	beq.n	80080ec <find_volume+0x22c>
 80080e8:	230d      	movs	r3, #13
 80080ea:	e12b      	b.n	8008344 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80080ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ee:	3330      	adds	r3, #48	; 0x30
 80080f0:	3311      	adds	r3, #17
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7fe fcce 	bl	8006a94 <ld_word>
 80080f8:	4603      	mov	r3, r0
 80080fa:	461a      	mov	r2, r3
 80080fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080fe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008102:	891b      	ldrh	r3, [r3, #8]
 8008104:	f003 030f 	and.w	r3, r3, #15
 8008108:	b29b      	uxth	r3, r3
 800810a:	2b00      	cmp	r3, #0
 800810c:	d001      	beq.n	8008112 <find_volume+0x252>
 800810e:	230d      	movs	r3, #13
 8008110:	e118      	b.n	8008344 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008114:	3330      	adds	r3, #48	; 0x30
 8008116:	3313      	adds	r3, #19
 8008118:	4618      	mov	r0, r3
 800811a:	f7fe fcbb 	bl	8006a94 <ld_word>
 800811e:	4603      	mov	r3, r0
 8008120:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008122:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008124:	2b00      	cmp	r3, #0
 8008126:	d106      	bne.n	8008136 <find_volume+0x276>
 8008128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800812a:	3330      	adds	r3, #48	; 0x30
 800812c:	3320      	adds	r3, #32
 800812e:	4618      	mov	r0, r3
 8008130:	f7fe fcc8 	bl	8006ac4 <ld_dword>
 8008134:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008138:	3330      	adds	r3, #48	; 0x30
 800813a:	330e      	adds	r3, #14
 800813c:	4618      	mov	r0, r3
 800813e:	f7fe fca9 	bl	8006a94 <ld_word>
 8008142:	4603      	mov	r3, r0
 8008144:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008146:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008148:	2b00      	cmp	r3, #0
 800814a:	d101      	bne.n	8008150 <find_volume+0x290>
 800814c:	230d      	movs	r3, #13
 800814e:	e0f9      	b.n	8008344 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008150:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008154:	4413      	add	r3, r2
 8008156:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008158:	8912      	ldrh	r2, [r2, #8]
 800815a:	0912      	lsrs	r2, r2, #4
 800815c:	b292      	uxth	r2, r2
 800815e:	4413      	add	r3, r2
 8008160:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008162:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008166:	429a      	cmp	r2, r3
 8008168:	d201      	bcs.n	800816e <find_volume+0x2ae>
 800816a:	230d      	movs	r3, #13
 800816c:	e0ea      	b.n	8008344 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800816e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008172:	1ad3      	subs	r3, r2, r3
 8008174:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008176:	8952      	ldrh	r2, [r2, #10]
 8008178:	fbb3 f3f2 	udiv	r3, r3, r2
 800817c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800817e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008180:	2b00      	cmp	r3, #0
 8008182:	d103      	bne.n	800818c <find_volume+0x2cc>
 8008184:	230d      	movs	r3, #13
 8008186:	e0dd      	b.n	8008344 <find_volume+0x484>
 8008188:	20000780 	.word	0x20000780
		fmt = FS_FAT32;
 800818c:	2303      	movs	r3, #3
 800818e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008194:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008198:	4293      	cmp	r3, r2
 800819a:	d802      	bhi.n	80081a2 <find_volume+0x2e2>
 800819c:	2302      	movs	r3, #2
 800819e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80081a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a4:	f640 72f5 	movw	r2, #4085	; 0xff5
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d802      	bhi.n	80081b2 <find_volume+0x2f2>
 80081ac:	2301      	movs	r3, #1
 80081ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80081b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b4:	1c9a      	adds	r2, r3, #2
 80081b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b8:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80081ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80081be:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80081c0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80081c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081c4:	441a      	add	r2, r3
 80081c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c8:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80081ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80081cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ce:	441a      	add	r2, r3
 80081d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d2:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80081d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80081d8:	2b03      	cmp	r3, #3
 80081da:	d11e      	bne.n	800821a <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80081dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081de:	3330      	adds	r3, #48	; 0x30
 80081e0:	332a      	adds	r3, #42	; 0x2a
 80081e2:	4618      	mov	r0, r3
 80081e4:	f7fe fc56 	bl	8006a94 <ld_word>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d001      	beq.n	80081f2 <find_volume+0x332>
 80081ee:	230d      	movs	r3, #13
 80081f0:	e0a8      	b.n	8008344 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80081f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f4:	891b      	ldrh	r3, [r3, #8]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d001      	beq.n	80081fe <find_volume+0x33e>
 80081fa:	230d      	movs	r3, #13
 80081fc:	e0a2      	b.n	8008344 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80081fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008200:	3330      	adds	r3, #48	; 0x30
 8008202:	332c      	adds	r3, #44	; 0x2c
 8008204:	4618      	mov	r0, r3
 8008206:	f7fe fc5d 	bl	8006ac4 <ld_dword>
 800820a:	4602      	mov	r2, r0
 800820c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800820e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008212:	695b      	ldr	r3, [r3, #20]
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	647b      	str	r3, [r7, #68]	; 0x44
 8008218:	e01f      	b.n	800825a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800821a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800821c:	891b      	ldrh	r3, [r3, #8]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d101      	bne.n	8008226 <find_volume+0x366>
 8008222:	230d      	movs	r3, #13
 8008224:	e08e      	b.n	8008344 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008228:	6a1a      	ldr	r2, [r3, #32]
 800822a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800822c:	441a      	add	r2, r3
 800822e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008230:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008232:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008236:	2b02      	cmp	r3, #2
 8008238:	d103      	bne.n	8008242 <find_volume+0x382>
 800823a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823c:	695b      	ldr	r3, [r3, #20]
 800823e:	005b      	lsls	r3, r3, #1
 8008240:	e00a      	b.n	8008258 <find_volume+0x398>
 8008242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008244:	695a      	ldr	r2, [r3, #20]
 8008246:	4613      	mov	r3, r2
 8008248:	005b      	lsls	r3, r3, #1
 800824a:	4413      	add	r3, r2
 800824c:	085a      	lsrs	r2, r3, #1
 800824e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008250:	695b      	ldr	r3, [r3, #20]
 8008252:	f003 0301 	and.w	r3, r3, #1
 8008256:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008258:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800825a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800825c:	699a      	ldr	r2, [r3, #24]
 800825e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008260:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008264:	0a5b      	lsrs	r3, r3, #9
 8008266:	429a      	cmp	r2, r3
 8008268:	d201      	bcs.n	800826e <find_volume+0x3ae>
 800826a:	230d      	movs	r3, #13
 800826c:	e06a      	b.n	8008344 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800826e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008270:	f04f 32ff 	mov.w	r2, #4294967295
 8008274:	611a      	str	r2, [r3, #16]
 8008276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008278:	691a      	ldr	r2, [r3, #16]
 800827a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800827c:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800827e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008280:	2280      	movs	r2, #128	; 0x80
 8008282:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008284:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008288:	2b03      	cmp	r3, #3
 800828a:	d149      	bne.n	8008320 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800828c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800828e:	3330      	adds	r3, #48	; 0x30
 8008290:	3330      	adds	r3, #48	; 0x30
 8008292:	4618      	mov	r0, r3
 8008294:	f7fe fbfe 	bl	8006a94 <ld_word>
 8008298:	4603      	mov	r3, r0
 800829a:	2b01      	cmp	r3, #1
 800829c:	d140      	bne.n	8008320 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800829e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082a0:	3301      	adds	r3, #1
 80082a2:	4619      	mov	r1, r3
 80082a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80082a6:	f7fe fea5 	bl	8006ff4 <move_window>
 80082aa:	4603      	mov	r3, r0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d137      	bne.n	8008320 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 80082b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b2:	2200      	movs	r2, #0
 80082b4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80082b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b8:	3330      	adds	r3, #48	; 0x30
 80082ba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80082be:	4618      	mov	r0, r3
 80082c0:	f7fe fbe8 	bl	8006a94 <ld_word>
 80082c4:	4603      	mov	r3, r0
 80082c6:	461a      	mov	r2, r3
 80082c8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d127      	bne.n	8008320 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80082d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d2:	3330      	adds	r3, #48	; 0x30
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7fe fbf5 	bl	8006ac4 <ld_dword>
 80082da:	4602      	mov	r2, r0
 80082dc:	4b1b      	ldr	r3, [pc, #108]	; (800834c <find_volume+0x48c>)
 80082de:	429a      	cmp	r2, r3
 80082e0:	d11e      	bne.n	8008320 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80082e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e4:	3330      	adds	r3, #48	; 0x30
 80082e6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80082ea:	4618      	mov	r0, r3
 80082ec:	f7fe fbea 	bl	8006ac4 <ld_dword>
 80082f0:	4602      	mov	r2, r0
 80082f2:	4b17      	ldr	r3, [pc, #92]	; (8008350 <find_volume+0x490>)
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d113      	bne.n	8008320 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80082f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082fa:	3330      	adds	r3, #48	; 0x30
 80082fc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008300:	4618      	mov	r0, r3
 8008302:	f7fe fbdf 	bl	8006ac4 <ld_dword>
 8008306:	4602      	mov	r2, r0
 8008308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800830a:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800830c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800830e:	3330      	adds	r3, #48	; 0x30
 8008310:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008314:	4618      	mov	r0, r3
 8008316:	f7fe fbd5 	bl	8006ac4 <ld_dword>
 800831a:	4602      	mov	r2, r0
 800831c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800831e:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008322:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008326:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008328:	4b0a      	ldr	r3, [pc, #40]	; (8008354 <find_volume+0x494>)
 800832a:	881b      	ldrh	r3, [r3, #0]
 800832c:	3301      	adds	r3, #1
 800832e:	b29a      	uxth	r2, r3
 8008330:	4b08      	ldr	r3, [pc, #32]	; (8008354 <find_volume+0x494>)
 8008332:	801a      	strh	r2, [r3, #0]
 8008334:	4b07      	ldr	r3, [pc, #28]	; (8008354 <find_volume+0x494>)
 8008336:	881a      	ldrh	r2, [r3, #0]
 8008338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800833a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800833c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800833e:	f7fe fdf1 	bl	8006f24 <clear_lock>
#endif
	return FR_OK;
 8008342:	2300      	movs	r3, #0
}
 8008344:	4618      	mov	r0, r3
 8008346:	3758      	adds	r7, #88	; 0x58
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}
 800834c:	41615252 	.word	0x41615252
 8008350:	61417272 	.word	0x61417272
 8008354:	20000784 	.word	0x20000784

08008358 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008362:	2309      	movs	r3, #9
 8008364:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d01c      	beq.n	80083a6 <validate+0x4e>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d018      	beq.n	80083a6 <validate+0x4e>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d013      	beq.n	80083a6 <validate+0x4e>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	889a      	ldrh	r2, [r3, #4]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	88db      	ldrh	r3, [r3, #6]
 8008388:	429a      	cmp	r2, r3
 800838a:	d10c      	bne.n	80083a6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	785b      	ldrb	r3, [r3, #1]
 8008392:	4618      	mov	r0, r3
 8008394:	f7fe fae0 	bl	8006958 <disk_status>
 8008398:	4603      	mov	r3, r0
 800839a:	f003 0301 	and.w	r3, r3, #1
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d101      	bne.n	80083a6 <validate+0x4e>
			res = FR_OK;
 80083a2:	2300      	movs	r3, #0
 80083a4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80083a6:	7bfb      	ldrb	r3, [r7, #15]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d102      	bne.n	80083b2 <validate+0x5a>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	e000      	b.n	80083b4 <validate+0x5c>
 80083b2:	2300      	movs	r3, #0
 80083b4:	683a      	ldr	r2, [r7, #0]
 80083b6:	6013      	str	r3, [r2, #0]
	return res;
 80083b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3710      	adds	r7, #16
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
	...

080083c4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b088      	sub	sp, #32
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	60b9      	str	r1, [r7, #8]
 80083ce:	4613      	mov	r3, r2
 80083d0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80083d6:	f107 0310 	add.w	r3, r7, #16
 80083da:	4618      	mov	r0, r3
 80083dc:	f7ff fcd5 	bl	8007d8a <get_ldnumber>
 80083e0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80083e2:	69fb      	ldr	r3, [r7, #28]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	da01      	bge.n	80083ec <f_mount+0x28>
 80083e8:	230b      	movs	r3, #11
 80083ea:	e02b      	b.n	8008444 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80083ec:	4a17      	ldr	r2, [pc, #92]	; (800844c <f_mount+0x88>)
 80083ee:	69fb      	ldr	r3, [r7, #28]
 80083f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083f4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80083f6:	69bb      	ldr	r3, [r7, #24]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d005      	beq.n	8008408 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80083fc:	69b8      	ldr	r0, [r7, #24]
 80083fe:	f7fe fd91 	bl	8006f24 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008402:	69bb      	ldr	r3, [r7, #24]
 8008404:	2200      	movs	r2, #0
 8008406:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d002      	beq.n	8008414 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2200      	movs	r2, #0
 8008412:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008414:	68fa      	ldr	r2, [r7, #12]
 8008416:	490d      	ldr	r1, [pc, #52]	; (800844c <f_mount+0x88>)
 8008418:	69fb      	ldr	r3, [r7, #28]
 800841a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d002      	beq.n	800842a <f_mount+0x66>
 8008424:	79fb      	ldrb	r3, [r7, #7]
 8008426:	2b01      	cmp	r3, #1
 8008428:	d001      	beq.n	800842e <f_mount+0x6a>
 800842a:	2300      	movs	r3, #0
 800842c:	e00a      	b.n	8008444 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800842e:	f107 010c 	add.w	r1, r7, #12
 8008432:	f107 0308 	add.w	r3, r7, #8
 8008436:	2200      	movs	r2, #0
 8008438:	4618      	mov	r0, r3
 800843a:	f7ff fd41 	bl	8007ec0 <find_volume>
 800843e:	4603      	mov	r3, r0
 8008440:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008442:	7dfb      	ldrb	r3, [r7, #23]
}
 8008444:	4618      	mov	r0, r3
 8008446:	3720      	adds	r7, #32
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}
 800844c:	20000780 	.word	0x20000780

08008450 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b098      	sub	sp, #96	; 0x60
 8008454:	af00      	add	r7, sp, #0
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	60b9      	str	r1, [r7, #8]
 800845a:	4613      	mov	r3, r2
 800845c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d101      	bne.n	8008468 <f_open+0x18>
 8008464:	2309      	movs	r3, #9
 8008466:	e1ad      	b.n	80087c4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008468:	79fb      	ldrb	r3, [r7, #7]
 800846a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800846e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008470:	79fa      	ldrb	r2, [r7, #7]
 8008472:	f107 0110 	add.w	r1, r7, #16
 8008476:	f107 0308 	add.w	r3, r7, #8
 800847a:	4618      	mov	r0, r3
 800847c:	f7ff fd20 	bl	8007ec0 <find_volume>
 8008480:	4603      	mov	r3, r0
 8008482:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8008486:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800848a:	2b00      	cmp	r3, #0
 800848c:	f040 8191 	bne.w	80087b2 <f_open+0x362>
		dj.obj.fs = fs;
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008494:	68ba      	ldr	r2, [r7, #8]
 8008496:	f107 0314 	add.w	r3, r7, #20
 800849a:	4611      	mov	r1, r2
 800849c:	4618      	mov	r0, r3
 800849e:	f7ff fc03 	bl	8007ca8 <follow_path>
 80084a2:	4603      	mov	r3, r0
 80084a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80084a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d11a      	bne.n	80084e6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80084b0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80084b4:	b25b      	sxtb	r3, r3
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	da03      	bge.n	80084c2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80084ba:	2306      	movs	r3, #6
 80084bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80084c0:	e011      	b.n	80084e6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80084c2:	79fb      	ldrb	r3, [r7, #7]
 80084c4:	f023 0301 	bic.w	r3, r3, #1
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	bf14      	ite	ne
 80084cc:	2301      	movne	r3, #1
 80084ce:	2300      	moveq	r3, #0
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	461a      	mov	r2, r3
 80084d4:	f107 0314 	add.w	r3, r7, #20
 80084d8:	4611      	mov	r1, r2
 80084da:	4618      	mov	r0, r3
 80084dc:	f7fe fbda 	bl	8006c94 <chk_lock>
 80084e0:	4603      	mov	r3, r0
 80084e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80084e6:	79fb      	ldrb	r3, [r7, #7]
 80084e8:	f003 031c 	and.w	r3, r3, #28
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d07f      	beq.n	80085f0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80084f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d017      	beq.n	8008528 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80084f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084fc:	2b04      	cmp	r3, #4
 80084fe:	d10e      	bne.n	800851e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008500:	f7fe fc24 	bl	8006d4c <enq_lock>
 8008504:	4603      	mov	r3, r0
 8008506:	2b00      	cmp	r3, #0
 8008508:	d006      	beq.n	8008518 <f_open+0xc8>
 800850a:	f107 0314 	add.w	r3, r7, #20
 800850e:	4618      	mov	r0, r3
 8008510:	f7ff fb03 	bl	8007b1a <dir_register>
 8008514:	4603      	mov	r3, r0
 8008516:	e000      	b.n	800851a <f_open+0xca>
 8008518:	2312      	movs	r3, #18
 800851a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800851e:	79fb      	ldrb	r3, [r7, #7]
 8008520:	f043 0308 	orr.w	r3, r3, #8
 8008524:	71fb      	strb	r3, [r7, #7]
 8008526:	e010      	b.n	800854a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008528:	7ebb      	ldrb	r3, [r7, #26]
 800852a:	f003 0311 	and.w	r3, r3, #17
 800852e:	2b00      	cmp	r3, #0
 8008530:	d003      	beq.n	800853a <f_open+0xea>
					res = FR_DENIED;
 8008532:	2307      	movs	r3, #7
 8008534:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008538:	e007      	b.n	800854a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800853a:	79fb      	ldrb	r3, [r7, #7]
 800853c:	f003 0304 	and.w	r3, r3, #4
 8008540:	2b00      	cmp	r3, #0
 8008542:	d002      	beq.n	800854a <f_open+0xfa>
 8008544:	2308      	movs	r3, #8
 8008546:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800854a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800854e:	2b00      	cmp	r3, #0
 8008550:	d168      	bne.n	8008624 <f_open+0x1d4>
 8008552:	79fb      	ldrb	r3, [r7, #7]
 8008554:	f003 0308 	and.w	r3, r3, #8
 8008558:	2b00      	cmp	r3, #0
 800855a:	d063      	beq.n	8008624 <f_open+0x1d4>
				dw = GET_FATTIME();
 800855c:	f7fd fcc0 	bl	8005ee0 <get_fattime>
 8008560:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008564:	330e      	adds	r3, #14
 8008566:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008568:	4618      	mov	r0, r3
 800856a:	f7fe fae9 	bl	8006b40 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800856e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008570:	3316      	adds	r3, #22
 8008572:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008574:	4618      	mov	r0, r3
 8008576:	f7fe fae3 	bl	8006b40 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800857a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800857c:	330b      	adds	r3, #11
 800857e:	2220      	movs	r2, #32
 8008580:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008586:	4611      	mov	r1, r2
 8008588:	4618      	mov	r0, r3
 800858a:	f7ff fa32 	bl	80079f2 <ld_clust>
 800858e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008594:	2200      	movs	r2, #0
 8008596:	4618      	mov	r0, r3
 8008598:	f7ff fa4a 	bl	8007a30 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800859c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800859e:	331c      	adds	r3, #28
 80085a0:	2100      	movs	r1, #0
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7fe facc 	bl	8006b40 <st_dword>
					fs->wflag = 1;
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	2201      	movs	r2, #1
 80085ac:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80085ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d037      	beq.n	8008624 <f_open+0x1d4>
						dw = fs->winsect;
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80085ba:	f107 0314 	add.w	r3, r7, #20
 80085be:	2200      	movs	r2, #0
 80085c0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80085c2:	4618      	mov	r0, r3
 80085c4:	f7fe ff5d 	bl	8007482 <remove_chain>
 80085c8:	4603      	mov	r3, r0
 80085ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80085ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d126      	bne.n	8008624 <f_open+0x1d4>
							res = move_window(fs, dw);
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80085da:	4618      	mov	r0, r3
 80085dc:	f7fe fd0a 	bl	8006ff4 <move_window>
 80085e0:	4603      	mov	r3, r0
 80085e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80085ea:	3a01      	subs	r2, #1
 80085ec:	60da      	str	r2, [r3, #12]
 80085ee:	e019      	b.n	8008624 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80085f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d115      	bne.n	8008624 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80085f8:	7ebb      	ldrb	r3, [r7, #26]
 80085fa:	f003 0310 	and.w	r3, r3, #16
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d003      	beq.n	800860a <f_open+0x1ba>
					res = FR_NO_FILE;
 8008602:	2304      	movs	r3, #4
 8008604:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008608:	e00c      	b.n	8008624 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800860a:	79fb      	ldrb	r3, [r7, #7]
 800860c:	f003 0302 	and.w	r3, r3, #2
 8008610:	2b00      	cmp	r3, #0
 8008612:	d007      	beq.n	8008624 <f_open+0x1d4>
 8008614:	7ebb      	ldrb	r3, [r7, #26]
 8008616:	f003 0301 	and.w	r3, r3, #1
 800861a:	2b00      	cmp	r3, #0
 800861c:	d002      	beq.n	8008624 <f_open+0x1d4>
						res = FR_DENIED;
 800861e:	2307      	movs	r3, #7
 8008620:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008624:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008628:	2b00      	cmp	r3, #0
 800862a:	d128      	bne.n	800867e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800862c:	79fb      	ldrb	r3, [r7, #7]
 800862e:	f003 0308 	and.w	r3, r3, #8
 8008632:	2b00      	cmp	r3, #0
 8008634:	d003      	beq.n	800863e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008636:	79fb      	ldrb	r3, [r7, #7]
 8008638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800863c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008646:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800864c:	79fb      	ldrb	r3, [r7, #7]
 800864e:	f023 0301 	bic.w	r3, r3, #1
 8008652:	2b00      	cmp	r3, #0
 8008654:	bf14      	ite	ne
 8008656:	2301      	movne	r3, #1
 8008658:	2300      	moveq	r3, #0
 800865a:	b2db      	uxtb	r3, r3
 800865c:	461a      	mov	r2, r3
 800865e:	f107 0314 	add.w	r3, r7, #20
 8008662:	4611      	mov	r1, r2
 8008664:	4618      	mov	r0, r3
 8008666:	f7fe fb93 	bl	8006d90 <inc_lock>
 800866a:	4602      	mov	r2, r0
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	691b      	ldr	r3, [r3, #16]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d102      	bne.n	800867e <f_open+0x22e>
 8008678:	2302      	movs	r3, #2
 800867a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800867e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008682:	2b00      	cmp	r3, #0
 8008684:	f040 8095 	bne.w	80087b2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800868c:	4611      	mov	r1, r2
 800868e:	4618      	mov	r0, r3
 8008690:	f7ff f9af 	bl	80079f2 <ld_clust>
 8008694:	4602      	mov	r2, r0
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800869a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800869c:	331c      	adds	r3, #28
 800869e:	4618      	mov	r0, r3
 80086a0:	f7fe fa10 	bl	8006ac4 <ld_dword>
 80086a4:	4602      	mov	r2, r0
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2200      	movs	r2, #0
 80086ae:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80086b0:	693a      	ldr	r2, [r7, #16]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	88da      	ldrh	r2, [r3, #6]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	79fa      	ldrb	r2, [r7, #7]
 80086c2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2200      	movs	r2, #0
 80086c8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2200      	movs	r2, #0
 80086ce:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2200      	movs	r2, #0
 80086d4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	3330      	adds	r3, #48	; 0x30
 80086da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086de:	2100      	movs	r1, #0
 80086e0:	4618      	mov	r0, r3
 80086e2:	f7fe fa7a 	bl	8006bda <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80086e6:	79fb      	ldrb	r3, [r7, #7]
 80086e8:	f003 0320 	and.w	r3, r3, #32
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d060      	beq.n	80087b2 <f_open+0x362>
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	68db      	ldr	r3, [r3, #12]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d05c      	beq.n	80087b2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	68da      	ldr	r2, [r3, #12]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	895b      	ldrh	r3, [r3, #10]
 8008704:	025b      	lsls	r3, r3, #9
 8008706:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	68db      	ldr	r3, [r3, #12]
 8008712:	657b      	str	r3, [r7, #84]	; 0x54
 8008714:	e016      	b.n	8008744 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800871a:	4618      	mov	r0, r3
 800871c:	f7fe fd25 	bl	800716a <get_fat>
 8008720:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008722:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008724:	2b01      	cmp	r3, #1
 8008726:	d802      	bhi.n	800872e <f_open+0x2de>
 8008728:	2302      	movs	r3, #2
 800872a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800872e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008734:	d102      	bne.n	800873c <f_open+0x2ec>
 8008736:	2301      	movs	r3, #1
 8008738:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800873c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800873e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008740:	1ad3      	subs	r3, r2, r3
 8008742:	657b      	str	r3, [r7, #84]	; 0x54
 8008744:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008748:	2b00      	cmp	r3, #0
 800874a:	d103      	bne.n	8008754 <f_open+0x304>
 800874c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800874e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008750:	429a      	cmp	r2, r3
 8008752:	d8e0      	bhi.n	8008716 <f_open+0x2c6>
				}
				fp->clust = clst;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008758:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800875a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800875e:	2b00      	cmp	r3, #0
 8008760:	d127      	bne.n	80087b2 <f_open+0x362>
 8008762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008764:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008768:	2b00      	cmp	r3, #0
 800876a:	d022      	beq.n	80087b2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008770:	4618      	mov	r0, r3
 8008772:	f7fe fcdb 	bl	800712c <clust2sect>
 8008776:	6478      	str	r0, [r7, #68]	; 0x44
 8008778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800877a:	2b00      	cmp	r3, #0
 800877c:	d103      	bne.n	8008786 <f_open+0x336>
						res = FR_INT_ERR;
 800877e:	2302      	movs	r3, #2
 8008780:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008784:	e015      	b.n	80087b2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008786:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008788:	0a5a      	lsrs	r2, r3, #9
 800878a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800878c:	441a      	add	r2, r3
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	7858      	ldrb	r0, [r3, #1]
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6a1a      	ldr	r2, [r3, #32]
 80087a0:	2301      	movs	r3, #1
 80087a2:	f7fe f919 	bl	80069d8 <disk_read>
 80087a6:	4603      	mov	r3, r0
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d002      	beq.n	80087b2 <f_open+0x362>
 80087ac:	2301      	movs	r3, #1
 80087ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80087b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d002      	beq.n	80087c0 <f_open+0x370>
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2200      	movs	r2, #0
 80087be:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80087c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3760      	adds	r7, #96	; 0x60
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b08c      	sub	sp, #48	; 0x30
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	607a      	str	r2, [r7, #4]
 80087d8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	2200      	movs	r2, #0
 80087e2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f107 0210 	add.w	r2, r7, #16
 80087ea:	4611      	mov	r1, r2
 80087ec:	4618      	mov	r0, r3
 80087ee:	f7ff fdb3 	bl	8008358 <validate>
 80087f2:	4603      	mov	r3, r0
 80087f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80087f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d107      	bne.n	8008810 <f_write+0x44>
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	7d5b      	ldrb	r3, [r3, #21]
 8008804:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008808:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800880c:	2b00      	cmp	r3, #0
 800880e:	d002      	beq.n	8008816 <f_write+0x4a>
 8008810:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008814:	e14b      	b.n	8008aae <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	7d1b      	ldrb	r3, [r3, #20]
 800881a:	f003 0302 	and.w	r3, r3, #2
 800881e:	2b00      	cmp	r3, #0
 8008820:	d101      	bne.n	8008826 <f_write+0x5a>
 8008822:	2307      	movs	r3, #7
 8008824:	e143      	b.n	8008aae <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	699a      	ldr	r2, [r3, #24]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	441a      	add	r2, r3
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	699b      	ldr	r3, [r3, #24]
 8008832:	429a      	cmp	r2, r3
 8008834:	f080 812d 	bcs.w	8008a92 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	699b      	ldr	r3, [r3, #24]
 800883c:	43db      	mvns	r3, r3
 800883e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008840:	e127      	b.n	8008a92 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	699b      	ldr	r3, [r3, #24]
 8008846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800884a:	2b00      	cmp	r3, #0
 800884c:	f040 80e3 	bne.w	8008a16 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	699b      	ldr	r3, [r3, #24]
 8008854:	0a5b      	lsrs	r3, r3, #9
 8008856:	693a      	ldr	r2, [r7, #16]
 8008858:	8952      	ldrh	r2, [r2, #10]
 800885a:	3a01      	subs	r2, #1
 800885c:	4013      	ands	r3, r2
 800885e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008860:	69bb      	ldr	r3, [r7, #24]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d143      	bne.n	80088ee <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	699b      	ldr	r3, [r3, #24]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d10c      	bne.n	8008888 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008876:	2b00      	cmp	r3, #0
 8008878:	d11a      	bne.n	80088b0 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2100      	movs	r1, #0
 800887e:	4618      	mov	r0, r3
 8008880:	f7fe fe64 	bl	800754c <create_chain>
 8008884:	62b8      	str	r0, [r7, #40]	; 0x28
 8008886:	e013      	b.n	80088b0 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800888c:	2b00      	cmp	r3, #0
 800888e:	d007      	beq.n	80088a0 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	699b      	ldr	r3, [r3, #24]
 8008894:	4619      	mov	r1, r3
 8008896:	68f8      	ldr	r0, [r7, #12]
 8008898:	f7fe fef0 	bl	800767c <clmt_clust>
 800889c:	62b8      	str	r0, [r7, #40]	; 0x28
 800889e:	e007      	b.n	80088b0 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80088a0:	68fa      	ldr	r2, [r7, #12]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	69db      	ldr	r3, [r3, #28]
 80088a6:	4619      	mov	r1, r3
 80088a8:	4610      	mov	r0, r2
 80088aa:	f7fe fe4f 	bl	800754c <create_chain>
 80088ae:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80088b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	f000 80f2 	beq.w	8008a9c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80088b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d104      	bne.n	80088c8 <f_write+0xfc>
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2202      	movs	r2, #2
 80088c2:	755a      	strb	r2, [r3, #21]
 80088c4:	2302      	movs	r3, #2
 80088c6:	e0f2      	b.n	8008aae <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80088c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ce:	d104      	bne.n	80088da <f_write+0x10e>
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2201      	movs	r2, #1
 80088d4:	755a      	strb	r2, [r3, #21]
 80088d6:	2301      	movs	r3, #1
 80088d8:	e0e9      	b.n	8008aae <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088de:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d102      	bne.n	80088ee <f_write+0x122>
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088ec:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	7d1b      	ldrb	r3, [r3, #20]
 80088f2:	b25b      	sxtb	r3, r3
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	da18      	bge.n	800892a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	7858      	ldrb	r0, [r3, #1]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	6a1a      	ldr	r2, [r3, #32]
 8008906:	2301      	movs	r3, #1
 8008908:	f7fe f886 	bl	8006a18 <disk_write>
 800890c:	4603      	mov	r3, r0
 800890e:	2b00      	cmp	r3, #0
 8008910:	d004      	beq.n	800891c <f_write+0x150>
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2201      	movs	r2, #1
 8008916:	755a      	strb	r2, [r3, #21]
 8008918:	2301      	movs	r3, #1
 800891a:	e0c8      	b.n	8008aae <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	7d1b      	ldrb	r3, [r3, #20]
 8008920:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008924:	b2da      	uxtb	r2, r3
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800892a:	693a      	ldr	r2, [r7, #16]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	69db      	ldr	r3, [r3, #28]
 8008930:	4619      	mov	r1, r3
 8008932:	4610      	mov	r0, r2
 8008934:	f7fe fbfa 	bl	800712c <clust2sect>
 8008938:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d104      	bne.n	800894a <f_write+0x17e>
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2202      	movs	r2, #2
 8008944:	755a      	strb	r2, [r3, #21]
 8008946:	2302      	movs	r3, #2
 8008948:	e0b1      	b.n	8008aae <f_write+0x2e2>
			sect += csect;
 800894a:	697a      	ldr	r2, [r7, #20]
 800894c:	69bb      	ldr	r3, [r7, #24]
 800894e:	4413      	add	r3, r2
 8008950:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	0a5b      	lsrs	r3, r3, #9
 8008956:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008958:	6a3b      	ldr	r3, [r7, #32]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d03c      	beq.n	80089d8 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800895e:	69ba      	ldr	r2, [r7, #24]
 8008960:	6a3b      	ldr	r3, [r7, #32]
 8008962:	4413      	add	r3, r2
 8008964:	693a      	ldr	r2, [r7, #16]
 8008966:	8952      	ldrh	r2, [r2, #10]
 8008968:	4293      	cmp	r3, r2
 800896a:	d905      	bls.n	8008978 <f_write+0x1ac>
					cc = fs->csize - csect;
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	895b      	ldrh	r3, [r3, #10]
 8008970:	461a      	mov	r2, r3
 8008972:	69bb      	ldr	r3, [r7, #24]
 8008974:	1ad3      	subs	r3, r2, r3
 8008976:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	7858      	ldrb	r0, [r3, #1]
 800897c:	6a3b      	ldr	r3, [r7, #32]
 800897e:	697a      	ldr	r2, [r7, #20]
 8008980:	69f9      	ldr	r1, [r7, #28]
 8008982:	f7fe f849 	bl	8006a18 <disk_write>
 8008986:	4603      	mov	r3, r0
 8008988:	2b00      	cmp	r3, #0
 800898a:	d004      	beq.n	8008996 <f_write+0x1ca>
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2201      	movs	r2, #1
 8008990:	755a      	strb	r2, [r3, #21]
 8008992:	2301      	movs	r3, #1
 8008994:	e08b      	b.n	8008aae <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6a1a      	ldr	r2, [r3, #32]
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	1ad3      	subs	r3, r2, r3
 800899e:	6a3a      	ldr	r2, [r7, #32]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d915      	bls.n	80089d0 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	6a1a      	ldr	r2, [r3, #32]
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	1ad3      	subs	r3, r2, r3
 80089b2:	025b      	lsls	r3, r3, #9
 80089b4:	69fa      	ldr	r2, [r7, #28]
 80089b6:	4413      	add	r3, r2
 80089b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80089bc:	4619      	mov	r1, r3
 80089be:	f7fe f8eb 	bl	8006b98 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	7d1b      	ldrb	r3, [r3, #20]
 80089c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089ca:	b2da      	uxtb	r2, r3
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80089d0:	6a3b      	ldr	r3, [r7, #32]
 80089d2:	025b      	lsls	r3, r3, #9
 80089d4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80089d6:	e03f      	b.n	8008a58 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	6a1b      	ldr	r3, [r3, #32]
 80089dc:	697a      	ldr	r2, [r7, #20]
 80089de:	429a      	cmp	r2, r3
 80089e0:	d016      	beq.n	8008a10 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	699a      	ldr	r2, [r3, #24]
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d210      	bcs.n	8008a10 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	7858      	ldrb	r0, [r3, #1]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80089f8:	2301      	movs	r3, #1
 80089fa:	697a      	ldr	r2, [r7, #20]
 80089fc:	f7fd ffec 	bl	80069d8 <disk_read>
 8008a00:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d004      	beq.n	8008a10 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2201      	movs	r2, #1
 8008a0a:	755a      	strb	r2, [r3, #21]
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	e04e      	b.n	8008aae <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	697a      	ldr	r2, [r7, #20]
 8008a14:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	699b      	ldr	r3, [r3, #24]
 8008a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a1e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008a22:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d901      	bls.n	8008a30 <f_write+0x264>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	699b      	ldr	r3, [r3, #24]
 8008a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a3e:	4413      	add	r3, r2
 8008a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a42:	69f9      	ldr	r1, [r7, #28]
 8008a44:	4618      	mov	r0, r3
 8008a46:	f7fe f8a7 	bl	8006b98 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	7d1b      	ldrb	r3, [r3, #20]
 8008a4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008a52:	b2da      	uxtb	r2, r3
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008a58:	69fa      	ldr	r2, [r7, #28]
 8008a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5c:	4413      	add	r3, r2
 8008a5e:	61fb      	str	r3, [r7, #28]
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	699a      	ldr	r2, [r3, #24]
 8008a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a66:	441a      	add	r2, r3
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	619a      	str	r2, [r3, #24]
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	68da      	ldr	r2, [r3, #12]
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	699b      	ldr	r3, [r3, #24]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	bf38      	it	cc
 8008a78:	461a      	movcc	r2, r3
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	60da      	str	r2, [r3, #12]
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a84:	441a      	add	r2, r3
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	601a      	str	r2, [r3, #0]
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8e:	1ad3      	subs	r3, r2, r3
 8008a90:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	f47f aed4 	bne.w	8008842 <f_write+0x76>
 8008a9a:	e000      	b.n	8008a9e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008a9c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	7d1b      	ldrb	r3, [r3, #20]
 8008aa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008aa6:	b2da      	uxtb	r2, r3
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008aac:	2300      	movs	r3, #0
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3730      	adds	r7, #48	; 0x30
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}

08008ab6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008ab6:	b580      	push	{r7, lr}
 8008ab8:	b086      	sub	sp, #24
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f107 0208 	add.w	r2, r7, #8
 8008ac4:	4611      	mov	r1, r2
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f7ff fc46 	bl	8008358 <validate>
 8008acc:	4603      	mov	r3, r0
 8008ace:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008ad0:	7dfb      	ldrb	r3, [r7, #23]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d168      	bne.n	8008ba8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	7d1b      	ldrb	r3, [r3, #20]
 8008ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d062      	beq.n	8008ba8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	7d1b      	ldrb	r3, [r3, #20]
 8008ae6:	b25b      	sxtb	r3, r3
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	da15      	bge.n	8008b18 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	7858      	ldrb	r0, [r3, #1]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6a1a      	ldr	r2, [r3, #32]
 8008afa:	2301      	movs	r3, #1
 8008afc:	f7fd ff8c 	bl	8006a18 <disk_write>
 8008b00:	4603      	mov	r3, r0
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d001      	beq.n	8008b0a <f_sync+0x54>
 8008b06:	2301      	movs	r3, #1
 8008b08:	e04f      	b.n	8008baa <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	7d1b      	ldrb	r3, [r3, #20]
 8008b0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b12:	b2da      	uxtb	r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008b18:	f7fd f9e2 	bl	8005ee0 <get_fattime>
 8008b1c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008b1e:	68ba      	ldr	r2, [r7, #8]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b24:	4619      	mov	r1, r3
 8008b26:	4610      	mov	r0, r2
 8008b28:	f7fe fa64 	bl	8006ff4 <move_window>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008b30:	7dfb      	ldrb	r3, [r7, #23]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d138      	bne.n	8008ba8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b3a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	330b      	adds	r3, #11
 8008b40:	781a      	ldrb	r2, [r3, #0]
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	330b      	adds	r3, #11
 8008b46:	f042 0220 	orr.w	r2, r2, #32
 8008b4a:	b2d2      	uxtb	r2, r2
 8008b4c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6818      	ldr	r0, [r3, #0]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	689b      	ldr	r3, [r3, #8]
 8008b56:	461a      	mov	r2, r3
 8008b58:	68f9      	ldr	r1, [r7, #12]
 8008b5a:	f7fe ff69 	bl	8007a30 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f103 021c 	add.w	r2, r3, #28
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	4619      	mov	r1, r3
 8008b6a:	4610      	mov	r0, r2
 8008b6c:	f7fd ffe8 	bl	8006b40 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	3316      	adds	r3, #22
 8008b74:	6939      	ldr	r1, [r7, #16]
 8008b76:	4618      	mov	r0, r3
 8008b78:	f7fd ffe2 	bl	8006b40 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	3312      	adds	r3, #18
 8008b80:	2100      	movs	r1, #0
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7fd ffc1 	bl	8006b0a <st_word>
					fs->wflag = 1;
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	4618      	mov	r0, r3
 8008b92:	f7fe fa5d 	bl	8007050 <sync_fs>
 8008b96:	4603      	mov	r3, r0
 8008b98:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	7d1b      	ldrb	r3, [r3, #20]
 8008b9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ba2:	b2da      	uxtb	r2, r3
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008ba8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3718      	adds	r7, #24
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b084      	sub	sp, #16
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f7ff ff7b 	bl	8008ab6 <f_sync>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008bc4:	7bfb      	ldrb	r3, [r7, #15]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d118      	bne.n	8008bfc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f107 0208 	add.w	r2, r7, #8
 8008bd0:	4611      	mov	r1, r2
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f7ff fbc0 	bl	8008358 <validate>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008bdc:	7bfb      	ldrb	r3, [r7, #15]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d10c      	bne.n	8008bfc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	691b      	ldr	r3, [r3, #16]
 8008be6:	4618      	mov	r0, r3
 8008be8:	f7fe f960 	bl	8006eac <dec_lock>
 8008bec:	4603      	mov	r3, r0
 8008bee:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008bf0:	7bfb      	ldrb	r3, [r7, #15]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d102      	bne.n	8008bfc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3710      	adds	r7, #16
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}

08008c06 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b090      	sub	sp, #64	; 0x40
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
 8008c0e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f107 0208 	add.w	r2, r7, #8
 8008c16:	4611      	mov	r1, r2
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f7ff fb9d 	bl	8008358 <validate>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8008c24:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d103      	bne.n	8008c34 <f_lseek+0x2e>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	7d5b      	ldrb	r3, [r3, #21]
 8008c30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8008c34:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d002      	beq.n	8008c42 <f_lseek+0x3c>
 8008c3c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008c40:	e1e6      	b.n	8009010 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	f000 80d1 	beq.w	8008dee <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c52:	d15a      	bne.n	8008d0a <f_lseek+0x104>
			tbl = fp->cltbl;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c58:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8008c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5c:	1d1a      	adds	r2, r3, #4
 8008c5e:	627a      	str	r2, [r7, #36]	; 0x24
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	617b      	str	r3, [r7, #20]
 8008c64:	2302      	movs	r3, #2
 8008c66:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	689b      	ldr	r3, [r3, #8]
 8008c6c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8008c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d03a      	beq.n	8008cea <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8008c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c76:	613b      	str	r3, [r7, #16]
 8008c78:	2300      	movs	r3, #0
 8008c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c7e:	3302      	adds	r3, #2
 8008c80:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8008c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c84:	60fb      	str	r3, [r7, #12]
 8008c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c88:	3301      	adds	r3, #1
 8008c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7fe fa6a 	bl	800716a <get_fat>
 8008c96:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8008c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9a:	2b01      	cmp	r3, #1
 8008c9c:	d804      	bhi.n	8008ca8 <f_lseek+0xa2>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2202      	movs	r2, #2
 8008ca2:	755a      	strb	r2, [r3, #21]
 8008ca4:	2302      	movs	r3, #2
 8008ca6:	e1b3      	b.n	8009010 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cae:	d104      	bne.n	8008cba <f_lseek+0xb4>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	755a      	strb	r2, [r3, #21]
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e1aa      	b.n	8009010 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d0de      	beq.n	8008c82 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8008cc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d809      	bhi.n	8008ce0 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8008ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cce:	1d1a      	adds	r2, r3, #4
 8008cd0:	627a      	str	r2, [r7, #36]	; 0x24
 8008cd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cd4:	601a      	str	r2, [r3, #0]
 8008cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd8:	1d1a      	adds	r2, r3, #4
 8008cda:	627a      	str	r2, [r7, #36]	; 0x24
 8008cdc:	693a      	ldr	r2, [r7, #16]
 8008cde:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	695b      	ldr	r3, [r3, #20]
 8008ce4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d3c4      	bcc.n	8008c74 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cf0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8008cf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d803      	bhi.n	8008d02 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8008cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	601a      	str	r2, [r3, #0]
 8008d00:	e184      	b.n	800900c <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8008d02:	2311      	movs	r3, #17
 8008d04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008d08:	e180      	b.n	800900c <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	68db      	ldr	r3, [r3, #12]
 8008d0e:	683a      	ldr	r2, [r7, #0]
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d902      	bls.n	8008d1a <f_lseek+0x114>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	68db      	ldr	r3, [r3, #12]
 8008d18:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	683a      	ldr	r2, [r7, #0]
 8008d1e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	f000 8172 	beq.w	800900c <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	3b01      	subs	r3, #1
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f7fe fca4 	bl	800767c <clmt_clust>
 8008d34:	4602      	mov	r2, r0
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8008d3a:	68ba      	ldr	r2, [r7, #8]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	69db      	ldr	r3, [r3, #28]
 8008d40:	4619      	mov	r1, r3
 8008d42:	4610      	mov	r0, r2
 8008d44:	f7fe f9f2 	bl	800712c <clust2sect>
 8008d48:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8008d4a:	69bb      	ldr	r3, [r7, #24]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d104      	bne.n	8008d5a <f_lseek+0x154>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2202      	movs	r2, #2
 8008d54:	755a      	strb	r2, [r3, #21]
 8008d56:	2302      	movs	r3, #2
 8008d58:	e15a      	b.n	8009010 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	3b01      	subs	r3, #1
 8008d5e:	0a5b      	lsrs	r3, r3, #9
 8008d60:	68ba      	ldr	r2, [r7, #8]
 8008d62:	8952      	ldrh	r2, [r2, #10]
 8008d64:	3a01      	subs	r2, #1
 8008d66:	4013      	ands	r3, r2
 8008d68:	69ba      	ldr	r2, [r7, #24]
 8008d6a:	4413      	add	r3, r2
 8008d6c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	699b      	ldr	r3, [r3, #24]
 8008d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	f000 8148 	beq.w	800900c <f_lseek+0x406>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6a1b      	ldr	r3, [r3, #32]
 8008d80:	69ba      	ldr	r2, [r7, #24]
 8008d82:	429a      	cmp	r2, r3
 8008d84:	f000 8142 	beq.w	800900c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	7d1b      	ldrb	r3, [r3, #20]
 8008d8c:	b25b      	sxtb	r3, r3
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	da18      	bge.n	8008dc4 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	7858      	ldrb	r0, [r3, #1]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6a1a      	ldr	r2, [r3, #32]
 8008da0:	2301      	movs	r3, #1
 8008da2:	f7fd fe39 	bl	8006a18 <disk_write>
 8008da6:	4603      	mov	r3, r0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d004      	beq.n	8008db6 <f_lseek+0x1b0>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2201      	movs	r2, #1
 8008db0:	755a      	strb	r2, [r3, #21]
 8008db2:	2301      	movs	r3, #1
 8008db4:	e12c      	b.n	8009010 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	7d1b      	ldrb	r3, [r3, #20]
 8008dba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dbe:	b2da      	uxtb	r2, r3
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	7858      	ldrb	r0, [r3, #1]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008dce:	2301      	movs	r3, #1
 8008dd0:	69ba      	ldr	r2, [r7, #24]
 8008dd2:	f7fd fe01 	bl	80069d8 <disk_read>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d004      	beq.n	8008de6 <f_lseek+0x1e0>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2201      	movs	r2, #1
 8008de0:	755a      	strb	r2, [r3, #21]
 8008de2:	2301      	movs	r3, #1
 8008de4:	e114      	b.n	8009010 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	69ba      	ldr	r2, [r7, #24]
 8008dea:	621a      	str	r2, [r3, #32]
 8008dec:	e10e      	b.n	800900c <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	68db      	ldr	r3, [r3, #12]
 8008df2:	683a      	ldr	r2, [r7, #0]
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d908      	bls.n	8008e0a <f_lseek+0x204>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	7d1b      	ldrb	r3, [r3, #20]
 8008dfc:	f003 0302 	and.w	r3, r3, #2
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d102      	bne.n	8008e0a <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	699b      	ldr	r3, [r3, #24]
 8008e0e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8008e10:	2300      	movs	r3, #0
 8008e12:	637b      	str	r3, [r7, #52]	; 0x34
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e18:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	f000 80a7 	beq.w	8008f70 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	895b      	ldrh	r3, [r3, #10]
 8008e26:	025b      	lsls	r3, r3, #9
 8008e28:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8008e2a:	6a3b      	ldr	r3, [r7, #32]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d01b      	beq.n	8008e68 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	1e5a      	subs	r2, r3, #1
 8008e34:	69fb      	ldr	r3, [r7, #28]
 8008e36:	fbb2 f2f3 	udiv	r2, r2, r3
 8008e3a:	6a3b      	ldr	r3, [r7, #32]
 8008e3c:	1e59      	subs	r1, r3, #1
 8008e3e:	69fb      	ldr	r3, [r7, #28]
 8008e40:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d30f      	bcc.n	8008e68 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8008e48:	6a3b      	ldr	r3, [r7, #32]
 8008e4a:	1e5a      	subs	r2, r3, #1
 8008e4c:	69fb      	ldr	r3, [r7, #28]
 8008e4e:	425b      	negs	r3, r3
 8008e50:	401a      	ands	r2, r3
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	699b      	ldr	r3, [r3, #24]
 8008e5a:	683a      	ldr	r2, [r7, #0]
 8008e5c:	1ad3      	subs	r3, r2, r3
 8008e5e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	69db      	ldr	r3, [r3, #28]
 8008e64:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e66:	e022      	b.n	8008eae <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8008e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d119      	bne.n	8008ea8 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2100      	movs	r1, #0
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f7fe fb67 	bl	800754c <create_chain>
 8008e7e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e82:	2b01      	cmp	r3, #1
 8008e84:	d104      	bne.n	8008e90 <f_lseek+0x28a>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2202      	movs	r2, #2
 8008e8a:	755a      	strb	r2, [r3, #21]
 8008e8c:	2302      	movs	r3, #2
 8008e8e:	e0bf      	b.n	8009010 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e96:	d104      	bne.n	8008ea2 <f_lseek+0x29c>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	755a      	strb	r2, [r3, #21]
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e0b6      	b.n	8009010 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ea6:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008eac:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8008eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d05d      	beq.n	8008f70 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8008eb4:	e03a      	b.n	8008f2c <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8008eb6:	683a      	ldr	r2, [r7, #0]
 8008eb8:	69fb      	ldr	r3, [r7, #28]
 8008eba:	1ad3      	subs	r3, r2, r3
 8008ebc:	603b      	str	r3, [r7, #0]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	699a      	ldr	r2, [r3, #24]
 8008ec2:	69fb      	ldr	r3, [r7, #28]
 8008ec4:	441a      	add	r2, r3
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	7d1b      	ldrb	r3, [r3, #20]
 8008ece:	f003 0302 	and.w	r3, r3, #2
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d00b      	beq.n	8008eee <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7fe fb36 	bl	800754c <create_chain>
 8008ee0:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8008ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d108      	bne.n	8008efa <f_lseek+0x2f4>
							ofs = 0; break;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	603b      	str	r3, [r7, #0]
 8008eec:	e022      	b.n	8008f34 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f7fe f939 	bl	800716a <get_fat>
 8008ef8:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f00:	d104      	bne.n	8008f0c <f_lseek+0x306>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2201      	movs	r2, #1
 8008f06:	755a      	strb	r2, [r3, #21]
 8008f08:	2301      	movs	r3, #1
 8008f0a:	e081      	b.n	8009010 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8008f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d904      	bls.n	8008f1c <f_lseek+0x316>
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	695b      	ldr	r3, [r3, #20]
 8008f16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d304      	bcc.n	8008f26 <f_lseek+0x320>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2202      	movs	r2, #2
 8008f20:	755a      	strb	r2, [r3, #21]
 8008f22:	2302      	movs	r3, #2
 8008f24:	e074      	b.n	8009010 <f_lseek+0x40a>
					fp->clust = clst;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f2a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8008f2c:	683a      	ldr	r2, [r7, #0]
 8008f2e:	69fb      	ldr	r3, [r7, #28]
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d8c0      	bhi.n	8008eb6 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	699a      	ldr	r2, [r3, #24]
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	441a      	add	r2, r3
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d012      	beq.n	8008f70 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f7fe f8ec 	bl	800712c <clust2sect>
 8008f54:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8008f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d104      	bne.n	8008f66 <f_lseek+0x360>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2202      	movs	r2, #2
 8008f60:	755a      	strb	r2, [r3, #21]
 8008f62:	2302      	movs	r3, #2
 8008f64:	e054      	b.n	8009010 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	0a5b      	lsrs	r3, r3, #9
 8008f6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f6c:	4413      	add	r3, r2
 8008f6e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	699a      	ldr	r2, [r3, #24]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	68db      	ldr	r3, [r3, #12]
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d90a      	bls.n	8008f92 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	699a      	ldr	r2, [r3, #24]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	7d1b      	ldrb	r3, [r3, #20]
 8008f88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f8c:	b2da      	uxtb	r2, r3
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	699b      	ldr	r3, [r3, #24]
 8008f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d036      	beq.n	800900c <f_lseek+0x406>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6a1b      	ldr	r3, [r3, #32]
 8008fa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d031      	beq.n	800900c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	7d1b      	ldrb	r3, [r3, #20]
 8008fac:	b25b      	sxtb	r3, r3
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	da18      	bge.n	8008fe4 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	7858      	ldrb	r0, [r3, #1]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6a1a      	ldr	r2, [r3, #32]
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	f7fd fd29 	bl	8006a18 <disk_write>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d004      	beq.n	8008fd6 <f_lseek+0x3d0>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	755a      	strb	r2, [r3, #21]
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e01c      	b.n	8009010 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	7d1b      	ldrb	r3, [r3, #20]
 8008fda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fde:	b2da      	uxtb	r2, r3
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	7858      	ldrb	r0, [r3, #1]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008fee:	2301      	movs	r3, #1
 8008ff0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ff2:	f7fd fcf1 	bl	80069d8 <disk_read>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d004      	beq.n	8009006 <f_lseek+0x400>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2201      	movs	r2, #1
 8009000:	755a      	strb	r2, [r3, #21]
 8009002:	2301      	movs	r3, #1
 8009004:	e004      	b.n	8009010 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800900a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800900c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009010:	4618      	mov	r0, r3
 8009012:	3740      	adds	r7, #64	; 0x40
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}

08009018 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b092      	sub	sp, #72	; 0x48
 800901c:	af00      	add	r7, sp, #0
 800901e:	60f8      	str	r0, [r7, #12]
 8009020:	60b9      	str	r1, [r7, #8]
 8009022:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8009024:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8009028:	f107 030c 	add.w	r3, r7, #12
 800902c:	2200      	movs	r2, #0
 800902e:	4618      	mov	r0, r3
 8009030:	f7fe ff46 	bl	8007ec0 <find_volume>
 8009034:	4603      	mov	r3, r0
 8009036:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800903a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800903e:	2b00      	cmp	r3, #0
 8009040:	f040 8099 	bne.w	8009176 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8009044:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800904a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800904c:	691a      	ldr	r2, [r3, #16]
 800904e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009050:	695b      	ldr	r3, [r3, #20]
 8009052:	3b02      	subs	r3, #2
 8009054:	429a      	cmp	r2, r3
 8009056:	d804      	bhi.n	8009062 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8009058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800905a:	691a      	ldr	r2, [r3, #16]
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	601a      	str	r2, [r3, #0]
 8009060:	e089      	b.n	8009176 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8009062:	2300      	movs	r3, #0
 8009064:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8009066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009068:	781b      	ldrb	r3, [r3, #0]
 800906a:	2b01      	cmp	r3, #1
 800906c:	d128      	bne.n	80090c0 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800906e:	2302      	movs	r3, #2
 8009070:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009074:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8009076:	f107 0314 	add.w	r3, r7, #20
 800907a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800907c:	4618      	mov	r0, r3
 800907e:	f7fe f874 	bl	800716a <get_fat>
 8009082:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8009084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800908a:	d103      	bne.n	8009094 <f_getfree+0x7c>
 800908c:	2301      	movs	r3, #1
 800908e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009092:	e063      	b.n	800915c <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8009094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009096:	2b01      	cmp	r3, #1
 8009098:	d103      	bne.n	80090a2 <f_getfree+0x8a>
 800909a:	2302      	movs	r3, #2
 800909c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80090a0:	e05c      	b.n	800915c <f_getfree+0x144>
					if (stat == 0) nfree++;
 80090a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d102      	bne.n	80090ae <f_getfree+0x96>
 80090a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090aa:	3301      	adds	r3, #1
 80090ac:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 80090ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090b0:	3301      	adds	r3, #1
 80090b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b6:	695b      	ldr	r3, [r3, #20]
 80090b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d3db      	bcc.n	8009076 <f_getfree+0x5e>
 80090be:	e04d      	b.n	800915c <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80090c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c2:	695b      	ldr	r3, [r3, #20]
 80090c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c8:	6a1b      	ldr	r3, [r3, #32]
 80090ca:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 80090cc:	2300      	movs	r3, #0
 80090ce:	637b      	str	r3, [r7, #52]	; 0x34
 80090d0:	2300      	movs	r3, #0
 80090d2:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 80090d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d113      	bne.n	8009102 <f_getfree+0xea>
							res = move_window(fs, sect++);
 80090da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090de:	1c5a      	adds	r2, r3, #1
 80090e0:	63ba      	str	r2, [r7, #56]	; 0x38
 80090e2:	4619      	mov	r1, r3
 80090e4:	f7fd ff86 	bl	8006ff4 <move_window>
 80090e8:	4603      	mov	r3, r0
 80090ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 80090ee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d131      	bne.n	800915a <f_getfree+0x142>
							p = fs->win;
 80090f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f8:	3330      	adds	r3, #48	; 0x30
 80090fa:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 80090fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009100:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8009102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	2b02      	cmp	r3, #2
 8009108:	d10f      	bne.n	800912a <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800910a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800910c:	f7fd fcc2 	bl	8006a94 <ld_word>
 8009110:	4603      	mov	r3, r0
 8009112:	2b00      	cmp	r3, #0
 8009114:	d102      	bne.n	800911c <f_getfree+0x104>
 8009116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009118:	3301      	adds	r3, #1
 800911a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800911c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800911e:	3302      	adds	r3, #2
 8009120:	633b      	str	r3, [r7, #48]	; 0x30
 8009122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009124:	3b02      	subs	r3, #2
 8009126:	637b      	str	r3, [r7, #52]	; 0x34
 8009128:	e010      	b.n	800914c <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800912a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800912c:	f7fd fcca 	bl	8006ac4 <ld_dword>
 8009130:	4603      	mov	r3, r0
 8009132:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009136:	2b00      	cmp	r3, #0
 8009138:	d102      	bne.n	8009140 <f_getfree+0x128>
 800913a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800913c:	3301      	adds	r3, #1
 800913e:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8009140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009142:	3304      	adds	r3, #4
 8009144:	633b      	str	r3, [r7, #48]	; 0x30
 8009146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009148:	3b04      	subs	r3, #4
 800914a:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800914c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800914e:	3b01      	subs	r3, #1
 8009150:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009154:	2b00      	cmp	r3, #0
 8009156:	d1bd      	bne.n	80090d4 <f_getfree+0xbc>
 8009158:	e000      	b.n	800915c <f_getfree+0x144>
							if (res != FR_OK) break;
 800915a:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009160:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8009162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009164:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009166:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8009168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800916a:	791a      	ldrb	r2, [r3, #4]
 800916c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800916e:	f042 0201 	orr.w	r2, r2, #1
 8009172:	b2d2      	uxtb	r2, r2
 8009174:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8009176:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800917a:	4618      	mov	r0, r3
 800917c:	3748      	adds	r7, #72	; 0x48
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
	...

08009184 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009184:	b480      	push	{r7}
 8009186:	b087      	sub	sp, #28
 8009188:	af00      	add	r7, sp, #0
 800918a:	60f8      	str	r0, [r7, #12]
 800918c:	60b9      	str	r1, [r7, #8]
 800918e:	4613      	mov	r3, r2
 8009190:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009192:	2301      	movs	r3, #1
 8009194:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009196:	2300      	movs	r3, #0
 8009198:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800919a:	4b1f      	ldr	r3, [pc, #124]	; (8009218 <FATFS_LinkDriverEx+0x94>)
 800919c:	7a5b      	ldrb	r3, [r3, #9]
 800919e:	b2db      	uxtb	r3, r3
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d131      	bne.n	8009208 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80091a4:	4b1c      	ldr	r3, [pc, #112]	; (8009218 <FATFS_LinkDriverEx+0x94>)
 80091a6:	7a5b      	ldrb	r3, [r3, #9]
 80091a8:	b2db      	uxtb	r3, r3
 80091aa:	461a      	mov	r2, r3
 80091ac:	4b1a      	ldr	r3, [pc, #104]	; (8009218 <FATFS_LinkDriverEx+0x94>)
 80091ae:	2100      	movs	r1, #0
 80091b0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80091b2:	4b19      	ldr	r3, [pc, #100]	; (8009218 <FATFS_LinkDriverEx+0x94>)
 80091b4:	7a5b      	ldrb	r3, [r3, #9]
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	4a17      	ldr	r2, [pc, #92]	; (8009218 <FATFS_LinkDriverEx+0x94>)
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	4413      	add	r3, r2
 80091be:	68fa      	ldr	r2, [r7, #12]
 80091c0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80091c2:	4b15      	ldr	r3, [pc, #84]	; (8009218 <FATFS_LinkDriverEx+0x94>)
 80091c4:	7a5b      	ldrb	r3, [r3, #9]
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	461a      	mov	r2, r3
 80091ca:	4b13      	ldr	r3, [pc, #76]	; (8009218 <FATFS_LinkDriverEx+0x94>)
 80091cc:	4413      	add	r3, r2
 80091ce:	79fa      	ldrb	r2, [r7, #7]
 80091d0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80091d2:	4b11      	ldr	r3, [pc, #68]	; (8009218 <FATFS_LinkDriverEx+0x94>)
 80091d4:	7a5b      	ldrb	r3, [r3, #9]
 80091d6:	b2db      	uxtb	r3, r3
 80091d8:	1c5a      	adds	r2, r3, #1
 80091da:	b2d1      	uxtb	r1, r2
 80091dc:	4a0e      	ldr	r2, [pc, #56]	; (8009218 <FATFS_LinkDriverEx+0x94>)
 80091de:	7251      	strb	r1, [r2, #9]
 80091e0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80091e2:	7dbb      	ldrb	r3, [r7, #22]
 80091e4:	3330      	adds	r3, #48	; 0x30
 80091e6:	b2da      	uxtb	r2, r3
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	3301      	adds	r3, #1
 80091f0:	223a      	movs	r2, #58	; 0x3a
 80091f2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	3302      	adds	r3, #2
 80091f8:	222f      	movs	r2, #47	; 0x2f
 80091fa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	3303      	adds	r3, #3
 8009200:	2200      	movs	r2, #0
 8009202:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009204:	2300      	movs	r3, #0
 8009206:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009208:	7dfb      	ldrb	r3, [r7, #23]
}
 800920a:	4618      	mov	r0, r3
 800920c:	371c      	adds	r7, #28
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr
 8009216:	bf00      	nop
 8009218:	200007a8 	.word	0x200007a8

0800921c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b082      	sub	sp, #8
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009226:	2200      	movs	r2, #0
 8009228:	6839      	ldr	r1, [r7, #0]
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f7ff ffaa 	bl	8009184 <FATFS_LinkDriverEx>
 8009230:	4603      	mov	r3, r0
}
 8009232:	4618      	mov	r0, r3
 8009234:	3708      	adds	r7, #8
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}
	...

0800923c <__errno>:
 800923c:	4b01      	ldr	r3, [pc, #4]	; (8009244 <__errno+0x8>)
 800923e:	6818      	ldr	r0, [r3, #0]
 8009240:	4770      	bx	lr
 8009242:	bf00      	nop
 8009244:	20000024 	.word	0x20000024

08009248 <__libc_init_array>:
 8009248:	b570      	push	{r4, r5, r6, lr}
 800924a:	4e0d      	ldr	r6, [pc, #52]	; (8009280 <__libc_init_array+0x38>)
 800924c:	4c0d      	ldr	r4, [pc, #52]	; (8009284 <__libc_init_array+0x3c>)
 800924e:	1ba4      	subs	r4, r4, r6
 8009250:	10a4      	asrs	r4, r4, #2
 8009252:	2500      	movs	r5, #0
 8009254:	42a5      	cmp	r5, r4
 8009256:	d109      	bne.n	800926c <__libc_init_array+0x24>
 8009258:	4e0b      	ldr	r6, [pc, #44]	; (8009288 <__libc_init_array+0x40>)
 800925a:	4c0c      	ldr	r4, [pc, #48]	; (800928c <__libc_init_array+0x44>)
 800925c:	f002 f898 	bl	800b390 <_init>
 8009260:	1ba4      	subs	r4, r4, r6
 8009262:	10a4      	asrs	r4, r4, #2
 8009264:	2500      	movs	r5, #0
 8009266:	42a5      	cmp	r5, r4
 8009268:	d105      	bne.n	8009276 <__libc_init_array+0x2e>
 800926a:	bd70      	pop	{r4, r5, r6, pc}
 800926c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009270:	4798      	blx	r3
 8009272:	3501      	adds	r5, #1
 8009274:	e7ee      	b.n	8009254 <__libc_init_array+0xc>
 8009276:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800927a:	4798      	blx	r3
 800927c:	3501      	adds	r5, #1
 800927e:	e7f2      	b.n	8009266 <__libc_init_array+0x1e>
 8009280:	0800b828 	.word	0x0800b828
 8009284:	0800b828 	.word	0x0800b828
 8009288:	0800b828 	.word	0x0800b828
 800928c:	0800b82c 	.word	0x0800b82c

08009290 <memset>:
 8009290:	4402      	add	r2, r0
 8009292:	4603      	mov	r3, r0
 8009294:	4293      	cmp	r3, r2
 8009296:	d100      	bne.n	800929a <memset+0xa>
 8009298:	4770      	bx	lr
 800929a:	f803 1b01 	strb.w	r1, [r3], #1
 800929e:	e7f9      	b.n	8009294 <memset+0x4>

080092a0 <__cvt>:
 80092a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092a4:	ec55 4b10 	vmov	r4, r5, d0
 80092a8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80092aa:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80092ae:	2d00      	cmp	r5, #0
 80092b0:	460e      	mov	r6, r1
 80092b2:	4691      	mov	r9, r2
 80092b4:	4619      	mov	r1, r3
 80092b6:	bfb8      	it	lt
 80092b8:	4622      	movlt	r2, r4
 80092ba:	462b      	mov	r3, r5
 80092bc:	f027 0720 	bic.w	r7, r7, #32
 80092c0:	bfbb      	ittet	lt
 80092c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80092c6:	461d      	movlt	r5, r3
 80092c8:	2300      	movge	r3, #0
 80092ca:	232d      	movlt	r3, #45	; 0x2d
 80092cc:	bfb8      	it	lt
 80092ce:	4614      	movlt	r4, r2
 80092d0:	2f46      	cmp	r7, #70	; 0x46
 80092d2:	700b      	strb	r3, [r1, #0]
 80092d4:	d004      	beq.n	80092e0 <__cvt+0x40>
 80092d6:	2f45      	cmp	r7, #69	; 0x45
 80092d8:	d100      	bne.n	80092dc <__cvt+0x3c>
 80092da:	3601      	adds	r6, #1
 80092dc:	2102      	movs	r1, #2
 80092de:	e000      	b.n	80092e2 <__cvt+0x42>
 80092e0:	2103      	movs	r1, #3
 80092e2:	ab03      	add	r3, sp, #12
 80092e4:	9301      	str	r3, [sp, #4]
 80092e6:	ab02      	add	r3, sp, #8
 80092e8:	9300      	str	r3, [sp, #0]
 80092ea:	4632      	mov	r2, r6
 80092ec:	4653      	mov	r3, sl
 80092ee:	ec45 4b10 	vmov	d0, r4, r5
 80092f2:	f000 fd19 	bl	8009d28 <_dtoa_r>
 80092f6:	2f47      	cmp	r7, #71	; 0x47
 80092f8:	4680      	mov	r8, r0
 80092fa:	d102      	bne.n	8009302 <__cvt+0x62>
 80092fc:	f019 0f01 	tst.w	r9, #1
 8009300:	d026      	beq.n	8009350 <__cvt+0xb0>
 8009302:	2f46      	cmp	r7, #70	; 0x46
 8009304:	eb08 0906 	add.w	r9, r8, r6
 8009308:	d111      	bne.n	800932e <__cvt+0x8e>
 800930a:	f898 3000 	ldrb.w	r3, [r8]
 800930e:	2b30      	cmp	r3, #48	; 0x30
 8009310:	d10a      	bne.n	8009328 <__cvt+0x88>
 8009312:	2200      	movs	r2, #0
 8009314:	2300      	movs	r3, #0
 8009316:	4620      	mov	r0, r4
 8009318:	4629      	mov	r1, r5
 800931a:	f7f7 fbf5 	bl	8000b08 <__aeabi_dcmpeq>
 800931e:	b918      	cbnz	r0, 8009328 <__cvt+0x88>
 8009320:	f1c6 0601 	rsb	r6, r6, #1
 8009324:	f8ca 6000 	str.w	r6, [sl]
 8009328:	f8da 3000 	ldr.w	r3, [sl]
 800932c:	4499      	add	r9, r3
 800932e:	2200      	movs	r2, #0
 8009330:	2300      	movs	r3, #0
 8009332:	4620      	mov	r0, r4
 8009334:	4629      	mov	r1, r5
 8009336:	f7f7 fbe7 	bl	8000b08 <__aeabi_dcmpeq>
 800933a:	b938      	cbnz	r0, 800934c <__cvt+0xac>
 800933c:	2230      	movs	r2, #48	; 0x30
 800933e:	9b03      	ldr	r3, [sp, #12]
 8009340:	454b      	cmp	r3, r9
 8009342:	d205      	bcs.n	8009350 <__cvt+0xb0>
 8009344:	1c59      	adds	r1, r3, #1
 8009346:	9103      	str	r1, [sp, #12]
 8009348:	701a      	strb	r2, [r3, #0]
 800934a:	e7f8      	b.n	800933e <__cvt+0x9e>
 800934c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009350:	9b03      	ldr	r3, [sp, #12]
 8009352:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009354:	eba3 0308 	sub.w	r3, r3, r8
 8009358:	4640      	mov	r0, r8
 800935a:	6013      	str	r3, [r2, #0]
 800935c:	b004      	add	sp, #16
 800935e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009362 <__exponent>:
 8009362:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009364:	2900      	cmp	r1, #0
 8009366:	4604      	mov	r4, r0
 8009368:	bfba      	itte	lt
 800936a:	4249      	neglt	r1, r1
 800936c:	232d      	movlt	r3, #45	; 0x2d
 800936e:	232b      	movge	r3, #43	; 0x2b
 8009370:	2909      	cmp	r1, #9
 8009372:	f804 2b02 	strb.w	r2, [r4], #2
 8009376:	7043      	strb	r3, [r0, #1]
 8009378:	dd20      	ble.n	80093bc <__exponent+0x5a>
 800937a:	f10d 0307 	add.w	r3, sp, #7
 800937e:	461f      	mov	r7, r3
 8009380:	260a      	movs	r6, #10
 8009382:	fb91 f5f6 	sdiv	r5, r1, r6
 8009386:	fb06 1115 	mls	r1, r6, r5, r1
 800938a:	3130      	adds	r1, #48	; 0x30
 800938c:	2d09      	cmp	r5, #9
 800938e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009392:	f103 32ff 	add.w	r2, r3, #4294967295
 8009396:	4629      	mov	r1, r5
 8009398:	dc09      	bgt.n	80093ae <__exponent+0x4c>
 800939a:	3130      	adds	r1, #48	; 0x30
 800939c:	3b02      	subs	r3, #2
 800939e:	f802 1c01 	strb.w	r1, [r2, #-1]
 80093a2:	42bb      	cmp	r3, r7
 80093a4:	4622      	mov	r2, r4
 80093a6:	d304      	bcc.n	80093b2 <__exponent+0x50>
 80093a8:	1a10      	subs	r0, r2, r0
 80093aa:	b003      	add	sp, #12
 80093ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093ae:	4613      	mov	r3, r2
 80093b0:	e7e7      	b.n	8009382 <__exponent+0x20>
 80093b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093b6:	f804 2b01 	strb.w	r2, [r4], #1
 80093ba:	e7f2      	b.n	80093a2 <__exponent+0x40>
 80093bc:	2330      	movs	r3, #48	; 0x30
 80093be:	4419      	add	r1, r3
 80093c0:	7083      	strb	r3, [r0, #2]
 80093c2:	1d02      	adds	r2, r0, #4
 80093c4:	70c1      	strb	r1, [r0, #3]
 80093c6:	e7ef      	b.n	80093a8 <__exponent+0x46>

080093c8 <_printf_float>:
 80093c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093cc:	b08d      	sub	sp, #52	; 0x34
 80093ce:	460c      	mov	r4, r1
 80093d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80093d4:	4616      	mov	r6, r2
 80093d6:	461f      	mov	r7, r3
 80093d8:	4605      	mov	r5, r0
 80093da:	f001 fa5d 	bl	800a898 <_localeconv_r>
 80093de:	6803      	ldr	r3, [r0, #0]
 80093e0:	9304      	str	r3, [sp, #16]
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7f6 ff14 	bl	8000210 <strlen>
 80093e8:	2300      	movs	r3, #0
 80093ea:	930a      	str	r3, [sp, #40]	; 0x28
 80093ec:	f8d8 3000 	ldr.w	r3, [r8]
 80093f0:	9005      	str	r0, [sp, #20]
 80093f2:	3307      	adds	r3, #7
 80093f4:	f023 0307 	bic.w	r3, r3, #7
 80093f8:	f103 0208 	add.w	r2, r3, #8
 80093fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009400:	f8d4 b000 	ldr.w	fp, [r4]
 8009404:	f8c8 2000 	str.w	r2, [r8]
 8009408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800940c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009410:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009414:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009418:	9307      	str	r3, [sp, #28]
 800941a:	f8cd 8018 	str.w	r8, [sp, #24]
 800941e:	f04f 32ff 	mov.w	r2, #4294967295
 8009422:	4ba7      	ldr	r3, [pc, #668]	; (80096c0 <_printf_float+0x2f8>)
 8009424:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009428:	f7f7 fba0 	bl	8000b6c <__aeabi_dcmpun>
 800942c:	bb70      	cbnz	r0, 800948c <_printf_float+0xc4>
 800942e:	f04f 32ff 	mov.w	r2, #4294967295
 8009432:	4ba3      	ldr	r3, [pc, #652]	; (80096c0 <_printf_float+0x2f8>)
 8009434:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009438:	f7f7 fb7a 	bl	8000b30 <__aeabi_dcmple>
 800943c:	bb30      	cbnz	r0, 800948c <_printf_float+0xc4>
 800943e:	2200      	movs	r2, #0
 8009440:	2300      	movs	r3, #0
 8009442:	4640      	mov	r0, r8
 8009444:	4649      	mov	r1, r9
 8009446:	f7f7 fb69 	bl	8000b1c <__aeabi_dcmplt>
 800944a:	b110      	cbz	r0, 8009452 <_printf_float+0x8a>
 800944c:	232d      	movs	r3, #45	; 0x2d
 800944e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009452:	4a9c      	ldr	r2, [pc, #624]	; (80096c4 <_printf_float+0x2fc>)
 8009454:	4b9c      	ldr	r3, [pc, #624]	; (80096c8 <_printf_float+0x300>)
 8009456:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800945a:	bf8c      	ite	hi
 800945c:	4690      	movhi	r8, r2
 800945e:	4698      	movls	r8, r3
 8009460:	2303      	movs	r3, #3
 8009462:	f02b 0204 	bic.w	r2, fp, #4
 8009466:	6123      	str	r3, [r4, #16]
 8009468:	6022      	str	r2, [r4, #0]
 800946a:	f04f 0900 	mov.w	r9, #0
 800946e:	9700      	str	r7, [sp, #0]
 8009470:	4633      	mov	r3, r6
 8009472:	aa0b      	add	r2, sp, #44	; 0x2c
 8009474:	4621      	mov	r1, r4
 8009476:	4628      	mov	r0, r5
 8009478:	f000 f9e6 	bl	8009848 <_printf_common>
 800947c:	3001      	adds	r0, #1
 800947e:	f040 808d 	bne.w	800959c <_printf_float+0x1d4>
 8009482:	f04f 30ff 	mov.w	r0, #4294967295
 8009486:	b00d      	add	sp, #52	; 0x34
 8009488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800948c:	4642      	mov	r2, r8
 800948e:	464b      	mov	r3, r9
 8009490:	4640      	mov	r0, r8
 8009492:	4649      	mov	r1, r9
 8009494:	f7f7 fb6a 	bl	8000b6c <__aeabi_dcmpun>
 8009498:	b110      	cbz	r0, 80094a0 <_printf_float+0xd8>
 800949a:	4a8c      	ldr	r2, [pc, #560]	; (80096cc <_printf_float+0x304>)
 800949c:	4b8c      	ldr	r3, [pc, #560]	; (80096d0 <_printf_float+0x308>)
 800949e:	e7da      	b.n	8009456 <_printf_float+0x8e>
 80094a0:	6861      	ldr	r1, [r4, #4]
 80094a2:	1c4b      	adds	r3, r1, #1
 80094a4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80094a8:	a80a      	add	r0, sp, #40	; 0x28
 80094aa:	d13e      	bne.n	800952a <_printf_float+0x162>
 80094ac:	2306      	movs	r3, #6
 80094ae:	6063      	str	r3, [r4, #4]
 80094b0:	2300      	movs	r3, #0
 80094b2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80094b6:	ab09      	add	r3, sp, #36	; 0x24
 80094b8:	9300      	str	r3, [sp, #0]
 80094ba:	ec49 8b10 	vmov	d0, r8, r9
 80094be:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80094c2:	6022      	str	r2, [r4, #0]
 80094c4:	f8cd a004 	str.w	sl, [sp, #4]
 80094c8:	6861      	ldr	r1, [r4, #4]
 80094ca:	4628      	mov	r0, r5
 80094cc:	f7ff fee8 	bl	80092a0 <__cvt>
 80094d0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80094d4:	2b47      	cmp	r3, #71	; 0x47
 80094d6:	4680      	mov	r8, r0
 80094d8:	d109      	bne.n	80094ee <_printf_float+0x126>
 80094da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094dc:	1cd8      	adds	r0, r3, #3
 80094de:	db02      	blt.n	80094e6 <_printf_float+0x11e>
 80094e0:	6862      	ldr	r2, [r4, #4]
 80094e2:	4293      	cmp	r3, r2
 80094e4:	dd47      	ble.n	8009576 <_printf_float+0x1ae>
 80094e6:	f1aa 0a02 	sub.w	sl, sl, #2
 80094ea:	fa5f fa8a 	uxtb.w	sl, sl
 80094ee:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80094f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80094f4:	d824      	bhi.n	8009540 <_printf_float+0x178>
 80094f6:	3901      	subs	r1, #1
 80094f8:	4652      	mov	r2, sl
 80094fa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80094fe:	9109      	str	r1, [sp, #36]	; 0x24
 8009500:	f7ff ff2f 	bl	8009362 <__exponent>
 8009504:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009506:	1813      	adds	r3, r2, r0
 8009508:	2a01      	cmp	r2, #1
 800950a:	4681      	mov	r9, r0
 800950c:	6123      	str	r3, [r4, #16]
 800950e:	dc02      	bgt.n	8009516 <_printf_float+0x14e>
 8009510:	6822      	ldr	r2, [r4, #0]
 8009512:	07d1      	lsls	r1, r2, #31
 8009514:	d501      	bpl.n	800951a <_printf_float+0x152>
 8009516:	3301      	adds	r3, #1
 8009518:	6123      	str	r3, [r4, #16]
 800951a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800951e:	2b00      	cmp	r3, #0
 8009520:	d0a5      	beq.n	800946e <_printf_float+0xa6>
 8009522:	232d      	movs	r3, #45	; 0x2d
 8009524:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009528:	e7a1      	b.n	800946e <_printf_float+0xa6>
 800952a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800952e:	f000 8177 	beq.w	8009820 <_printf_float+0x458>
 8009532:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009536:	d1bb      	bne.n	80094b0 <_printf_float+0xe8>
 8009538:	2900      	cmp	r1, #0
 800953a:	d1b9      	bne.n	80094b0 <_printf_float+0xe8>
 800953c:	2301      	movs	r3, #1
 800953e:	e7b6      	b.n	80094ae <_printf_float+0xe6>
 8009540:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8009544:	d119      	bne.n	800957a <_printf_float+0x1b2>
 8009546:	2900      	cmp	r1, #0
 8009548:	6863      	ldr	r3, [r4, #4]
 800954a:	dd0c      	ble.n	8009566 <_printf_float+0x19e>
 800954c:	6121      	str	r1, [r4, #16]
 800954e:	b913      	cbnz	r3, 8009556 <_printf_float+0x18e>
 8009550:	6822      	ldr	r2, [r4, #0]
 8009552:	07d2      	lsls	r2, r2, #31
 8009554:	d502      	bpl.n	800955c <_printf_float+0x194>
 8009556:	3301      	adds	r3, #1
 8009558:	440b      	add	r3, r1
 800955a:	6123      	str	r3, [r4, #16]
 800955c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800955e:	65a3      	str	r3, [r4, #88]	; 0x58
 8009560:	f04f 0900 	mov.w	r9, #0
 8009564:	e7d9      	b.n	800951a <_printf_float+0x152>
 8009566:	b913      	cbnz	r3, 800956e <_printf_float+0x1a6>
 8009568:	6822      	ldr	r2, [r4, #0]
 800956a:	07d0      	lsls	r0, r2, #31
 800956c:	d501      	bpl.n	8009572 <_printf_float+0x1aa>
 800956e:	3302      	adds	r3, #2
 8009570:	e7f3      	b.n	800955a <_printf_float+0x192>
 8009572:	2301      	movs	r3, #1
 8009574:	e7f1      	b.n	800955a <_printf_float+0x192>
 8009576:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800957a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800957e:	4293      	cmp	r3, r2
 8009580:	db05      	blt.n	800958e <_printf_float+0x1c6>
 8009582:	6822      	ldr	r2, [r4, #0]
 8009584:	6123      	str	r3, [r4, #16]
 8009586:	07d1      	lsls	r1, r2, #31
 8009588:	d5e8      	bpl.n	800955c <_printf_float+0x194>
 800958a:	3301      	adds	r3, #1
 800958c:	e7e5      	b.n	800955a <_printf_float+0x192>
 800958e:	2b00      	cmp	r3, #0
 8009590:	bfd4      	ite	le
 8009592:	f1c3 0302 	rsble	r3, r3, #2
 8009596:	2301      	movgt	r3, #1
 8009598:	4413      	add	r3, r2
 800959a:	e7de      	b.n	800955a <_printf_float+0x192>
 800959c:	6823      	ldr	r3, [r4, #0]
 800959e:	055a      	lsls	r2, r3, #21
 80095a0:	d407      	bmi.n	80095b2 <_printf_float+0x1ea>
 80095a2:	6923      	ldr	r3, [r4, #16]
 80095a4:	4642      	mov	r2, r8
 80095a6:	4631      	mov	r1, r6
 80095a8:	4628      	mov	r0, r5
 80095aa:	47b8      	blx	r7
 80095ac:	3001      	adds	r0, #1
 80095ae:	d12b      	bne.n	8009608 <_printf_float+0x240>
 80095b0:	e767      	b.n	8009482 <_printf_float+0xba>
 80095b2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80095b6:	f240 80dc 	bls.w	8009772 <_printf_float+0x3aa>
 80095ba:	2200      	movs	r2, #0
 80095bc:	2300      	movs	r3, #0
 80095be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80095c2:	f7f7 faa1 	bl	8000b08 <__aeabi_dcmpeq>
 80095c6:	2800      	cmp	r0, #0
 80095c8:	d033      	beq.n	8009632 <_printf_float+0x26a>
 80095ca:	2301      	movs	r3, #1
 80095cc:	4a41      	ldr	r2, [pc, #260]	; (80096d4 <_printf_float+0x30c>)
 80095ce:	4631      	mov	r1, r6
 80095d0:	4628      	mov	r0, r5
 80095d2:	47b8      	blx	r7
 80095d4:	3001      	adds	r0, #1
 80095d6:	f43f af54 	beq.w	8009482 <_printf_float+0xba>
 80095da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80095de:	429a      	cmp	r2, r3
 80095e0:	db02      	blt.n	80095e8 <_printf_float+0x220>
 80095e2:	6823      	ldr	r3, [r4, #0]
 80095e4:	07d8      	lsls	r0, r3, #31
 80095e6:	d50f      	bpl.n	8009608 <_printf_float+0x240>
 80095e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80095ec:	4631      	mov	r1, r6
 80095ee:	4628      	mov	r0, r5
 80095f0:	47b8      	blx	r7
 80095f2:	3001      	adds	r0, #1
 80095f4:	f43f af45 	beq.w	8009482 <_printf_float+0xba>
 80095f8:	f04f 0800 	mov.w	r8, #0
 80095fc:	f104 091a 	add.w	r9, r4, #26
 8009600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009602:	3b01      	subs	r3, #1
 8009604:	4543      	cmp	r3, r8
 8009606:	dc09      	bgt.n	800961c <_printf_float+0x254>
 8009608:	6823      	ldr	r3, [r4, #0]
 800960a:	079b      	lsls	r3, r3, #30
 800960c:	f100 8103 	bmi.w	8009816 <_printf_float+0x44e>
 8009610:	68e0      	ldr	r0, [r4, #12]
 8009612:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009614:	4298      	cmp	r0, r3
 8009616:	bfb8      	it	lt
 8009618:	4618      	movlt	r0, r3
 800961a:	e734      	b.n	8009486 <_printf_float+0xbe>
 800961c:	2301      	movs	r3, #1
 800961e:	464a      	mov	r2, r9
 8009620:	4631      	mov	r1, r6
 8009622:	4628      	mov	r0, r5
 8009624:	47b8      	blx	r7
 8009626:	3001      	adds	r0, #1
 8009628:	f43f af2b 	beq.w	8009482 <_printf_float+0xba>
 800962c:	f108 0801 	add.w	r8, r8, #1
 8009630:	e7e6      	b.n	8009600 <_printf_float+0x238>
 8009632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009634:	2b00      	cmp	r3, #0
 8009636:	dc2b      	bgt.n	8009690 <_printf_float+0x2c8>
 8009638:	2301      	movs	r3, #1
 800963a:	4a26      	ldr	r2, [pc, #152]	; (80096d4 <_printf_float+0x30c>)
 800963c:	4631      	mov	r1, r6
 800963e:	4628      	mov	r0, r5
 8009640:	47b8      	blx	r7
 8009642:	3001      	adds	r0, #1
 8009644:	f43f af1d 	beq.w	8009482 <_printf_float+0xba>
 8009648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800964a:	b923      	cbnz	r3, 8009656 <_printf_float+0x28e>
 800964c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800964e:	b913      	cbnz	r3, 8009656 <_printf_float+0x28e>
 8009650:	6823      	ldr	r3, [r4, #0]
 8009652:	07d9      	lsls	r1, r3, #31
 8009654:	d5d8      	bpl.n	8009608 <_printf_float+0x240>
 8009656:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800965a:	4631      	mov	r1, r6
 800965c:	4628      	mov	r0, r5
 800965e:	47b8      	blx	r7
 8009660:	3001      	adds	r0, #1
 8009662:	f43f af0e 	beq.w	8009482 <_printf_float+0xba>
 8009666:	f04f 0900 	mov.w	r9, #0
 800966a:	f104 0a1a 	add.w	sl, r4, #26
 800966e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009670:	425b      	negs	r3, r3
 8009672:	454b      	cmp	r3, r9
 8009674:	dc01      	bgt.n	800967a <_printf_float+0x2b2>
 8009676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009678:	e794      	b.n	80095a4 <_printf_float+0x1dc>
 800967a:	2301      	movs	r3, #1
 800967c:	4652      	mov	r2, sl
 800967e:	4631      	mov	r1, r6
 8009680:	4628      	mov	r0, r5
 8009682:	47b8      	blx	r7
 8009684:	3001      	adds	r0, #1
 8009686:	f43f aefc 	beq.w	8009482 <_printf_float+0xba>
 800968a:	f109 0901 	add.w	r9, r9, #1
 800968e:	e7ee      	b.n	800966e <_printf_float+0x2a6>
 8009690:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009692:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009694:	429a      	cmp	r2, r3
 8009696:	bfa8      	it	ge
 8009698:	461a      	movge	r2, r3
 800969a:	2a00      	cmp	r2, #0
 800969c:	4691      	mov	r9, r2
 800969e:	dd07      	ble.n	80096b0 <_printf_float+0x2e8>
 80096a0:	4613      	mov	r3, r2
 80096a2:	4631      	mov	r1, r6
 80096a4:	4642      	mov	r2, r8
 80096a6:	4628      	mov	r0, r5
 80096a8:	47b8      	blx	r7
 80096aa:	3001      	adds	r0, #1
 80096ac:	f43f aee9 	beq.w	8009482 <_printf_float+0xba>
 80096b0:	f104 031a 	add.w	r3, r4, #26
 80096b4:	f04f 0b00 	mov.w	fp, #0
 80096b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80096bc:	9306      	str	r3, [sp, #24]
 80096be:	e015      	b.n	80096ec <_printf_float+0x324>
 80096c0:	7fefffff 	.word	0x7fefffff
 80096c4:	0800b5c4 	.word	0x0800b5c4
 80096c8:	0800b5c0 	.word	0x0800b5c0
 80096cc:	0800b5cc 	.word	0x0800b5cc
 80096d0:	0800b5c8 	.word	0x0800b5c8
 80096d4:	0800b5d0 	.word	0x0800b5d0
 80096d8:	2301      	movs	r3, #1
 80096da:	9a06      	ldr	r2, [sp, #24]
 80096dc:	4631      	mov	r1, r6
 80096de:	4628      	mov	r0, r5
 80096e0:	47b8      	blx	r7
 80096e2:	3001      	adds	r0, #1
 80096e4:	f43f aecd 	beq.w	8009482 <_printf_float+0xba>
 80096e8:	f10b 0b01 	add.w	fp, fp, #1
 80096ec:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80096f0:	ebaa 0309 	sub.w	r3, sl, r9
 80096f4:	455b      	cmp	r3, fp
 80096f6:	dcef      	bgt.n	80096d8 <_printf_float+0x310>
 80096f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80096fc:	429a      	cmp	r2, r3
 80096fe:	44d0      	add	r8, sl
 8009700:	db15      	blt.n	800972e <_printf_float+0x366>
 8009702:	6823      	ldr	r3, [r4, #0]
 8009704:	07da      	lsls	r2, r3, #31
 8009706:	d412      	bmi.n	800972e <_printf_float+0x366>
 8009708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800970a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800970c:	eba3 020a 	sub.w	r2, r3, sl
 8009710:	eba3 0a01 	sub.w	sl, r3, r1
 8009714:	4592      	cmp	sl, r2
 8009716:	bfa8      	it	ge
 8009718:	4692      	movge	sl, r2
 800971a:	f1ba 0f00 	cmp.w	sl, #0
 800971e:	dc0e      	bgt.n	800973e <_printf_float+0x376>
 8009720:	f04f 0800 	mov.w	r8, #0
 8009724:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009728:	f104 091a 	add.w	r9, r4, #26
 800972c:	e019      	b.n	8009762 <_printf_float+0x39a>
 800972e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009732:	4631      	mov	r1, r6
 8009734:	4628      	mov	r0, r5
 8009736:	47b8      	blx	r7
 8009738:	3001      	adds	r0, #1
 800973a:	d1e5      	bne.n	8009708 <_printf_float+0x340>
 800973c:	e6a1      	b.n	8009482 <_printf_float+0xba>
 800973e:	4653      	mov	r3, sl
 8009740:	4642      	mov	r2, r8
 8009742:	4631      	mov	r1, r6
 8009744:	4628      	mov	r0, r5
 8009746:	47b8      	blx	r7
 8009748:	3001      	adds	r0, #1
 800974a:	d1e9      	bne.n	8009720 <_printf_float+0x358>
 800974c:	e699      	b.n	8009482 <_printf_float+0xba>
 800974e:	2301      	movs	r3, #1
 8009750:	464a      	mov	r2, r9
 8009752:	4631      	mov	r1, r6
 8009754:	4628      	mov	r0, r5
 8009756:	47b8      	blx	r7
 8009758:	3001      	adds	r0, #1
 800975a:	f43f ae92 	beq.w	8009482 <_printf_float+0xba>
 800975e:	f108 0801 	add.w	r8, r8, #1
 8009762:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009766:	1a9b      	subs	r3, r3, r2
 8009768:	eba3 030a 	sub.w	r3, r3, sl
 800976c:	4543      	cmp	r3, r8
 800976e:	dcee      	bgt.n	800974e <_printf_float+0x386>
 8009770:	e74a      	b.n	8009608 <_printf_float+0x240>
 8009772:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009774:	2a01      	cmp	r2, #1
 8009776:	dc01      	bgt.n	800977c <_printf_float+0x3b4>
 8009778:	07db      	lsls	r3, r3, #31
 800977a:	d53a      	bpl.n	80097f2 <_printf_float+0x42a>
 800977c:	2301      	movs	r3, #1
 800977e:	4642      	mov	r2, r8
 8009780:	4631      	mov	r1, r6
 8009782:	4628      	mov	r0, r5
 8009784:	47b8      	blx	r7
 8009786:	3001      	adds	r0, #1
 8009788:	f43f ae7b 	beq.w	8009482 <_printf_float+0xba>
 800978c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009790:	4631      	mov	r1, r6
 8009792:	4628      	mov	r0, r5
 8009794:	47b8      	blx	r7
 8009796:	3001      	adds	r0, #1
 8009798:	f108 0801 	add.w	r8, r8, #1
 800979c:	f43f ae71 	beq.w	8009482 <_printf_float+0xba>
 80097a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097a2:	2200      	movs	r2, #0
 80097a4:	f103 3aff 	add.w	sl, r3, #4294967295
 80097a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80097ac:	2300      	movs	r3, #0
 80097ae:	f7f7 f9ab 	bl	8000b08 <__aeabi_dcmpeq>
 80097b2:	b9c8      	cbnz	r0, 80097e8 <_printf_float+0x420>
 80097b4:	4653      	mov	r3, sl
 80097b6:	4642      	mov	r2, r8
 80097b8:	4631      	mov	r1, r6
 80097ba:	4628      	mov	r0, r5
 80097bc:	47b8      	blx	r7
 80097be:	3001      	adds	r0, #1
 80097c0:	d10e      	bne.n	80097e0 <_printf_float+0x418>
 80097c2:	e65e      	b.n	8009482 <_printf_float+0xba>
 80097c4:	2301      	movs	r3, #1
 80097c6:	4652      	mov	r2, sl
 80097c8:	4631      	mov	r1, r6
 80097ca:	4628      	mov	r0, r5
 80097cc:	47b8      	blx	r7
 80097ce:	3001      	adds	r0, #1
 80097d0:	f43f ae57 	beq.w	8009482 <_printf_float+0xba>
 80097d4:	f108 0801 	add.w	r8, r8, #1
 80097d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097da:	3b01      	subs	r3, #1
 80097dc:	4543      	cmp	r3, r8
 80097de:	dcf1      	bgt.n	80097c4 <_printf_float+0x3fc>
 80097e0:	464b      	mov	r3, r9
 80097e2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80097e6:	e6de      	b.n	80095a6 <_printf_float+0x1de>
 80097e8:	f04f 0800 	mov.w	r8, #0
 80097ec:	f104 0a1a 	add.w	sl, r4, #26
 80097f0:	e7f2      	b.n	80097d8 <_printf_float+0x410>
 80097f2:	2301      	movs	r3, #1
 80097f4:	e7df      	b.n	80097b6 <_printf_float+0x3ee>
 80097f6:	2301      	movs	r3, #1
 80097f8:	464a      	mov	r2, r9
 80097fa:	4631      	mov	r1, r6
 80097fc:	4628      	mov	r0, r5
 80097fe:	47b8      	blx	r7
 8009800:	3001      	adds	r0, #1
 8009802:	f43f ae3e 	beq.w	8009482 <_printf_float+0xba>
 8009806:	f108 0801 	add.w	r8, r8, #1
 800980a:	68e3      	ldr	r3, [r4, #12]
 800980c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800980e:	1a9b      	subs	r3, r3, r2
 8009810:	4543      	cmp	r3, r8
 8009812:	dcf0      	bgt.n	80097f6 <_printf_float+0x42e>
 8009814:	e6fc      	b.n	8009610 <_printf_float+0x248>
 8009816:	f04f 0800 	mov.w	r8, #0
 800981a:	f104 0919 	add.w	r9, r4, #25
 800981e:	e7f4      	b.n	800980a <_printf_float+0x442>
 8009820:	2900      	cmp	r1, #0
 8009822:	f43f ae8b 	beq.w	800953c <_printf_float+0x174>
 8009826:	2300      	movs	r3, #0
 8009828:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800982c:	ab09      	add	r3, sp, #36	; 0x24
 800982e:	9300      	str	r3, [sp, #0]
 8009830:	ec49 8b10 	vmov	d0, r8, r9
 8009834:	6022      	str	r2, [r4, #0]
 8009836:	f8cd a004 	str.w	sl, [sp, #4]
 800983a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800983e:	4628      	mov	r0, r5
 8009840:	f7ff fd2e 	bl	80092a0 <__cvt>
 8009844:	4680      	mov	r8, r0
 8009846:	e648      	b.n	80094da <_printf_float+0x112>

08009848 <_printf_common>:
 8009848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800984c:	4691      	mov	r9, r2
 800984e:	461f      	mov	r7, r3
 8009850:	688a      	ldr	r2, [r1, #8]
 8009852:	690b      	ldr	r3, [r1, #16]
 8009854:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009858:	4293      	cmp	r3, r2
 800985a:	bfb8      	it	lt
 800985c:	4613      	movlt	r3, r2
 800985e:	f8c9 3000 	str.w	r3, [r9]
 8009862:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009866:	4606      	mov	r6, r0
 8009868:	460c      	mov	r4, r1
 800986a:	b112      	cbz	r2, 8009872 <_printf_common+0x2a>
 800986c:	3301      	adds	r3, #1
 800986e:	f8c9 3000 	str.w	r3, [r9]
 8009872:	6823      	ldr	r3, [r4, #0]
 8009874:	0699      	lsls	r1, r3, #26
 8009876:	bf42      	ittt	mi
 8009878:	f8d9 3000 	ldrmi.w	r3, [r9]
 800987c:	3302      	addmi	r3, #2
 800987e:	f8c9 3000 	strmi.w	r3, [r9]
 8009882:	6825      	ldr	r5, [r4, #0]
 8009884:	f015 0506 	ands.w	r5, r5, #6
 8009888:	d107      	bne.n	800989a <_printf_common+0x52>
 800988a:	f104 0a19 	add.w	sl, r4, #25
 800988e:	68e3      	ldr	r3, [r4, #12]
 8009890:	f8d9 2000 	ldr.w	r2, [r9]
 8009894:	1a9b      	subs	r3, r3, r2
 8009896:	42ab      	cmp	r3, r5
 8009898:	dc28      	bgt.n	80098ec <_printf_common+0xa4>
 800989a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800989e:	6822      	ldr	r2, [r4, #0]
 80098a0:	3300      	adds	r3, #0
 80098a2:	bf18      	it	ne
 80098a4:	2301      	movne	r3, #1
 80098a6:	0692      	lsls	r2, r2, #26
 80098a8:	d42d      	bmi.n	8009906 <_printf_common+0xbe>
 80098aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80098ae:	4639      	mov	r1, r7
 80098b0:	4630      	mov	r0, r6
 80098b2:	47c0      	blx	r8
 80098b4:	3001      	adds	r0, #1
 80098b6:	d020      	beq.n	80098fa <_printf_common+0xb2>
 80098b8:	6823      	ldr	r3, [r4, #0]
 80098ba:	68e5      	ldr	r5, [r4, #12]
 80098bc:	f8d9 2000 	ldr.w	r2, [r9]
 80098c0:	f003 0306 	and.w	r3, r3, #6
 80098c4:	2b04      	cmp	r3, #4
 80098c6:	bf08      	it	eq
 80098c8:	1aad      	subeq	r5, r5, r2
 80098ca:	68a3      	ldr	r3, [r4, #8]
 80098cc:	6922      	ldr	r2, [r4, #16]
 80098ce:	bf0c      	ite	eq
 80098d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80098d4:	2500      	movne	r5, #0
 80098d6:	4293      	cmp	r3, r2
 80098d8:	bfc4      	itt	gt
 80098da:	1a9b      	subgt	r3, r3, r2
 80098dc:	18ed      	addgt	r5, r5, r3
 80098de:	f04f 0900 	mov.w	r9, #0
 80098e2:	341a      	adds	r4, #26
 80098e4:	454d      	cmp	r5, r9
 80098e6:	d11a      	bne.n	800991e <_printf_common+0xd6>
 80098e8:	2000      	movs	r0, #0
 80098ea:	e008      	b.n	80098fe <_printf_common+0xb6>
 80098ec:	2301      	movs	r3, #1
 80098ee:	4652      	mov	r2, sl
 80098f0:	4639      	mov	r1, r7
 80098f2:	4630      	mov	r0, r6
 80098f4:	47c0      	blx	r8
 80098f6:	3001      	adds	r0, #1
 80098f8:	d103      	bne.n	8009902 <_printf_common+0xba>
 80098fa:	f04f 30ff 	mov.w	r0, #4294967295
 80098fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009902:	3501      	adds	r5, #1
 8009904:	e7c3      	b.n	800988e <_printf_common+0x46>
 8009906:	18e1      	adds	r1, r4, r3
 8009908:	1c5a      	adds	r2, r3, #1
 800990a:	2030      	movs	r0, #48	; 0x30
 800990c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009910:	4422      	add	r2, r4
 8009912:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009916:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800991a:	3302      	adds	r3, #2
 800991c:	e7c5      	b.n	80098aa <_printf_common+0x62>
 800991e:	2301      	movs	r3, #1
 8009920:	4622      	mov	r2, r4
 8009922:	4639      	mov	r1, r7
 8009924:	4630      	mov	r0, r6
 8009926:	47c0      	blx	r8
 8009928:	3001      	adds	r0, #1
 800992a:	d0e6      	beq.n	80098fa <_printf_common+0xb2>
 800992c:	f109 0901 	add.w	r9, r9, #1
 8009930:	e7d8      	b.n	80098e4 <_printf_common+0x9c>
	...

08009934 <_printf_i>:
 8009934:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009938:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800993c:	460c      	mov	r4, r1
 800993e:	7e09      	ldrb	r1, [r1, #24]
 8009940:	b085      	sub	sp, #20
 8009942:	296e      	cmp	r1, #110	; 0x6e
 8009944:	4617      	mov	r7, r2
 8009946:	4606      	mov	r6, r0
 8009948:	4698      	mov	r8, r3
 800994a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800994c:	f000 80b3 	beq.w	8009ab6 <_printf_i+0x182>
 8009950:	d822      	bhi.n	8009998 <_printf_i+0x64>
 8009952:	2963      	cmp	r1, #99	; 0x63
 8009954:	d036      	beq.n	80099c4 <_printf_i+0x90>
 8009956:	d80a      	bhi.n	800996e <_printf_i+0x3a>
 8009958:	2900      	cmp	r1, #0
 800995a:	f000 80b9 	beq.w	8009ad0 <_printf_i+0x19c>
 800995e:	2958      	cmp	r1, #88	; 0x58
 8009960:	f000 8083 	beq.w	8009a6a <_printf_i+0x136>
 8009964:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009968:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800996c:	e032      	b.n	80099d4 <_printf_i+0xa0>
 800996e:	2964      	cmp	r1, #100	; 0x64
 8009970:	d001      	beq.n	8009976 <_printf_i+0x42>
 8009972:	2969      	cmp	r1, #105	; 0x69
 8009974:	d1f6      	bne.n	8009964 <_printf_i+0x30>
 8009976:	6820      	ldr	r0, [r4, #0]
 8009978:	6813      	ldr	r3, [r2, #0]
 800997a:	0605      	lsls	r5, r0, #24
 800997c:	f103 0104 	add.w	r1, r3, #4
 8009980:	d52a      	bpl.n	80099d8 <_printf_i+0xa4>
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	6011      	str	r1, [r2, #0]
 8009986:	2b00      	cmp	r3, #0
 8009988:	da03      	bge.n	8009992 <_printf_i+0x5e>
 800998a:	222d      	movs	r2, #45	; 0x2d
 800998c:	425b      	negs	r3, r3
 800998e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009992:	486f      	ldr	r0, [pc, #444]	; (8009b50 <_printf_i+0x21c>)
 8009994:	220a      	movs	r2, #10
 8009996:	e039      	b.n	8009a0c <_printf_i+0xd8>
 8009998:	2973      	cmp	r1, #115	; 0x73
 800999a:	f000 809d 	beq.w	8009ad8 <_printf_i+0x1a4>
 800999e:	d808      	bhi.n	80099b2 <_printf_i+0x7e>
 80099a0:	296f      	cmp	r1, #111	; 0x6f
 80099a2:	d020      	beq.n	80099e6 <_printf_i+0xb2>
 80099a4:	2970      	cmp	r1, #112	; 0x70
 80099a6:	d1dd      	bne.n	8009964 <_printf_i+0x30>
 80099a8:	6823      	ldr	r3, [r4, #0]
 80099aa:	f043 0320 	orr.w	r3, r3, #32
 80099ae:	6023      	str	r3, [r4, #0]
 80099b0:	e003      	b.n	80099ba <_printf_i+0x86>
 80099b2:	2975      	cmp	r1, #117	; 0x75
 80099b4:	d017      	beq.n	80099e6 <_printf_i+0xb2>
 80099b6:	2978      	cmp	r1, #120	; 0x78
 80099b8:	d1d4      	bne.n	8009964 <_printf_i+0x30>
 80099ba:	2378      	movs	r3, #120	; 0x78
 80099bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80099c0:	4864      	ldr	r0, [pc, #400]	; (8009b54 <_printf_i+0x220>)
 80099c2:	e055      	b.n	8009a70 <_printf_i+0x13c>
 80099c4:	6813      	ldr	r3, [r2, #0]
 80099c6:	1d19      	adds	r1, r3, #4
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	6011      	str	r1, [r2, #0]
 80099cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80099d4:	2301      	movs	r3, #1
 80099d6:	e08c      	b.n	8009af2 <_printf_i+0x1be>
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	6011      	str	r1, [r2, #0]
 80099dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80099e0:	bf18      	it	ne
 80099e2:	b21b      	sxthne	r3, r3
 80099e4:	e7cf      	b.n	8009986 <_printf_i+0x52>
 80099e6:	6813      	ldr	r3, [r2, #0]
 80099e8:	6825      	ldr	r5, [r4, #0]
 80099ea:	1d18      	adds	r0, r3, #4
 80099ec:	6010      	str	r0, [r2, #0]
 80099ee:	0628      	lsls	r0, r5, #24
 80099f0:	d501      	bpl.n	80099f6 <_printf_i+0xc2>
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	e002      	b.n	80099fc <_printf_i+0xc8>
 80099f6:	0668      	lsls	r0, r5, #25
 80099f8:	d5fb      	bpl.n	80099f2 <_printf_i+0xbe>
 80099fa:	881b      	ldrh	r3, [r3, #0]
 80099fc:	4854      	ldr	r0, [pc, #336]	; (8009b50 <_printf_i+0x21c>)
 80099fe:	296f      	cmp	r1, #111	; 0x6f
 8009a00:	bf14      	ite	ne
 8009a02:	220a      	movne	r2, #10
 8009a04:	2208      	moveq	r2, #8
 8009a06:	2100      	movs	r1, #0
 8009a08:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009a0c:	6865      	ldr	r5, [r4, #4]
 8009a0e:	60a5      	str	r5, [r4, #8]
 8009a10:	2d00      	cmp	r5, #0
 8009a12:	f2c0 8095 	blt.w	8009b40 <_printf_i+0x20c>
 8009a16:	6821      	ldr	r1, [r4, #0]
 8009a18:	f021 0104 	bic.w	r1, r1, #4
 8009a1c:	6021      	str	r1, [r4, #0]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d13d      	bne.n	8009a9e <_printf_i+0x16a>
 8009a22:	2d00      	cmp	r5, #0
 8009a24:	f040 808e 	bne.w	8009b44 <_printf_i+0x210>
 8009a28:	4665      	mov	r5, ip
 8009a2a:	2a08      	cmp	r2, #8
 8009a2c:	d10b      	bne.n	8009a46 <_printf_i+0x112>
 8009a2e:	6823      	ldr	r3, [r4, #0]
 8009a30:	07db      	lsls	r3, r3, #31
 8009a32:	d508      	bpl.n	8009a46 <_printf_i+0x112>
 8009a34:	6923      	ldr	r3, [r4, #16]
 8009a36:	6862      	ldr	r2, [r4, #4]
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	bfde      	ittt	le
 8009a3c:	2330      	movle	r3, #48	; 0x30
 8009a3e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009a42:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009a46:	ebac 0305 	sub.w	r3, ip, r5
 8009a4a:	6123      	str	r3, [r4, #16]
 8009a4c:	f8cd 8000 	str.w	r8, [sp]
 8009a50:	463b      	mov	r3, r7
 8009a52:	aa03      	add	r2, sp, #12
 8009a54:	4621      	mov	r1, r4
 8009a56:	4630      	mov	r0, r6
 8009a58:	f7ff fef6 	bl	8009848 <_printf_common>
 8009a5c:	3001      	adds	r0, #1
 8009a5e:	d14d      	bne.n	8009afc <_printf_i+0x1c8>
 8009a60:	f04f 30ff 	mov.w	r0, #4294967295
 8009a64:	b005      	add	sp, #20
 8009a66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a6a:	4839      	ldr	r0, [pc, #228]	; (8009b50 <_printf_i+0x21c>)
 8009a6c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009a70:	6813      	ldr	r3, [r2, #0]
 8009a72:	6821      	ldr	r1, [r4, #0]
 8009a74:	1d1d      	adds	r5, r3, #4
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	6015      	str	r5, [r2, #0]
 8009a7a:	060a      	lsls	r2, r1, #24
 8009a7c:	d50b      	bpl.n	8009a96 <_printf_i+0x162>
 8009a7e:	07ca      	lsls	r2, r1, #31
 8009a80:	bf44      	itt	mi
 8009a82:	f041 0120 	orrmi.w	r1, r1, #32
 8009a86:	6021      	strmi	r1, [r4, #0]
 8009a88:	b91b      	cbnz	r3, 8009a92 <_printf_i+0x15e>
 8009a8a:	6822      	ldr	r2, [r4, #0]
 8009a8c:	f022 0220 	bic.w	r2, r2, #32
 8009a90:	6022      	str	r2, [r4, #0]
 8009a92:	2210      	movs	r2, #16
 8009a94:	e7b7      	b.n	8009a06 <_printf_i+0xd2>
 8009a96:	064d      	lsls	r5, r1, #25
 8009a98:	bf48      	it	mi
 8009a9a:	b29b      	uxthmi	r3, r3
 8009a9c:	e7ef      	b.n	8009a7e <_printf_i+0x14a>
 8009a9e:	4665      	mov	r5, ip
 8009aa0:	fbb3 f1f2 	udiv	r1, r3, r2
 8009aa4:	fb02 3311 	mls	r3, r2, r1, r3
 8009aa8:	5cc3      	ldrb	r3, [r0, r3]
 8009aaa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009aae:	460b      	mov	r3, r1
 8009ab0:	2900      	cmp	r1, #0
 8009ab2:	d1f5      	bne.n	8009aa0 <_printf_i+0x16c>
 8009ab4:	e7b9      	b.n	8009a2a <_printf_i+0xf6>
 8009ab6:	6813      	ldr	r3, [r2, #0]
 8009ab8:	6825      	ldr	r5, [r4, #0]
 8009aba:	6961      	ldr	r1, [r4, #20]
 8009abc:	1d18      	adds	r0, r3, #4
 8009abe:	6010      	str	r0, [r2, #0]
 8009ac0:	0628      	lsls	r0, r5, #24
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	d501      	bpl.n	8009aca <_printf_i+0x196>
 8009ac6:	6019      	str	r1, [r3, #0]
 8009ac8:	e002      	b.n	8009ad0 <_printf_i+0x19c>
 8009aca:	066a      	lsls	r2, r5, #25
 8009acc:	d5fb      	bpl.n	8009ac6 <_printf_i+0x192>
 8009ace:	8019      	strh	r1, [r3, #0]
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	6123      	str	r3, [r4, #16]
 8009ad4:	4665      	mov	r5, ip
 8009ad6:	e7b9      	b.n	8009a4c <_printf_i+0x118>
 8009ad8:	6813      	ldr	r3, [r2, #0]
 8009ada:	1d19      	adds	r1, r3, #4
 8009adc:	6011      	str	r1, [r2, #0]
 8009ade:	681d      	ldr	r5, [r3, #0]
 8009ae0:	6862      	ldr	r2, [r4, #4]
 8009ae2:	2100      	movs	r1, #0
 8009ae4:	4628      	mov	r0, r5
 8009ae6:	f7f6 fb9b 	bl	8000220 <memchr>
 8009aea:	b108      	cbz	r0, 8009af0 <_printf_i+0x1bc>
 8009aec:	1b40      	subs	r0, r0, r5
 8009aee:	6060      	str	r0, [r4, #4]
 8009af0:	6863      	ldr	r3, [r4, #4]
 8009af2:	6123      	str	r3, [r4, #16]
 8009af4:	2300      	movs	r3, #0
 8009af6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009afa:	e7a7      	b.n	8009a4c <_printf_i+0x118>
 8009afc:	6923      	ldr	r3, [r4, #16]
 8009afe:	462a      	mov	r2, r5
 8009b00:	4639      	mov	r1, r7
 8009b02:	4630      	mov	r0, r6
 8009b04:	47c0      	blx	r8
 8009b06:	3001      	adds	r0, #1
 8009b08:	d0aa      	beq.n	8009a60 <_printf_i+0x12c>
 8009b0a:	6823      	ldr	r3, [r4, #0]
 8009b0c:	079b      	lsls	r3, r3, #30
 8009b0e:	d413      	bmi.n	8009b38 <_printf_i+0x204>
 8009b10:	68e0      	ldr	r0, [r4, #12]
 8009b12:	9b03      	ldr	r3, [sp, #12]
 8009b14:	4298      	cmp	r0, r3
 8009b16:	bfb8      	it	lt
 8009b18:	4618      	movlt	r0, r3
 8009b1a:	e7a3      	b.n	8009a64 <_printf_i+0x130>
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	464a      	mov	r2, r9
 8009b20:	4639      	mov	r1, r7
 8009b22:	4630      	mov	r0, r6
 8009b24:	47c0      	blx	r8
 8009b26:	3001      	adds	r0, #1
 8009b28:	d09a      	beq.n	8009a60 <_printf_i+0x12c>
 8009b2a:	3501      	adds	r5, #1
 8009b2c:	68e3      	ldr	r3, [r4, #12]
 8009b2e:	9a03      	ldr	r2, [sp, #12]
 8009b30:	1a9b      	subs	r3, r3, r2
 8009b32:	42ab      	cmp	r3, r5
 8009b34:	dcf2      	bgt.n	8009b1c <_printf_i+0x1e8>
 8009b36:	e7eb      	b.n	8009b10 <_printf_i+0x1dc>
 8009b38:	2500      	movs	r5, #0
 8009b3a:	f104 0919 	add.w	r9, r4, #25
 8009b3e:	e7f5      	b.n	8009b2c <_printf_i+0x1f8>
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d1ac      	bne.n	8009a9e <_printf_i+0x16a>
 8009b44:	7803      	ldrb	r3, [r0, #0]
 8009b46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b4a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b4e:	e76c      	b.n	8009a2a <_printf_i+0xf6>
 8009b50:	0800b5d2 	.word	0x0800b5d2
 8009b54:	0800b5e3 	.word	0x0800b5e3

08009b58 <siprintf>:
 8009b58:	b40e      	push	{r1, r2, r3}
 8009b5a:	b500      	push	{lr}
 8009b5c:	b09c      	sub	sp, #112	; 0x70
 8009b5e:	ab1d      	add	r3, sp, #116	; 0x74
 8009b60:	9002      	str	r0, [sp, #8]
 8009b62:	9006      	str	r0, [sp, #24]
 8009b64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009b68:	4809      	ldr	r0, [pc, #36]	; (8009b90 <siprintf+0x38>)
 8009b6a:	9107      	str	r1, [sp, #28]
 8009b6c:	9104      	str	r1, [sp, #16]
 8009b6e:	4909      	ldr	r1, [pc, #36]	; (8009b94 <siprintf+0x3c>)
 8009b70:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b74:	9105      	str	r1, [sp, #20]
 8009b76:	6800      	ldr	r0, [r0, #0]
 8009b78:	9301      	str	r3, [sp, #4]
 8009b7a:	a902      	add	r1, sp, #8
 8009b7c:	f001 fa98 	bl	800b0b0 <_svfiprintf_r>
 8009b80:	9b02      	ldr	r3, [sp, #8]
 8009b82:	2200      	movs	r2, #0
 8009b84:	701a      	strb	r2, [r3, #0]
 8009b86:	b01c      	add	sp, #112	; 0x70
 8009b88:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b8c:	b003      	add	sp, #12
 8009b8e:	4770      	bx	lr
 8009b90:	20000024 	.word	0x20000024
 8009b94:	ffff0208 	.word	0xffff0208

08009b98 <_vsniprintf_r>:
 8009b98:	b530      	push	{r4, r5, lr}
 8009b9a:	1e14      	subs	r4, r2, #0
 8009b9c:	4605      	mov	r5, r0
 8009b9e:	b09b      	sub	sp, #108	; 0x6c
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	da05      	bge.n	8009bb0 <_vsniprintf_r+0x18>
 8009ba4:	238b      	movs	r3, #139	; 0x8b
 8009ba6:	602b      	str	r3, [r5, #0]
 8009ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8009bac:	b01b      	add	sp, #108	; 0x6c
 8009bae:	bd30      	pop	{r4, r5, pc}
 8009bb0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009bb4:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009bb8:	bf14      	ite	ne
 8009bba:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009bbe:	4623      	moveq	r3, r4
 8009bc0:	9302      	str	r3, [sp, #8]
 8009bc2:	9305      	str	r3, [sp, #20]
 8009bc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009bc8:	9100      	str	r1, [sp, #0]
 8009bca:	9104      	str	r1, [sp, #16]
 8009bcc:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009bd0:	4602      	mov	r2, r0
 8009bd2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009bd4:	4669      	mov	r1, sp
 8009bd6:	4628      	mov	r0, r5
 8009bd8:	f001 fa6a 	bl	800b0b0 <_svfiprintf_r>
 8009bdc:	1c43      	adds	r3, r0, #1
 8009bde:	bfbc      	itt	lt
 8009be0:	238b      	movlt	r3, #139	; 0x8b
 8009be2:	602b      	strlt	r3, [r5, #0]
 8009be4:	2c00      	cmp	r4, #0
 8009be6:	d0e1      	beq.n	8009bac <_vsniprintf_r+0x14>
 8009be8:	9b00      	ldr	r3, [sp, #0]
 8009bea:	2200      	movs	r2, #0
 8009bec:	701a      	strb	r2, [r3, #0]
 8009bee:	e7dd      	b.n	8009bac <_vsniprintf_r+0x14>

08009bf0 <vsniprintf>:
 8009bf0:	b507      	push	{r0, r1, r2, lr}
 8009bf2:	9300      	str	r3, [sp, #0]
 8009bf4:	4613      	mov	r3, r2
 8009bf6:	460a      	mov	r2, r1
 8009bf8:	4601      	mov	r1, r0
 8009bfa:	4803      	ldr	r0, [pc, #12]	; (8009c08 <vsniprintf+0x18>)
 8009bfc:	6800      	ldr	r0, [r0, #0]
 8009bfe:	f7ff ffcb 	bl	8009b98 <_vsniprintf_r>
 8009c02:	b003      	add	sp, #12
 8009c04:	f85d fb04 	ldr.w	pc, [sp], #4
 8009c08:	20000024 	.word	0x20000024

08009c0c <quorem>:
 8009c0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c10:	6903      	ldr	r3, [r0, #16]
 8009c12:	690c      	ldr	r4, [r1, #16]
 8009c14:	42a3      	cmp	r3, r4
 8009c16:	4680      	mov	r8, r0
 8009c18:	f2c0 8082 	blt.w	8009d20 <quorem+0x114>
 8009c1c:	3c01      	subs	r4, #1
 8009c1e:	f101 0714 	add.w	r7, r1, #20
 8009c22:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009c26:	f100 0614 	add.w	r6, r0, #20
 8009c2a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009c2e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009c32:	eb06 030c 	add.w	r3, r6, ip
 8009c36:	3501      	adds	r5, #1
 8009c38:	eb07 090c 	add.w	r9, r7, ip
 8009c3c:	9301      	str	r3, [sp, #4]
 8009c3e:	fbb0 f5f5 	udiv	r5, r0, r5
 8009c42:	b395      	cbz	r5, 8009caa <quorem+0x9e>
 8009c44:	f04f 0a00 	mov.w	sl, #0
 8009c48:	4638      	mov	r0, r7
 8009c4a:	46b6      	mov	lr, r6
 8009c4c:	46d3      	mov	fp, sl
 8009c4e:	f850 2b04 	ldr.w	r2, [r0], #4
 8009c52:	b293      	uxth	r3, r2
 8009c54:	fb05 a303 	mla	r3, r5, r3, sl
 8009c58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	ebab 0303 	sub.w	r3, fp, r3
 8009c62:	0c12      	lsrs	r2, r2, #16
 8009c64:	f8de b000 	ldr.w	fp, [lr]
 8009c68:	fb05 a202 	mla	r2, r5, r2, sl
 8009c6c:	fa13 f38b 	uxtah	r3, r3, fp
 8009c70:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009c74:	fa1f fb82 	uxth.w	fp, r2
 8009c78:	f8de 2000 	ldr.w	r2, [lr]
 8009c7c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009c80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009c84:	b29b      	uxth	r3, r3
 8009c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c8a:	4581      	cmp	r9, r0
 8009c8c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009c90:	f84e 3b04 	str.w	r3, [lr], #4
 8009c94:	d2db      	bcs.n	8009c4e <quorem+0x42>
 8009c96:	f856 300c 	ldr.w	r3, [r6, ip]
 8009c9a:	b933      	cbnz	r3, 8009caa <quorem+0x9e>
 8009c9c:	9b01      	ldr	r3, [sp, #4]
 8009c9e:	3b04      	subs	r3, #4
 8009ca0:	429e      	cmp	r6, r3
 8009ca2:	461a      	mov	r2, r3
 8009ca4:	d330      	bcc.n	8009d08 <quorem+0xfc>
 8009ca6:	f8c8 4010 	str.w	r4, [r8, #16]
 8009caa:	4640      	mov	r0, r8
 8009cac:	f001 f82a 	bl	800ad04 <__mcmp>
 8009cb0:	2800      	cmp	r0, #0
 8009cb2:	db25      	blt.n	8009d00 <quorem+0xf4>
 8009cb4:	3501      	adds	r5, #1
 8009cb6:	4630      	mov	r0, r6
 8009cb8:	f04f 0c00 	mov.w	ip, #0
 8009cbc:	f857 2b04 	ldr.w	r2, [r7], #4
 8009cc0:	f8d0 e000 	ldr.w	lr, [r0]
 8009cc4:	b293      	uxth	r3, r2
 8009cc6:	ebac 0303 	sub.w	r3, ip, r3
 8009cca:	0c12      	lsrs	r2, r2, #16
 8009ccc:	fa13 f38e 	uxtah	r3, r3, lr
 8009cd0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009cd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009cd8:	b29b      	uxth	r3, r3
 8009cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009cde:	45b9      	cmp	r9, r7
 8009ce0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009ce4:	f840 3b04 	str.w	r3, [r0], #4
 8009ce8:	d2e8      	bcs.n	8009cbc <quorem+0xb0>
 8009cea:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009cee:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009cf2:	b92a      	cbnz	r2, 8009d00 <quorem+0xf4>
 8009cf4:	3b04      	subs	r3, #4
 8009cf6:	429e      	cmp	r6, r3
 8009cf8:	461a      	mov	r2, r3
 8009cfa:	d30b      	bcc.n	8009d14 <quorem+0x108>
 8009cfc:	f8c8 4010 	str.w	r4, [r8, #16]
 8009d00:	4628      	mov	r0, r5
 8009d02:	b003      	add	sp, #12
 8009d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d08:	6812      	ldr	r2, [r2, #0]
 8009d0a:	3b04      	subs	r3, #4
 8009d0c:	2a00      	cmp	r2, #0
 8009d0e:	d1ca      	bne.n	8009ca6 <quorem+0x9a>
 8009d10:	3c01      	subs	r4, #1
 8009d12:	e7c5      	b.n	8009ca0 <quorem+0x94>
 8009d14:	6812      	ldr	r2, [r2, #0]
 8009d16:	3b04      	subs	r3, #4
 8009d18:	2a00      	cmp	r2, #0
 8009d1a:	d1ef      	bne.n	8009cfc <quorem+0xf0>
 8009d1c:	3c01      	subs	r4, #1
 8009d1e:	e7ea      	b.n	8009cf6 <quorem+0xea>
 8009d20:	2000      	movs	r0, #0
 8009d22:	e7ee      	b.n	8009d02 <quorem+0xf6>
 8009d24:	0000      	movs	r0, r0
	...

08009d28 <_dtoa_r>:
 8009d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d2c:	ec57 6b10 	vmov	r6, r7, d0
 8009d30:	b097      	sub	sp, #92	; 0x5c
 8009d32:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009d34:	9106      	str	r1, [sp, #24]
 8009d36:	4604      	mov	r4, r0
 8009d38:	920b      	str	r2, [sp, #44]	; 0x2c
 8009d3a:	9312      	str	r3, [sp, #72]	; 0x48
 8009d3c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009d40:	e9cd 6700 	strd	r6, r7, [sp]
 8009d44:	b93d      	cbnz	r5, 8009d56 <_dtoa_r+0x2e>
 8009d46:	2010      	movs	r0, #16
 8009d48:	f000 fdb4 	bl	800a8b4 <malloc>
 8009d4c:	6260      	str	r0, [r4, #36]	; 0x24
 8009d4e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009d52:	6005      	str	r5, [r0, #0]
 8009d54:	60c5      	str	r5, [r0, #12]
 8009d56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d58:	6819      	ldr	r1, [r3, #0]
 8009d5a:	b151      	cbz	r1, 8009d72 <_dtoa_r+0x4a>
 8009d5c:	685a      	ldr	r2, [r3, #4]
 8009d5e:	604a      	str	r2, [r1, #4]
 8009d60:	2301      	movs	r3, #1
 8009d62:	4093      	lsls	r3, r2
 8009d64:	608b      	str	r3, [r1, #8]
 8009d66:	4620      	mov	r0, r4
 8009d68:	f000 fdeb 	bl	800a942 <_Bfree>
 8009d6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d6e:	2200      	movs	r2, #0
 8009d70:	601a      	str	r2, [r3, #0]
 8009d72:	1e3b      	subs	r3, r7, #0
 8009d74:	bfbb      	ittet	lt
 8009d76:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009d7a:	9301      	strlt	r3, [sp, #4]
 8009d7c:	2300      	movge	r3, #0
 8009d7e:	2201      	movlt	r2, #1
 8009d80:	bfac      	ite	ge
 8009d82:	f8c8 3000 	strge.w	r3, [r8]
 8009d86:	f8c8 2000 	strlt.w	r2, [r8]
 8009d8a:	4baf      	ldr	r3, [pc, #700]	; (800a048 <_dtoa_r+0x320>)
 8009d8c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009d90:	ea33 0308 	bics.w	r3, r3, r8
 8009d94:	d114      	bne.n	8009dc0 <_dtoa_r+0x98>
 8009d96:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009d98:	f242 730f 	movw	r3, #9999	; 0x270f
 8009d9c:	6013      	str	r3, [r2, #0]
 8009d9e:	9b00      	ldr	r3, [sp, #0]
 8009da0:	b923      	cbnz	r3, 8009dac <_dtoa_r+0x84>
 8009da2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009da6:	2800      	cmp	r0, #0
 8009da8:	f000 8542 	beq.w	800a830 <_dtoa_r+0xb08>
 8009dac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009dae:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800a05c <_dtoa_r+0x334>
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	f000 8544 	beq.w	800a840 <_dtoa_r+0xb18>
 8009db8:	f10b 0303 	add.w	r3, fp, #3
 8009dbc:	f000 bd3e 	b.w	800a83c <_dtoa_r+0xb14>
 8009dc0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	4630      	mov	r0, r6
 8009dca:	4639      	mov	r1, r7
 8009dcc:	f7f6 fe9c 	bl	8000b08 <__aeabi_dcmpeq>
 8009dd0:	4681      	mov	r9, r0
 8009dd2:	b168      	cbz	r0, 8009df0 <_dtoa_r+0xc8>
 8009dd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	6013      	str	r3, [r2, #0]
 8009dda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	f000 8524 	beq.w	800a82a <_dtoa_r+0xb02>
 8009de2:	4b9a      	ldr	r3, [pc, #616]	; (800a04c <_dtoa_r+0x324>)
 8009de4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009de6:	f103 3bff 	add.w	fp, r3, #4294967295
 8009dea:	6013      	str	r3, [r2, #0]
 8009dec:	f000 bd28 	b.w	800a840 <_dtoa_r+0xb18>
 8009df0:	aa14      	add	r2, sp, #80	; 0x50
 8009df2:	a915      	add	r1, sp, #84	; 0x54
 8009df4:	ec47 6b10 	vmov	d0, r6, r7
 8009df8:	4620      	mov	r0, r4
 8009dfa:	f000 fffa 	bl	800adf2 <__d2b>
 8009dfe:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009e02:	9004      	str	r0, [sp, #16]
 8009e04:	2d00      	cmp	r5, #0
 8009e06:	d07c      	beq.n	8009f02 <_dtoa_r+0x1da>
 8009e08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009e0c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009e10:	46b2      	mov	sl, r6
 8009e12:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8009e16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009e1a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8009e1e:	2200      	movs	r2, #0
 8009e20:	4b8b      	ldr	r3, [pc, #556]	; (800a050 <_dtoa_r+0x328>)
 8009e22:	4650      	mov	r0, sl
 8009e24:	4659      	mov	r1, fp
 8009e26:	f7f6 fa4f 	bl	80002c8 <__aeabi_dsub>
 8009e2a:	a381      	add	r3, pc, #516	; (adr r3, 800a030 <_dtoa_r+0x308>)
 8009e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e30:	f7f6 fc02 	bl	8000638 <__aeabi_dmul>
 8009e34:	a380      	add	r3, pc, #512	; (adr r3, 800a038 <_dtoa_r+0x310>)
 8009e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e3a:	f7f6 fa47 	bl	80002cc <__adddf3>
 8009e3e:	4606      	mov	r6, r0
 8009e40:	4628      	mov	r0, r5
 8009e42:	460f      	mov	r7, r1
 8009e44:	f7f6 fb8e 	bl	8000564 <__aeabi_i2d>
 8009e48:	a37d      	add	r3, pc, #500	; (adr r3, 800a040 <_dtoa_r+0x318>)
 8009e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e4e:	f7f6 fbf3 	bl	8000638 <__aeabi_dmul>
 8009e52:	4602      	mov	r2, r0
 8009e54:	460b      	mov	r3, r1
 8009e56:	4630      	mov	r0, r6
 8009e58:	4639      	mov	r1, r7
 8009e5a:	f7f6 fa37 	bl	80002cc <__adddf3>
 8009e5e:	4606      	mov	r6, r0
 8009e60:	460f      	mov	r7, r1
 8009e62:	f7f6 fe99 	bl	8000b98 <__aeabi_d2iz>
 8009e66:	2200      	movs	r2, #0
 8009e68:	4682      	mov	sl, r0
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	4630      	mov	r0, r6
 8009e6e:	4639      	mov	r1, r7
 8009e70:	f7f6 fe54 	bl	8000b1c <__aeabi_dcmplt>
 8009e74:	b148      	cbz	r0, 8009e8a <_dtoa_r+0x162>
 8009e76:	4650      	mov	r0, sl
 8009e78:	f7f6 fb74 	bl	8000564 <__aeabi_i2d>
 8009e7c:	4632      	mov	r2, r6
 8009e7e:	463b      	mov	r3, r7
 8009e80:	f7f6 fe42 	bl	8000b08 <__aeabi_dcmpeq>
 8009e84:	b908      	cbnz	r0, 8009e8a <_dtoa_r+0x162>
 8009e86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e8a:	f1ba 0f16 	cmp.w	sl, #22
 8009e8e:	d859      	bhi.n	8009f44 <_dtoa_r+0x21c>
 8009e90:	4970      	ldr	r1, [pc, #448]	; (800a054 <_dtoa_r+0x32c>)
 8009e92:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009e96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e9e:	f7f6 fe5b 	bl	8000b58 <__aeabi_dcmpgt>
 8009ea2:	2800      	cmp	r0, #0
 8009ea4:	d050      	beq.n	8009f48 <_dtoa_r+0x220>
 8009ea6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009eaa:	2300      	movs	r3, #0
 8009eac:	930f      	str	r3, [sp, #60]	; 0x3c
 8009eae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009eb0:	1b5d      	subs	r5, r3, r5
 8009eb2:	f1b5 0801 	subs.w	r8, r5, #1
 8009eb6:	bf49      	itett	mi
 8009eb8:	f1c5 0301 	rsbmi	r3, r5, #1
 8009ebc:	2300      	movpl	r3, #0
 8009ebe:	9305      	strmi	r3, [sp, #20]
 8009ec0:	f04f 0800 	movmi.w	r8, #0
 8009ec4:	bf58      	it	pl
 8009ec6:	9305      	strpl	r3, [sp, #20]
 8009ec8:	f1ba 0f00 	cmp.w	sl, #0
 8009ecc:	db3e      	blt.n	8009f4c <_dtoa_r+0x224>
 8009ece:	2300      	movs	r3, #0
 8009ed0:	44d0      	add	r8, sl
 8009ed2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009ed6:	9307      	str	r3, [sp, #28]
 8009ed8:	9b06      	ldr	r3, [sp, #24]
 8009eda:	2b09      	cmp	r3, #9
 8009edc:	f200 8090 	bhi.w	800a000 <_dtoa_r+0x2d8>
 8009ee0:	2b05      	cmp	r3, #5
 8009ee2:	bfc4      	itt	gt
 8009ee4:	3b04      	subgt	r3, #4
 8009ee6:	9306      	strgt	r3, [sp, #24]
 8009ee8:	9b06      	ldr	r3, [sp, #24]
 8009eea:	f1a3 0302 	sub.w	r3, r3, #2
 8009eee:	bfcc      	ite	gt
 8009ef0:	2500      	movgt	r5, #0
 8009ef2:	2501      	movle	r5, #1
 8009ef4:	2b03      	cmp	r3, #3
 8009ef6:	f200 808f 	bhi.w	800a018 <_dtoa_r+0x2f0>
 8009efa:	e8df f003 	tbb	[pc, r3]
 8009efe:	7f7d      	.short	0x7f7d
 8009f00:	7131      	.short	0x7131
 8009f02:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8009f06:	441d      	add	r5, r3
 8009f08:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009f0c:	2820      	cmp	r0, #32
 8009f0e:	dd13      	ble.n	8009f38 <_dtoa_r+0x210>
 8009f10:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009f14:	9b00      	ldr	r3, [sp, #0]
 8009f16:	fa08 f800 	lsl.w	r8, r8, r0
 8009f1a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009f1e:	fa23 f000 	lsr.w	r0, r3, r0
 8009f22:	ea48 0000 	orr.w	r0, r8, r0
 8009f26:	f7f6 fb0d 	bl	8000544 <__aeabi_ui2d>
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	4682      	mov	sl, r0
 8009f2e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8009f32:	3d01      	subs	r5, #1
 8009f34:	9313      	str	r3, [sp, #76]	; 0x4c
 8009f36:	e772      	b.n	8009e1e <_dtoa_r+0xf6>
 8009f38:	9b00      	ldr	r3, [sp, #0]
 8009f3a:	f1c0 0020 	rsb	r0, r0, #32
 8009f3e:	fa03 f000 	lsl.w	r0, r3, r0
 8009f42:	e7f0      	b.n	8009f26 <_dtoa_r+0x1fe>
 8009f44:	2301      	movs	r3, #1
 8009f46:	e7b1      	b.n	8009eac <_dtoa_r+0x184>
 8009f48:	900f      	str	r0, [sp, #60]	; 0x3c
 8009f4a:	e7b0      	b.n	8009eae <_dtoa_r+0x186>
 8009f4c:	9b05      	ldr	r3, [sp, #20]
 8009f4e:	eba3 030a 	sub.w	r3, r3, sl
 8009f52:	9305      	str	r3, [sp, #20]
 8009f54:	f1ca 0300 	rsb	r3, sl, #0
 8009f58:	9307      	str	r3, [sp, #28]
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	930e      	str	r3, [sp, #56]	; 0x38
 8009f5e:	e7bb      	b.n	8009ed8 <_dtoa_r+0x1b0>
 8009f60:	2301      	movs	r3, #1
 8009f62:	930a      	str	r3, [sp, #40]	; 0x28
 8009f64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	dd59      	ble.n	800a01e <_dtoa_r+0x2f6>
 8009f6a:	9302      	str	r3, [sp, #8]
 8009f6c:	4699      	mov	r9, r3
 8009f6e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009f70:	2200      	movs	r2, #0
 8009f72:	6072      	str	r2, [r6, #4]
 8009f74:	2204      	movs	r2, #4
 8009f76:	f102 0014 	add.w	r0, r2, #20
 8009f7a:	4298      	cmp	r0, r3
 8009f7c:	6871      	ldr	r1, [r6, #4]
 8009f7e:	d953      	bls.n	800a028 <_dtoa_r+0x300>
 8009f80:	4620      	mov	r0, r4
 8009f82:	f000 fcaa 	bl	800a8da <_Balloc>
 8009f86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f88:	6030      	str	r0, [r6, #0]
 8009f8a:	f1b9 0f0e 	cmp.w	r9, #14
 8009f8e:	f8d3 b000 	ldr.w	fp, [r3]
 8009f92:	f200 80e6 	bhi.w	800a162 <_dtoa_r+0x43a>
 8009f96:	2d00      	cmp	r5, #0
 8009f98:	f000 80e3 	beq.w	800a162 <_dtoa_r+0x43a>
 8009f9c:	ed9d 7b00 	vldr	d7, [sp]
 8009fa0:	f1ba 0f00 	cmp.w	sl, #0
 8009fa4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009fa8:	dd74      	ble.n	800a094 <_dtoa_r+0x36c>
 8009faa:	4a2a      	ldr	r2, [pc, #168]	; (800a054 <_dtoa_r+0x32c>)
 8009fac:	f00a 030f 	and.w	r3, sl, #15
 8009fb0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009fb4:	ed93 7b00 	vldr	d7, [r3]
 8009fb8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009fbc:	06f0      	lsls	r0, r6, #27
 8009fbe:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009fc2:	d565      	bpl.n	800a090 <_dtoa_r+0x368>
 8009fc4:	4b24      	ldr	r3, [pc, #144]	; (800a058 <_dtoa_r+0x330>)
 8009fc6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009fca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009fce:	f7f6 fc5d 	bl	800088c <__aeabi_ddiv>
 8009fd2:	e9cd 0100 	strd	r0, r1, [sp]
 8009fd6:	f006 060f 	and.w	r6, r6, #15
 8009fda:	2503      	movs	r5, #3
 8009fdc:	4f1e      	ldr	r7, [pc, #120]	; (800a058 <_dtoa_r+0x330>)
 8009fde:	e04c      	b.n	800a07a <_dtoa_r+0x352>
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	930a      	str	r3, [sp, #40]	; 0x28
 8009fe4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fe6:	4453      	add	r3, sl
 8009fe8:	f103 0901 	add.w	r9, r3, #1
 8009fec:	9302      	str	r3, [sp, #8]
 8009fee:	464b      	mov	r3, r9
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	bfb8      	it	lt
 8009ff4:	2301      	movlt	r3, #1
 8009ff6:	e7ba      	b.n	8009f6e <_dtoa_r+0x246>
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	e7b2      	b.n	8009f62 <_dtoa_r+0x23a>
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	e7f0      	b.n	8009fe2 <_dtoa_r+0x2ba>
 800a000:	2501      	movs	r5, #1
 800a002:	2300      	movs	r3, #0
 800a004:	9306      	str	r3, [sp, #24]
 800a006:	950a      	str	r5, [sp, #40]	; 0x28
 800a008:	f04f 33ff 	mov.w	r3, #4294967295
 800a00c:	9302      	str	r3, [sp, #8]
 800a00e:	4699      	mov	r9, r3
 800a010:	2200      	movs	r2, #0
 800a012:	2312      	movs	r3, #18
 800a014:	920b      	str	r2, [sp, #44]	; 0x2c
 800a016:	e7aa      	b.n	8009f6e <_dtoa_r+0x246>
 800a018:	2301      	movs	r3, #1
 800a01a:	930a      	str	r3, [sp, #40]	; 0x28
 800a01c:	e7f4      	b.n	800a008 <_dtoa_r+0x2e0>
 800a01e:	2301      	movs	r3, #1
 800a020:	9302      	str	r3, [sp, #8]
 800a022:	4699      	mov	r9, r3
 800a024:	461a      	mov	r2, r3
 800a026:	e7f5      	b.n	800a014 <_dtoa_r+0x2ec>
 800a028:	3101      	adds	r1, #1
 800a02a:	6071      	str	r1, [r6, #4]
 800a02c:	0052      	lsls	r2, r2, #1
 800a02e:	e7a2      	b.n	8009f76 <_dtoa_r+0x24e>
 800a030:	636f4361 	.word	0x636f4361
 800a034:	3fd287a7 	.word	0x3fd287a7
 800a038:	8b60c8b3 	.word	0x8b60c8b3
 800a03c:	3fc68a28 	.word	0x3fc68a28
 800a040:	509f79fb 	.word	0x509f79fb
 800a044:	3fd34413 	.word	0x3fd34413
 800a048:	7ff00000 	.word	0x7ff00000
 800a04c:	0800b5d1 	.word	0x0800b5d1
 800a050:	3ff80000 	.word	0x3ff80000
 800a054:	0800b630 	.word	0x0800b630
 800a058:	0800b608 	.word	0x0800b608
 800a05c:	0800b5fd 	.word	0x0800b5fd
 800a060:	07f1      	lsls	r1, r6, #31
 800a062:	d508      	bpl.n	800a076 <_dtoa_r+0x34e>
 800a064:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a068:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a06c:	f7f6 fae4 	bl	8000638 <__aeabi_dmul>
 800a070:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a074:	3501      	adds	r5, #1
 800a076:	1076      	asrs	r6, r6, #1
 800a078:	3708      	adds	r7, #8
 800a07a:	2e00      	cmp	r6, #0
 800a07c:	d1f0      	bne.n	800a060 <_dtoa_r+0x338>
 800a07e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a082:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a086:	f7f6 fc01 	bl	800088c <__aeabi_ddiv>
 800a08a:	e9cd 0100 	strd	r0, r1, [sp]
 800a08e:	e01a      	b.n	800a0c6 <_dtoa_r+0x39e>
 800a090:	2502      	movs	r5, #2
 800a092:	e7a3      	b.n	8009fdc <_dtoa_r+0x2b4>
 800a094:	f000 80a0 	beq.w	800a1d8 <_dtoa_r+0x4b0>
 800a098:	f1ca 0600 	rsb	r6, sl, #0
 800a09c:	4b9f      	ldr	r3, [pc, #636]	; (800a31c <_dtoa_r+0x5f4>)
 800a09e:	4fa0      	ldr	r7, [pc, #640]	; (800a320 <_dtoa_r+0x5f8>)
 800a0a0:	f006 020f 	and.w	r2, r6, #15
 800a0a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a0b0:	f7f6 fac2 	bl	8000638 <__aeabi_dmul>
 800a0b4:	e9cd 0100 	strd	r0, r1, [sp]
 800a0b8:	1136      	asrs	r6, r6, #4
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	2502      	movs	r5, #2
 800a0be:	2e00      	cmp	r6, #0
 800a0c0:	d17f      	bne.n	800a1c2 <_dtoa_r+0x49a>
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d1e1      	bne.n	800a08a <_dtoa_r+0x362>
 800a0c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	f000 8087 	beq.w	800a1dc <_dtoa_r+0x4b4>
 800a0ce:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	4b93      	ldr	r3, [pc, #588]	; (800a324 <_dtoa_r+0x5fc>)
 800a0d6:	4630      	mov	r0, r6
 800a0d8:	4639      	mov	r1, r7
 800a0da:	f7f6 fd1f 	bl	8000b1c <__aeabi_dcmplt>
 800a0de:	2800      	cmp	r0, #0
 800a0e0:	d07c      	beq.n	800a1dc <_dtoa_r+0x4b4>
 800a0e2:	f1b9 0f00 	cmp.w	r9, #0
 800a0e6:	d079      	beq.n	800a1dc <_dtoa_r+0x4b4>
 800a0e8:	9b02      	ldr	r3, [sp, #8]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	dd35      	ble.n	800a15a <_dtoa_r+0x432>
 800a0ee:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a0f2:	9308      	str	r3, [sp, #32]
 800a0f4:	4639      	mov	r1, r7
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	4b8b      	ldr	r3, [pc, #556]	; (800a328 <_dtoa_r+0x600>)
 800a0fa:	4630      	mov	r0, r6
 800a0fc:	f7f6 fa9c 	bl	8000638 <__aeabi_dmul>
 800a100:	e9cd 0100 	strd	r0, r1, [sp]
 800a104:	9f02      	ldr	r7, [sp, #8]
 800a106:	3501      	adds	r5, #1
 800a108:	4628      	mov	r0, r5
 800a10a:	f7f6 fa2b 	bl	8000564 <__aeabi_i2d>
 800a10e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a112:	f7f6 fa91 	bl	8000638 <__aeabi_dmul>
 800a116:	2200      	movs	r2, #0
 800a118:	4b84      	ldr	r3, [pc, #528]	; (800a32c <_dtoa_r+0x604>)
 800a11a:	f7f6 f8d7 	bl	80002cc <__adddf3>
 800a11e:	4605      	mov	r5, r0
 800a120:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a124:	2f00      	cmp	r7, #0
 800a126:	d15d      	bne.n	800a1e4 <_dtoa_r+0x4bc>
 800a128:	2200      	movs	r2, #0
 800a12a:	4b81      	ldr	r3, [pc, #516]	; (800a330 <_dtoa_r+0x608>)
 800a12c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a130:	f7f6 f8ca 	bl	80002c8 <__aeabi_dsub>
 800a134:	462a      	mov	r2, r5
 800a136:	4633      	mov	r3, r6
 800a138:	e9cd 0100 	strd	r0, r1, [sp]
 800a13c:	f7f6 fd0c 	bl	8000b58 <__aeabi_dcmpgt>
 800a140:	2800      	cmp	r0, #0
 800a142:	f040 8288 	bne.w	800a656 <_dtoa_r+0x92e>
 800a146:	462a      	mov	r2, r5
 800a148:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a14c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a150:	f7f6 fce4 	bl	8000b1c <__aeabi_dcmplt>
 800a154:	2800      	cmp	r0, #0
 800a156:	f040 827c 	bne.w	800a652 <_dtoa_r+0x92a>
 800a15a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a15e:	e9cd 2300 	strd	r2, r3, [sp]
 800a162:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a164:	2b00      	cmp	r3, #0
 800a166:	f2c0 8150 	blt.w	800a40a <_dtoa_r+0x6e2>
 800a16a:	f1ba 0f0e 	cmp.w	sl, #14
 800a16e:	f300 814c 	bgt.w	800a40a <_dtoa_r+0x6e2>
 800a172:	4b6a      	ldr	r3, [pc, #424]	; (800a31c <_dtoa_r+0x5f4>)
 800a174:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a178:	ed93 7b00 	vldr	d7, [r3]
 800a17c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a17e:	2b00      	cmp	r3, #0
 800a180:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a184:	f280 80d8 	bge.w	800a338 <_dtoa_r+0x610>
 800a188:	f1b9 0f00 	cmp.w	r9, #0
 800a18c:	f300 80d4 	bgt.w	800a338 <_dtoa_r+0x610>
 800a190:	f040 825e 	bne.w	800a650 <_dtoa_r+0x928>
 800a194:	2200      	movs	r2, #0
 800a196:	4b66      	ldr	r3, [pc, #408]	; (800a330 <_dtoa_r+0x608>)
 800a198:	ec51 0b17 	vmov	r0, r1, d7
 800a19c:	f7f6 fa4c 	bl	8000638 <__aeabi_dmul>
 800a1a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1a4:	f7f6 fcce 	bl	8000b44 <__aeabi_dcmpge>
 800a1a8:	464f      	mov	r7, r9
 800a1aa:	464e      	mov	r6, r9
 800a1ac:	2800      	cmp	r0, #0
 800a1ae:	f040 8234 	bne.w	800a61a <_dtoa_r+0x8f2>
 800a1b2:	2331      	movs	r3, #49	; 0x31
 800a1b4:	f10b 0501 	add.w	r5, fp, #1
 800a1b8:	f88b 3000 	strb.w	r3, [fp]
 800a1bc:	f10a 0a01 	add.w	sl, sl, #1
 800a1c0:	e22f      	b.n	800a622 <_dtoa_r+0x8fa>
 800a1c2:	07f2      	lsls	r2, r6, #31
 800a1c4:	d505      	bpl.n	800a1d2 <_dtoa_r+0x4aa>
 800a1c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1ca:	f7f6 fa35 	bl	8000638 <__aeabi_dmul>
 800a1ce:	3501      	adds	r5, #1
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	1076      	asrs	r6, r6, #1
 800a1d4:	3708      	adds	r7, #8
 800a1d6:	e772      	b.n	800a0be <_dtoa_r+0x396>
 800a1d8:	2502      	movs	r5, #2
 800a1da:	e774      	b.n	800a0c6 <_dtoa_r+0x39e>
 800a1dc:	f8cd a020 	str.w	sl, [sp, #32]
 800a1e0:	464f      	mov	r7, r9
 800a1e2:	e791      	b.n	800a108 <_dtoa_r+0x3e0>
 800a1e4:	4b4d      	ldr	r3, [pc, #308]	; (800a31c <_dtoa_r+0x5f4>)
 800a1e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a1ea:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a1ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d047      	beq.n	800a284 <_dtoa_r+0x55c>
 800a1f4:	4602      	mov	r2, r0
 800a1f6:	460b      	mov	r3, r1
 800a1f8:	2000      	movs	r0, #0
 800a1fa:	494e      	ldr	r1, [pc, #312]	; (800a334 <_dtoa_r+0x60c>)
 800a1fc:	f7f6 fb46 	bl	800088c <__aeabi_ddiv>
 800a200:	462a      	mov	r2, r5
 800a202:	4633      	mov	r3, r6
 800a204:	f7f6 f860 	bl	80002c8 <__aeabi_dsub>
 800a208:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a20c:	465d      	mov	r5, fp
 800a20e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a212:	f7f6 fcc1 	bl	8000b98 <__aeabi_d2iz>
 800a216:	4606      	mov	r6, r0
 800a218:	f7f6 f9a4 	bl	8000564 <__aeabi_i2d>
 800a21c:	4602      	mov	r2, r0
 800a21e:	460b      	mov	r3, r1
 800a220:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a224:	f7f6 f850 	bl	80002c8 <__aeabi_dsub>
 800a228:	3630      	adds	r6, #48	; 0x30
 800a22a:	f805 6b01 	strb.w	r6, [r5], #1
 800a22e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a232:	e9cd 0100 	strd	r0, r1, [sp]
 800a236:	f7f6 fc71 	bl	8000b1c <__aeabi_dcmplt>
 800a23a:	2800      	cmp	r0, #0
 800a23c:	d163      	bne.n	800a306 <_dtoa_r+0x5de>
 800a23e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a242:	2000      	movs	r0, #0
 800a244:	4937      	ldr	r1, [pc, #220]	; (800a324 <_dtoa_r+0x5fc>)
 800a246:	f7f6 f83f 	bl	80002c8 <__aeabi_dsub>
 800a24a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a24e:	f7f6 fc65 	bl	8000b1c <__aeabi_dcmplt>
 800a252:	2800      	cmp	r0, #0
 800a254:	f040 80b7 	bne.w	800a3c6 <_dtoa_r+0x69e>
 800a258:	eba5 030b 	sub.w	r3, r5, fp
 800a25c:	429f      	cmp	r7, r3
 800a25e:	f77f af7c 	ble.w	800a15a <_dtoa_r+0x432>
 800a262:	2200      	movs	r2, #0
 800a264:	4b30      	ldr	r3, [pc, #192]	; (800a328 <_dtoa_r+0x600>)
 800a266:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a26a:	f7f6 f9e5 	bl	8000638 <__aeabi_dmul>
 800a26e:	2200      	movs	r2, #0
 800a270:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a274:	4b2c      	ldr	r3, [pc, #176]	; (800a328 <_dtoa_r+0x600>)
 800a276:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a27a:	f7f6 f9dd 	bl	8000638 <__aeabi_dmul>
 800a27e:	e9cd 0100 	strd	r0, r1, [sp]
 800a282:	e7c4      	b.n	800a20e <_dtoa_r+0x4e6>
 800a284:	462a      	mov	r2, r5
 800a286:	4633      	mov	r3, r6
 800a288:	f7f6 f9d6 	bl	8000638 <__aeabi_dmul>
 800a28c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a290:	eb0b 0507 	add.w	r5, fp, r7
 800a294:	465e      	mov	r6, fp
 800a296:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a29a:	f7f6 fc7d 	bl	8000b98 <__aeabi_d2iz>
 800a29e:	4607      	mov	r7, r0
 800a2a0:	f7f6 f960 	bl	8000564 <__aeabi_i2d>
 800a2a4:	3730      	adds	r7, #48	; 0x30
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	460b      	mov	r3, r1
 800a2aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a2ae:	f7f6 f80b 	bl	80002c8 <__aeabi_dsub>
 800a2b2:	f806 7b01 	strb.w	r7, [r6], #1
 800a2b6:	42ae      	cmp	r6, r5
 800a2b8:	e9cd 0100 	strd	r0, r1, [sp]
 800a2bc:	f04f 0200 	mov.w	r2, #0
 800a2c0:	d126      	bne.n	800a310 <_dtoa_r+0x5e8>
 800a2c2:	4b1c      	ldr	r3, [pc, #112]	; (800a334 <_dtoa_r+0x60c>)
 800a2c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a2c8:	f7f6 f800 	bl	80002cc <__adddf3>
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a2d4:	f7f6 fc40 	bl	8000b58 <__aeabi_dcmpgt>
 800a2d8:	2800      	cmp	r0, #0
 800a2da:	d174      	bne.n	800a3c6 <_dtoa_r+0x69e>
 800a2dc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a2e0:	2000      	movs	r0, #0
 800a2e2:	4914      	ldr	r1, [pc, #80]	; (800a334 <_dtoa_r+0x60c>)
 800a2e4:	f7f5 fff0 	bl	80002c8 <__aeabi_dsub>
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	460b      	mov	r3, r1
 800a2ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a2f0:	f7f6 fc14 	bl	8000b1c <__aeabi_dcmplt>
 800a2f4:	2800      	cmp	r0, #0
 800a2f6:	f43f af30 	beq.w	800a15a <_dtoa_r+0x432>
 800a2fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a2fe:	2b30      	cmp	r3, #48	; 0x30
 800a300:	f105 32ff 	add.w	r2, r5, #4294967295
 800a304:	d002      	beq.n	800a30c <_dtoa_r+0x5e4>
 800a306:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a30a:	e04a      	b.n	800a3a2 <_dtoa_r+0x67a>
 800a30c:	4615      	mov	r5, r2
 800a30e:	e7f4      	b.n	800a2fa <_dtoa_r+0x5d2>
 800a310:	4b05      	ldr	r3, [pc, #20]	; (800a328 <_dtoa_r+0x600>)
 800a312:	f7f6 f991 	bl	8000638 <__aeabi_dmul>
 800a316:	e9cd 0100 	strd	r0, r1, [sp]
 800a31a:	e7bc      	b.n	800a296 <_dtoa_r+0x56e>
 800a31c:	0800b630 	.word	0x0800b630
 800a320:	0800b608 	.word	0x0800b608
 800a324:	3ff00000 	.word	0x3ff00000
 800a328:	40240000 	.word	0x40240000
 800a32c:	401c0000 	.word	0x401c0000
 800a330:	40140000 	.word	0x40140000
 800a334:	3fe00000 	.word	0x3fe00000
 800a338:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a33c:	465d      	mov	r5, fp
 800a33e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a342:	4630      	mov	r0, r6
 800a344:	4639      	mov	r1, r7
 800a346:	f7f6 faa1 	bl	800088c <__aeabi_ddiv>
 800a34a:	f7f6 fc25 	bl	8000b98 <__aeabi_d2iz>
 800a34e:	4680      	mov	r8, r0
 800a350:	f7f6 f908 	bl	8000564 <__aeabi_i2d>
 800a354:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a358:	f7f6 f96e 	bl	8000638 <__aeabi_dmul>
 800a35c:	4602      	mov	r2, r0
 800a35e:	460b      	mov	r3, r1
 800a360:	4630      	mov	r0, r6
 800a362:	4639      	mov	r1, r7
 800a364:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800a368:	f7f5 ffae 	bl	80002c8 <__aeabi_dsub>
 800a36c:	f805 6b01 	strb.w	r6, [r5], #1
 800a370:	eba5 060b 	sub.w	r6, r5, fp
 800a374:	45b1      	cmp	r9, r6
 800a376:	4602      	mov	r2, r0
 800a378:	460b      	mov	r3, r1
 800a37a:	d139      	bne.n	800a3f0 <_dtoa_r+0x6c8>
 800a37c:	f7f5 ffa6 	bl	80002cc <__adddf3>
 800a380:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a384:	4606      	mov	r6, r0
 800a386:	460f      	mov	r7, r1
 800a388:	f7f6 fbe6 	bl	8000b58 <__aeabi_dcmpgt>
 800a38c:	b9c8      	cbnz	r0, 800a3c2 <_dtoa_r+0x69a>
 800a38e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a392:	4630      	mov	r0, r6
 800a394:	4639      	mov	r1, r7
 800a396:	f7f6 fbb7 	bl	8000b08 <__aeabi_dcmpeq>
 800a39a:	b110      	cbz	r0, 800a3a2 <_dtoa_r+0x67a>
 800a39c:	f018 0f01 	tst.w	r8, #1
 800a3a0:	d10f      	bne.n	800a3c2 <_dtoa_r+0x69a>
 800a3a2:	9904      	ldr	r1, [sp, #16]
 800a3a4:	4620      	mov	r0, r4
 800a3a6:	f000 facc 	bl	800a942 <_Bfree>
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a3ae:	702b      	strb	r3, [r5, #0]
 800a3b0:	f10a 0301 	add.w	r3, sl, #1
 800a3b4:	6013      	str	r3, [r2, #0]
 800a3b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	f000 8241 	beq.w	800a840 <_dtoa_r+0xb18>
 800a3be:	601d      	str	r5, [r3, #0]
 800a3c0:	e23e      	b.n	800a840 <_dtoa_r+0xb18>
 800a3c2:	f8cd a020 	str.w	sl, [sp, #32]
 800a3c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a3ca:	2a39      	cmp	r2, #57	; 0x39
 800a3cc:	f105 33ff 	add.w	r3, r5, #4294967295
 800a3d0:	d108      	bne.n	800a3e4 <_dtoa_r+0x6bc>
 800a3d2:	459b      	cmp	fp, r3
 800a3d4:	d10a      	bne.n	800a3ec <_dtoa_r+0x6c4>
 800a3d6:	9b08      	ldr	r3, [sp, #32]
 800a3d8:	3301      	adds	r3, #1
 800a3da:	9308      	str	r3, [sp, #32]
 800a3dc:	2330      	movs	r3, #48	; 0x30
 800a3de:	f88b 3000 	strb.w	r3, [fp]
 800a3e2:	465b      	mov	r3, fp
 800a3e4:	781a      	ldrb	r2, [r3, #0]
 800a3e6:	3201      	adds	r2, #1
 800a3e8:	701a      	strb	r2, [r3, #0]
 800a3ea:	e78c      	b.n	800a306 <_dtoa_r+0x5de>
 800a3ec:	461d      	mov	r5, r3
 800a3ee:	e7ea      	b.n	800a3c6 <_dtoa_r+0x69e>
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	4b9b      	ldr	r3, [pc, #620]	; (800a660 <_dtoa_r+0x938>)
 800a3f4:	f7f6 f920 	bl	8000638 <__aeabi_dmul>
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	4606      	mov	r6, r0
 800a3fe:	460f      	mov	r7, r1
 800a400:	f7f6 fb82 	bl	8000b08 <__aeabi_dcmpeq>
 800a404:	2800      	cmp	r0, #0
 800a406:	d09a      	beq.n	800a33e <_dtoa_r+0x616>
 800a408:	e7cb      	b.n	800a3a2 <_dtoa_r+0x67a>
 800a40a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a40c:	2a00      	cmp	r2, #0
 800a40e:	f000 808b 	beq.w	800a528 <_dtoa_r+0x800>
 800a412:	9a06      	ldr	r2, [sp, #24]
 800a414:	2a01      	cmp	r2, #1
 800a416:	dc6e      	bgt.n	800a4f6 <_dtoa_r+0x7ce>
 800a418:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a41a:	2a00      	cmp	r2, #0
 800a41c:	d067      	beq.n	800a4ee <_dtoa_r+0x7c6>
 800a41e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a422:	9f07      	ldr	r7, [sp, #28]
 800a424:	9d05      	ldr	r5, [sp, #20]
 800a426:	9a05      	ldr	r2, [sp, #20]
 800a428:	2101      	movs	r1, #1
 800a42a:	441a      	add	r2, r3
 800a42c:	4620      	mov	r0, r4
 800a42e:	9205      	str	r2, [sp, #20]
 800a430:	4498      	add	r8, r3
 800a432:	f000 fb26 	bl	800aa82 <__i2b>
 800a436:	4606      	mov	r6, r0
 800a438:	2d00      	cmp	r5, #0
 800a43a:	dd0c      	ble.n	800a456 <_dtoa_r+0x72e>
 800a43c:	f1b8 0f00 	cmp.w	r8, #0
 800a440:	dd09      	ble.n	800a456 <_dtoa_r+0x72e>
 800a442:	4545      	cmp	r5, r8
 800a444:	9a05      	ldr	r2, [sp, #20]
 800a446:	462b      	mov	r3, r5
 800a448:	bfa8      	it	ge
 800a44a:	4643      	movge	r3, r8
 800a44c:	1ad2      	subs	r2, r2, r3
 800a44e:	9205      	str	r2, [sp, #20]
 800a450:	1aed      	subs	r5, r5, r3
 800a452:	eba8 0803 	sub.w	r8, r8, r3
 800a456:	9b07      	ldr	r3, [sp, #28]
 800a458:	b1eb      	cbz	r3, 800a496 <_dtoa_r+0x76e>
 800a45a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d067      	beq.n	800a530 <_dtoa_r+0x808>
 800a460:	b18f      	cbz	r7, 800a486 <_dtoa_r+0x75e>
 800a462:	4631      	mov	r1, r6
 800a464:	463a      	mov	r2, r7
 800a466:	4620      	mov	r0, r4
 800a468:	f000 fbaa 	bl	800abc0 <__pow5mult>
 800a46c:	9a04      	ldr	r2, [sp, #16]
 800a46e:	4601      	mov	r1, r0
 800a470:	4606      	mov	r6, r0
 800a472:	4620      	mov	r0, r4
 800a474:	f000 fb0e 	bl	800aa94 <__multiply>
 800a478:	9904      	ldr	r1, [sp, #16]
 800a47a:	9008      	str	r0, [sp, #32]
 800a47c:	4620      	mov	r0, r4
 800a47e:	f000 fa60 	bl	800a942 <_Bfree>
 800a482:	9b08      	ldr	r3, [sp, #32]
 800a484:	9304      	str	r3, [sp, #16]
 800a486:	9b07      	ldr	r3, [sp, #28]
 800a488:	1bda      	subs	r2, r3, r7
 800a48a:	d004      	beq.n	800a496 <_dtoa_r+0x76e>
 800a48c:	9904      	ldr	r1, [sp, #16]
 800a48e:	4620      	mov	r0, r4
 800a490:	f000 fb96 	bl	800abc0 <__pow5mult>
 800a494:	9004      	str	r0, [sp, #16]
 800a496:	2101      	movs	r1, #1
 800a498:	4620      	mov	r0, r4
 800a49a:	f000 faf2 	bl	800aa82 <__i2b>
 800a49e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a4a0:	4607      	mov	r7, r0
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	f000 81d0 	beq.w	800a848 <_dtoa_r+0xb20>
 800a4a8:	461a      	mov	r2, r3
 800a4aa:	4601      	mov	r1, r0
 800a4ac:	4620      	mov	r0, r4
 800a4ae:	f000 fb87 	bl	800abc0 <__pow5mult>
 800a4b2:	9b06      	ldr	r3, [sp, #24]
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	4607      	mov	r7, r0
 800a4b8:	dc40      	bgt.n	800a53c <_dtoa_r+0x814>
 800a4ba:	9b00      	ldr	r3, [sp, #0]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d139      	bne.n	800a534 <_dtoa_r+0x80c>
 800a4c0:	9b01      	ldr	r3, [sp, #4]
 800a4c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d136      	bne.n	800a538 <_dtoa_r+0x810>
 800a4ca:	9b01      	ldr	r3, [sp, #4]
 800a4cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a4d0:	0d1b      	lsrs	r3, r3, #20
 800a4d2:	051b      	lsls	r3, r3, #20
 800a4d4:	b12b      	cbz	r3, 800a4e2 <_dtoa_r+0x7ba>
 800a4d6:	9b05      	ldr	r3, [sp, #20]
 800a4d8:	3301      	adds	r3, #1
 800a4da:	9305      	str	r3, [sp, #20]
 800a4dc:	f108 0801 	add.w	r8, r8, #1
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	9307      	str	r3, [sp, #28]
 800a4e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d12a      	bne.n	800a540 <_dtoa_r+0x818>
 800a4ea:	2001      	movs	r0, #1
 800a4ec:	e030      	b.n	800a550 <_dtoa_r+0x828>
 800a4ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a4f0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a4f4:	e795      	b.n	800a422 <_dtoa_r+0x6fa>
 800a4f6:	9b07      	ldr	r3, [sp, #28]
 800a4f8:	f109 37ff 	add.w	r7, r9, #4294967295
 800a4fc:	42bb      	cmp	r3, r7
 800a4fe:	bfbf      	itttt	lt
 800a500:	9b07      	ldrlt	r3, [sp, #28]
 800a502:	9707      	strlt	r7, [sp, #28]
 800a504:	1afa      	sublt	r2, r7, r3
 800a506:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a508:	bfbb      	ittet	lt
 800a50a:	189b      	addlt	r3, r3, r2
 800a50c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a50e:	1bdf      	subge	r7, r3, r7
 800a510:	2700      	movlt	r7, #0
 800a512:	f1b9 0f00 	cmp.w	r9, #0
 800a516:	bfb5      	itete	lt
 800a518:	9b05      	ldrlt	r3, [sp, #20]
 800a51a:	9d05      	ldrge	r5, [sp, #20]
 800a51c:	eba3 0509 	sublt.w	r5, r3, r9
 800a520:	464b      	movge	r3, r9
 800a522:	bfb8      	it	lt
 800a524:	2300      	movlt	r3, #0
 800a526:	e77e      	b.n	800a426 <_dtoa_r+0x6fe>
 800a528:	9f07      	ldr	r7, [sp, #28]
 800a52a:	9d05      	ldr	r5, [sp, #20]
 800a52c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a52e:	e783      	b.n	800a438 <_dtoa_r+0x710>
 800a530:	9a07      	ldr	r2, [sp, #28]
 800a532:	e7ab      	b.n	800a48c <_dtoa_r+0x764>
 800a534:	2300      	movs	r3, #0
 800a536:	e7d4      	b.n	800a4e2 <_dtoa_r+0x7ba>
 800a538:	9b00      	ldr	r3, [sp, #0]
 800a53a:	e7d2      	b.n	800a4e2 <_dtoa_r+0x7ba>
 800a53c:	2300      	movs	r3, #0
 800a53e:	9307      	str	r3, [sp, #28]
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a546:	6918      	ldr	r0, [r3, #16]
 800a548:	f000 fa4d 	bl	800a9e6 <__hi0bits>
 800a54c:	f1c0 0020 	rsb	r0, r0, #32
 800a550:	4440      	add	r0, r8
 800a552:	f010 001f 	ands.w	r0, r0, #31
 800a556:	d047      	beq.n	800a5e8 <_dtoa_r+0x8c0>
 800a558:	f1c0 0320 	rsb	r3, r0, #32
 800a55c:	2b04      	cmp	r3, #4
 800a55e:	dd3b      	ble.n	800a5d8 <_dtoa_r+0x8b0>
 800a560:	9b05      	ldr	r3, [sp, #20]
 800a562:	f1c0 001c 	rsb	r0, r0, #28
 800a566:	4403      	add	r3, r0
 800a568:	9305      	str	r3, [sp, #20]
 800a56a:	4405      	add	r5, r0
 800a56c:	4480      	add	r8, r0
 800a56e:	9b05      	ldr	r3, [sp, #20]
 800a570:	2b00      	cmp	r3, #0
 800a572:	dd05      	ble.n	800a580 <_dtoa_r+0x858>
 800a574:	461a      	mov	r2, r3
 800a576:	9904      	ldr	r1, [sp, #16]
 800a578:	4620      	mov	r0, r4
 800a57a:	f000 fb6f 	bl	800ac5c <__lshift>
 800a57e:	9004      	str	r0, [sp, #16]
 800a580:	f1b8 0f00 	cmp.w	r8, #0
 800a584:	dd05      	ble.n	800a592 <_dtoa_r+0x86a>
 800a586:	4639      	mov	r1, r7
 800a588:	4642      	mov	r2, r8
 800a58a:	4620      	mov	r0, r4
 800a58c:	f000 fb66 	bl	800ac5c <__lshift>
 800a590:	4607      	mov	r7, r0
 800a592:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a594:	b353      	cbz	r3, 800a5ec <_dtoa_r+0x8c4>
 800a596:	4639      	mov	r1, r7
 800a598:	9804      	ldr	r0, [sp, #16]
 800a59a:	f000 fbb3 	bl	800ad04 <__mcmp>
 800a59e:	2800      	cmp	r0, #0
 800a5a0:	da24      	bge.n	800a5ec <_dtoa_r+0x8c4>
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	220a      	movs	r2, #10
 800a5a6:	9904      	ldr	r1, [sp, #16]
 800a5a8:	4620      	mov	r0, r4
 800a5aa:	f000 f9e1 	bl	800a970 <__multadd>
 800a5ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5b0:	9004      	str	r0, [sp, #16]
 800a5b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	f000 814d 	beq.w	800a856 <_dtoa_r+0xb2e>
 800a5bc:	2300      	movs	r3, #0
 800a5be:	4631      	mov	r1, r6
 800a5c0:	220a      	movs	r2, #10
 800a5c2:	4620      	mov	r0, r4
 800a5c4:	f000 f9d4 	bl	800a970 <__multadd>
 800a5c8:	9b02      	ldr	r3, [sp, #8]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	4606      	mov	r6, r0
 800a5ce:	dc4f      	bgt.n	800a670 <_dtoa_r+0x948>
 800a5d0:	9b06      	ldr	r3, [sp, #24]
 800a5d2:	2b02      	cmp	r3, #2
 800a5d4:	dd4c      	ble.n	800a670 <_dtoa_r+0x948>
 800a5d6:	e011      	b.n	800a5fc <_dtoa_r+0x8d4>
 800a5d8:	d0c9      	beq.n	800a56e <_dtoa_r+0x846>
 800a5da:	9a05      	ldr	r2, [sp, #20]
 800a5dc:	331c      	adds	r3, #28
 800a5de:	441a      	add	r2, r3
 800a5e0:	9205      	str	r2, [sp, #20]
 800a5e2:	441d      	add	r5, r3
 800a5e4:	4498      	add	r8, r3
 800a5e6:	e7c2      	b.n	800a56e <_dtoa_r+0x846>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	e7f6      	b.n	800a5da <_dtoa_r+0x8b2>
 800a5ec:	f1b9 0f00 	cmp.w	r9, #0
 800a5f0:	dc38      	bgt.n	800a664 <_dtoa_r+0x93c>
 800a5f2:	9b06      	ldr	r3, [sp, #24]
 800a5f4:	2b02      	cmp	r3, #2
 800a5f6:	dd35      	ble.n	800a664 <_dtoa_r+0x93c>
 800a5f8:	f8cd 9008 	str.w	r9, [sp, #8]
 800a5fc:	9b02      	ldr	r3, [sp, #8]
 800a5fe:	b963      	cbnz	r3, 800a61a <_dtoa_r+0x8f2>
 800a600:	4639      	mov	r1, r7
 800a602:	2205      	movs	r2, #5
 800a604:	4620      	mov	r0, r4
 800a606:	f000 f9b3 	bl	800a970 <__multadd>
 800a60a:	4601      	mov	r1, r0
 800a60c:	4607      	mov	r7, r0
 800a60e:	9804      	ldr	r0, [sp, #16]
 800a610:	f000 fb78 	bl	800ad04 <__mcmp>
 800a614:	2800      	cmp	r0, #0
 800a616:	f73f adcc 	bgt.w	800a1b2 <_dtoa_r+0x48a>
 800a61a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a61c:	465d      	mov	r5, fp
 800a61e:	ea6f 0a03 	mvn.w	sl, r3
 800a622:	f04f 0900 	mov.w	r9, #0
 800a626:	4639      	mov	r1, r7
 800a628:	4620      	mov	r0, r4
 800a62a:	f000 f98a 	bl	800a942 <_Bfree>
 800a62e:	2e00      	cmp	r6, #0
 800a630:	f43f aeb7 	beq.w	800a3a2 <_dtoa_r+0x67a>
 800a634:	f1b9 0f00 	cmp.w	r9, #0
 800a638:	d005      	beq.n	800a646 <_dtoa_r+0x91e>
 800a63a:	45b1      	cmp	r9, r6
 800a63c:	d003      	beq.n	800a646 <_dtoa_r+0x91e>
 800a63e:	4649      	mov	r1, r9
 800a640:	4620      	mov	r0, r4
 800a642:	f000 f97e 	bl	800a942 <_Bfree>
 800a646:	4631      	mov	r1, r6
 800a648:	4620      	mov	r0, r4
 800a64a:	f000 f97a 	bl	800a942 <_Bfree>
 800a64e:	e6a8      	b.n	800a3a2 <_dtoa_r+0x67a>
 800a650:	2700      	movs	r7, #0
 800a652:	463e      	mov	r6, r7
 800a654:	e7e1      	b.n	800a61a <_dtoa_r+0x8f2>
 800a656:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a65a:	463e      	mov	r6, r7
 800a65c:	e5a9      	b.n	800a1b2 <_dtoa_r+0x48a>
 800a65e:	bf00      	nop
 800a660:	40240000 	.word	0x40240000
 800a664:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a666:	f8cd 9008 	str.w	r9, [sp, #8]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	f000 80fa 	beq.w	800a864 <_dtoa_r+0xb3c>
 800a670:	2d00      	cmp	r5, #0
 800a672:	dd05      	ble.n	800a680 <_dtoa_r+0x958>
 800a674:	4631      	mov	r1, r6
 800a676:	462a      	mov	r2, r5
 800a678:	4620      	mov	r0, r4
 800a67a:	f000 faef 	bl	800ac5c <__lshift>
 800a67e:	4606      	mov	r6, r0
 800a680:	9b07      	ldr	r3, [sp, #28]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d04c      	beq.n	800a720 <_dtoa_r+0x9f8>
 800a686:	6871      	ldr	r1, [r6, #4]
 800a688:	4620      	mov	r0, r4
 800a68a:	f000 f926 	bl	800a8da <_Balloc>
 800a68e:	6932      	ldr	r2, [r6, #16]
 800a690:	3202      	adds	r2, #2
 800a692:	4605      	mov	r5, r0
 800a694:	0092      	lsls	r2, r2, #2
 800a696:	f106 010c 	add.w	r1, r6, #12
 800a69a:	300c      	adds	r0, #12
 800a69c:	f000 f912 	bl	800a8c4 <memcpy>
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	4629      	mov	r1, r5
 800a6a4:	4620      	mov	r0, r4
 800a6a6:	f000 fad9 	bl	800ac5c <__lshift>
 800a6aa:	9b00      	ldr	r3, [sp, #0]
 800a6ac:	f8cd b014 	str.w	fp, [sp, #20]
 800a6b0:	f003 0301 	and.w	r3, r3, #1
 800a6b4:	46b1      	mov	r9, r6
 800a6b6:	9307      	str	r3, [sp, #28]
 800a6b8:	4606      	mov	r6, r0
 800a6ba:	4639      	mov	r1, r7
 800a6bc:	9804      	ldr	r0, [sp, #16]
 800a6be:	f7ff faa5 	bl	8009c0c <quorem>
 800a6c2:	4649      	mov	r1, r9
 800a6c4:	4605      	mov	r5, r0
 800a6c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a6ca:	9804      	ldr	r0, [sp, #16]
 800a6cc:	f000 fb1a 	bl	800ad04 <__mcmp>
 800a6d0:	4632      	mov	r2, r6
 800a6d2:	9000      	str	r0, [sp, #0]
 800a6d4:	4639      	mov	r1, r7
 800a6d6:	4620      	mov	r0, r4
 800a6d8:	f000 fb2e 	bl	800ad38 <__mdiff>
 800a6dc:	68c3      	ldr	r3, [r0, #12]
 800a6de:	4602      	mov	r2, r0
 800a6e0:	bb03      	cbnz	r3, 800a724 <_dtoa_r+0x9fc>
 800a6e2:	4601      	mov	r1, r0
 800a6e4:	9008      	str	r0, [sp, #32]
 800a6e6:	9804      	ldr	r0, [sp, #16]
 800a6e8:	f000 fb0c 	bl	800ad04 <__mcmp>
 800a6ec:	9a08      	ldr	r2, [sp, #32]
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	4611      	mov	r1, r2
 800a6f2:	4620      	mov	r0, r4
 800a6f4:	9308      	str	r3, [sp, #32]
 800a6f6:	f000 f924 	bl	800a942 <_Bfree>
 800a6fa:	9b08      	ldr	r3, [sp, #32]
 800a6fc:	b9a3      	cbnz	r3, 800a728 <_dtoa_r+0xa00>
 800a6fe:	9a06      	ldr	r2, [sp, #24]
 800a700:	b992      	cbnz	r2, 800a728 <_dtoa_r+0xa00>
 800a702:	9a07      	ldr	r2, [sp, #28]
 800a704:	b982      	cbnz	r2, 800a728 <_dtoa_r+0xa00>
 800a706:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a70a:	d029      	beq.n	800a760 <_dtoa_r+0xa38>
 800a70c:	9b00      	ldr	r3, [sp, #0]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	dd01      	ble.n	800a716 <_dtoa_r+0x9ee>
 800a712:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a716:	9b05      	ldr	r3, [sp, #20]
 800a718:	1c5d      	adds	r5, r3, #1
 800a71a:	f883 8000 	strb.w	r8, [r3]
 800a71e:	e782      	b.n	800a626 <_dtoa_r+0x8fe>
 800a720:	4630      	mov	r0, r6
 800a722:	e7c2      	b.n	800a6aa <_dtoa_r+0x982>
 800a724:	2301      	movs	r3, #1
 800a726:	e7e3      	b.n	800a6f0 <_dtoa_r+0x9c8>
 800a728:	9a00      	ldr	r2, [sp, #0]
 800a72a:	2a00      	cmp	r2, #0
 800a72c:	db04      	blt.n	800a738 <_dtoa_r+0xa10>
 800a72e:	d125      	bne.n	800a77c <_dtoa_r+0xa54>
 800a730:	9a06      	ldr	r2, [sp, #24]
 800a732:	bb1a      	cbnz	r2, 800a77c <_dtoa_r+0xa54>
 800a734:	9a07      	ldr	r2, [sp, #28]
 800a736:	bb0a      	cbnz	r2, 800a77c <_dtoa_r+0xa54>
 800a738:	2b00      	cmp	r3, #0
 800a73a:	ddec      	ble.n	800a716 <_dtoa_r+0x9ee>
 800a73c:	2201      	movs	r2, #1
 800a73e:	9904      	ldr	r1, [sp, #16]
 800a740:	4620      	mov	r0, r4
 800a742:	f000 fa8b 	bl	800ac5c <__lshift>
 800a746:	4639      	mov	r1, r7
 800a748:	9004      	str	r0, [sp, #16]
 800a74a:	f000 fadb 	bl	800ad04 <__mcmp>
 800a74e:	2800      	cmp	r0, #0
 800a750:	dc03      	bgt.n	800a75a <_dtoa_r+0xa32>
 800a752:	d1e0      	bne.n	800a716 <_dtoa_r+0x9ee>
 800a754:	f018 0f01 	tst.w	r8, #1
 800a758:	d0dd      	beq.n	800a716 <_dtoa_r+0x9ee>
 800a75a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a75e:	d1d8      	bne.n	800a712 <_dtoa_r+0x9ea>
 800a760:	9b05      	ldr	r3, [sp, #20]
 800a762:	9a05      	ldr	r2, [sp, #20]
 800a764:	1c5d      	adds	r5, r3, #1
 800a766:	2339      	movs	r3, #57	; 0x39
 800a768:	7013      	strb	r3, [r2, #0]
 800a76a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a76e:	2b39      	cmp	r3, #57	; 0x39
 800a770:	f105 32ff 	add.w	r2, r5, #4294967295
 800a774:	d04f      	beq.n	800a816 <_dtoa_r+0xaee>
 800a776:	3301      	adds	r3, #1
 800a778:	7013      	strb	r3, [r2, #0]
 800a77a:	e754      	b.n	800a626 <_dtoa_r+0x8fe>
 800a77c:	9a05      	ldr	r2, [sp, #20]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	f102 0501 	add.w	r5, r2, #1
 800a784:	dd06      	ble.n	800a794 <_dtoa_r+0xa6c>
 800a786:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a78a:	d0e9      	beq.n	800a760 <_dtoa_r+0xa38>
 800a78c:	f108 0801 	add.w	r8, r8, #1
 800a790:	9b05      	ldr	r3, [sp, #20]
 800a792:	e7c2      	b.n	800a71a <_dtoa_r+0x9f2>
 800a794:	9a02      	ldr	r2, [sp, #8]
 800a796:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a79a:	eba5 030b 	sub.w	r3, r5, fp
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d021      	beq.n	800a7e6 <_dtoa_r+0xabe>
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	220a      	movs	r2, #10
 800a7a6:	9904      	ldr	r1, [sp, #16]
 800a7a8:	4620      	mov	r0, r4
 800a7aa:	f000 f8e1 	bl	800a970 <__multadd>
 800a7ae:	45b1      	cmp	r9, r6
 800a7b0:	9004      	str	r0, [sp, #16]
 800a7b2:	f04f 0300 	mov.w	r3, #0
 800a7b6:	f04f 020a 	mov.w	r2, #10
 800a7ba:	4649      	mov	r1, r9
 800a7bc:	4620      	mov	r0, r4
 800a7be:	d105      	bne.n	800a7cc <_dtoa_r+0xaa4>
 800a7c0:	f000 f8d6 	bl	800a970 <__multadd>
 800a7c4:	4681      	mov	r9, r0
 800a7c6:	4606      	mov	r6, r0
 800a7c8:	9505      	str	r5, [sp, #20]
 800a7ca:	e776      	b.n	800a6ba <_dtoa_r+0x992>
 800a7cc:	f000 f8d0 	bl	800a970 <__multadd>
 800a7d0:	4631      	mov	r1, r6
 800a7d2:	4681      	mov	r9, r0
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	220a      	movs	r2, #10
 800a7d8:	4620      	mov	r0, r4
 800a7da:	f000 f8c9 	bl	800a970 <__multadd>
 800a7de:	4606      	mov	r6, r0
 800a7e0:	e7f2      	b.n	800a7c8 <_dtoa_r+0xaa0>
 800a7e2:	f04f 0900 	mov.w	r9, #0
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	9904      	ldr	r1, [sp, #16]
 800a7ea:	4620      	mov	r0, r4
 800a7ec:	f000 fa36 	bl	800ac5c <__lshift>
 800a7f0:	4639      	mov	r1, r7
 800a7f2:	9004      	str	r0, [sp, #16]
 800a7f4:	f000 fa86 	bl	800ad04 <__mcmp>
 800a7f8:	2800      	cmp	r0, #0
 800a7fa:	dcb6      	bgt.n	800a76a <_dtoa_r+0xa42>
 800a7fc:	d102      	bne.n	800a804 <_dtoa_r+0xadc>
 800a7fe:	f018 0f01 	tst.w	r8, #1
 800a802:	d1b2      	bne.n	800a76a <_dtoa_r+0xa42>
 800a804:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a808:	2b30      	cmp	r3, #48	; 0x30
 800a80a:	f105 32ff 	add.w	r2, r5, #4294967295
 800a80e:	f47f af0a 	bne.w	800a626 <_dtoa_r+0x8fe>
 800a812:	4615      	mov	r5, r2
 800a814:	e7f6      	b.n	800a804 <_dtoa_r+0xadc>
 800a816:	4593      	cmp	fp, r2
 800a818:	d105      	bne.n	800a826 <_dtoa_r+0xafe>
 800a81a:	2331      	movs	r3, #49	; 0x31
 800a81c:	f10a 0a01 	add.w	sl, sl, #1
 800a820:	f88b 3000 	strb.w	r3, [fp]
 800a824:	e6ff      	b.n	800a626 <_dtoa_r+0x8fe>
 800a826:	4615      	mov	r5, r2
 800a828:	e79f      	b.n	800a76a <_dtoa_r+0xa42>
 800a82a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800a890 <_dtoa_r+0xb68>
 800a82e:	e007      	b.n	800a840 <_dtoa_r+0xb18>
 800a830:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a832:	f8df b060 	ldr.w	fp, [pc, #96]	; 800a894 <_dtoa_r+0xb6c>
 800a836:	b11b      	cbz	r3, 800a840 <_dtoa_r+0xb18>
 800a838:	f10b 0308 	add.w	r3, fp, #8
 800a83c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a83e:	6013      	str	r3, [r2, #0]
 800a840:	4658      	mov	r0, fp
 800a842:	b017      	add	sp, #92	; 0x5c
 800a844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a848:	9b06      	ldr	r3, [sp, #24]
 800a84a:	2b01      	cmp	r3, #1
 800a84c:	f77f ae35 	ble.w	800a4ba <_dtoa_r+0x792>
 800a850:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a852:	9307      	str	r3, [sp, #28]
 800a854:	e649      	b.n	800a4ea <_dtoa_r+0x7c2>
 800a856:	9b02      	ldr	r3, [sp, #8]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	dc03      	bgt.n	800a864 <_dtoa_r+0xb3c>
 800a85c:	9b06      	ldr	r3, [sp, #24]
 800a85e:	2b02      	cmp	r3, #2
 800a860:	f73f aecc 	bgt.w	800a5fc <_dtoa_r+0x8d4>
 800a864:	465d      	mov	r5, fp
 800a866:	4639      	mov	r1, r7
 800a868:	9804      	ldr	r0, [sp, #16]
 800a86a:	f7ff f9cf 	bl	8009c0c <quorem>
 800a86e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a872:	f805 8b01 	strb.w	r8, [r5], #1
 800a876:	9a02      	ldr	r2, [sp, #8]
 800a878:	eba5 030b 	sub.w	r3, r5, fp
 800a87c:	429a      	cmp	r2, r3
 800a87e:	ddb0      	ble.n	800a7e2 <_dtoa_r+0xaba>
 800a880:	2300      	movs	r3, #0
 800a882:	220a      	movs	r2, #10
 800a884:	9904      	ldr	r1, [sp, #16]
 800a886:	4620      	mov	r0, r4
 800a888:	f000 f872 	bl	800a970 <__multadd>
 800a88c:	9004      	str	r0, [sp, #16]
 800a88e:	e7ea      	b.n	800a866 <_dtoa_r+0xb3e>
 800a890:	0800b5d0 	.word	0x0800b5d0
 800a894:	0800b5f4 	.word	0x0800b5f4

0800a898 <_localeconv_r>:
 800a898:	4b04      	ldr	r3, [pc, #16]	; (800a8ac <_localeconv_r+0x14>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	6a18      	ldr	r0, [r3, #32]
 800a89e:	4b04      	ldr	r3, [pc, #16]	; (800a8b0 <_localeconv_r+0x18>)
 800a8a0:	2800      	cmp	r0, #0
 800a8a2:	bf08      	it	eq
 800a8a4:	4618      	moveq	r0, r3
 800a8a6:	30f0      	adds	r0, #240	; 0xf0
 800a8a8:	4770      	bx	lr
 800a8aa:	bf00      	nop
 800a8ac:	20000024 	.word	0x20000024
 800a8b0:	20000088 	.word	0x20000088

0800a8b4 <malloc>:
 800a8b4:	4b02      	ldr	r3, [pc, #8]	; (800a8c0 <malloc+0xc>)
 800a8b6:	4601      	mov	r1, r0
 800a8b8:	6818      	ldr	r0, [r3, #0]
 800a8ba:	f000 bb45 	b.w	800af48 <_malloc_r>
 800a8be:	bf00      	nop
 800a8c0:	20000024 	.word	0x20000024

0800a8c4 <memcpy>:
 800a8c4:	b510      	push	{r4, lr}
 800a8c6:	1e43      	subs	r3, r0, #1
 800a8c8:	440a      	add	r2, r1
 800a8ca:	4291      	cmp	r1, r2
 800a8cc:	d100      	bne.n	800a8d0 <memcpy+0xc>
 800a8ce:	bd10      	pop	{r4, pc}
 800a8d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8d8:	e7f7      	b.n	800a8ca <memcpy+0x6>

0800a8da <_Balloc>:
 800a8da:	b570      	push	{r4, r5, r6, lr}
 800a8dc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a8de:	4604      	mov	r4, r0
 800a8e0:	460e      	mov	r6, r1
 800a8e2:	b93d      	cbnz	r5, 800a8f4 <_Balloc+0x1a>
 800a8e4:	2010      	movs	r0, #16
 800a8e6:	f7ff ffe5 	bl	800a8b4 <malloc>
 800a8ea:	6260      	str	r0, [r4, #36]	; 0x24
 800a8ec:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a8f0:	6005      	str	r5, [r0, #0]
 800a8f2:	60c5      	str	r5, [r0, #12]
 800a8f4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a8f6:	68eb      	ldr	r3, [r5, #12]
 800a8f8:	b183      	cbz	r3, 800a91c <_Balloc+0x42>
 800a8fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8fc:	68db      	ldr	r3, [r3, #12]
 800a8fe:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a902:	b9b8      	cbnz	r0, 800a934 <_Balloc+0x5a>
 800a904:	2101      	movs	r1, #1
 800a906:	fa01 f506 	lsl.w	r5, r1, r6
 800a90a:	1d6a      	adds	r2, r5, #5
 800a90c:	0092      	lsls	r2, r2, #2
 800a90e:	4620      	mov	r0, r4
 800a910:	f000 fabe 	bl	800ae90 <_calloc_r>
 800a914:	b160      	cbz	r0, 800a930 <_Balloc+0x56>
 800a916:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a91a:	e00e      	b.n	800a93a <_Balloc+0x60>
 800a91c:	2221      	movs	r2, #33	; 0x21
 800a91e:	2104      	movs	r1, #4
 800a920:	4620      	mov	r0, r4
 800a922:	f000 fab5 	bl	800ae90 <_calloc_r>
 800a926:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a928:	60e8      	str	r0, [r5, #12]
 800a92a:	68db      	ldr	r3, [r3, #12]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d1e4      	bne.n	800a8fa <_Balloc+0x20>
 800a930:	2000      	movs	r0, #0
 800a932:	bd70      	pop	{r4, r5, r6, pc}
 800a934:	6802      	ldr	r2, [r0, #0]
 800a936:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a93a:	2300      	movs	r3, #0
 800a93c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a940:	e7f7      	b.n	800a932 <_Balloc+0x58>

0800a942 <_Bfree>:
 800a942:	b570      	push	{r4, r5, r6, lr}
 800a944:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a946:	4606      	mov	r6, r0
 800a948:	460d      	mov	r5, r1
 800a94a:	b93c      	cbnz	r4, 800a95c <_Bfree+0x1a>
 800a94c:	2010      	movs	r0, #16
 800a94e:	f7ff ffb1 	bl	800a8b4 <malloc>
 800a952:	6270      	str	r0, [r6, #36]	; 0x24
 800a954:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a958:	6004      	str	r4, [r0, #0]
 800a95a:	60c4      	str	r4, [r0, #12]
 800a95c:	b13d      	cbz	r5, 800a96e <_Bfree+0x2c>
 800a95e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a960:	686a      	ldr	r2, [r5, #4]
 800a962:	68db      	ldr	r3, [r3, #12]
 800a964:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a968:	6029      	str	r1, [r5, #0]
 800a96a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a96e:	bd70      	pop	{r4, r5, r6, pc}

0800a970 <__multadd>:
 800a970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a974:	690d      	ldr	r5, [r1, #16]
 800a976:	461f      	mov	r7, r3
 800a978:	4606      	mov	r6, r0
 800a97a:	460c      	mov	r4, r1
 800a97c:	f101 0c14 	add.w	ip, r1, #20
 800a980:	2300      	movs	r3, #0
 800a982:	f8dc 0000 	ldr.w	r0, [ip]
 800a986:	b281      	uxth	r1, r0
 800a988:	fb02 7101 	mla	r1, r2, r1, r7
 800a98c:	0c0f      	lsrs	r7, r1, #16
 800a98e:	0c00      	lsrs	r0, r0, #16
 800a990:	fb02 7000 	mla	r0, r2, r0, r7
 800a994:	b289      	uxth	r1, r1
 800a996:	3301      	adds	r3, #1
 800a998:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a99c:	429d      	cmp	r5, r3
 800a99e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a9a2:	f84c 1b04 	str.w	r1, [ip], #4
 800a9a6:	dcec      	bgt.n	800a982 <__multadd+0x12>
 800a9a8:	b1d7      	cbz	r7, 800a9e0 <__multadd+0x70>
 800a9aa:	68a3      	ldr	r3, [r4, #8]
 800a9ac:	42ab      	cmp	r3, r5
 800a9ae:	dc12      	bgt.n	800a9d6 <__multadd+0x66>
 800a9b0:	6861      	ldr	r1, [r4, #4]
 800a9b2:	4630      	mov	r0, r6
 800a9b4:	3101      	adds	r1, #1
 800a9b6:	f7ff ff90 	bl	800a8da <_Balloc>
 800a9ba:	6922      	ldr	r2, [r4, #16]
 800a9bc:	3202      	adds	r2, #2
 800a9be:	f104 010c 	add.w	r1, r4, #12
 800a9c2:	4680      	mov	r8, r0
 800a9c4:	0092      	lsls	r2, r2, #2
 800a9c6:	300c      	adds	r0, #12
 800a9c8:	f7ff ff7c 	bl	800a8c4 <memcpy>
 800a9cc:	4621      	mov	r1, r4
 800a9ce:	4630      	mov	r0, r6
 800a9d0:	f7ff ffb7 	bl	800a942 <_Bfree>
 800a9d4:	4644      	mov	r4, r8
 800a9d6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a9da:	3501      	adds	r5, #1
 800a9dc:	615f      	str	r7, [r3, #20]
 800a9de:	6125      	str	r5, [r4, #16]
 800a9e0:	4620      	mov	r0, r4
 800a9e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a9e6 <__hi0bits>:
 800a9e6:	0c02      	lsrs	r2, r0, #16
 800a9e8:	0412      	lsls	r2, r2, #16
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	b9b2      	cbnz	r2, 800aa1c <__hi0bits+0x36>
 800a9ee:	0403      	lsls	r3, r0, #16
 800a9f0:	2010      	movs	r0, #16
 800a9f2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a9f6:	bf04      	itt	eq
 800a9f8:	021b      	lsleq	r3, r3, #8
 800a9fa:	3008      	addeq	r0, #8
 800a9fc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800aa00:	bf04      	itt	eq
 800aa02:	011b      	lsleq	r3, r3, #4
 800aa04:	3004      	addeq	r0, #4
 800aa06:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800aa0a:	bf04      	itt	eq
 800aa0c:	009b      	lsleq	r3, r3, #2
 800aa0e:	3002      	addeq	r0, #2
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	db06      	blt.n	800aa22 <__hi0bits+0x3c>
 800aa14:	005b      	lsls	r3, r3, #1
 800aa16:	d503      	bpl.n	800aa20 <__hi0bits+0x3a>
 800aa18:	3001      	adds	r0, #1
 800aa1a:	4770      	bx	lr
 800aa1c:	2000      	movs	r0, #0
 800aa1e:	e7e8      	b.n	800a9f2 <__hi0bits+0xc>
 800aa20:	2020      	movs	r0, #32
 800aa22:	4770      	bx	lr

0800aa24 <__lo0bits>:
 800aa24:	6803      	ldr	r3, [r0, #0]
 800aa26:	f013 0207 	ands.w	r2, r3, #7
 800aa2a:	4601      	mov	r1, r0
 800aa2c:	d00b      	beq.n	800aa46 <__lo0bits+0x22>
 800aa2e:	07da      	lsls	r2, r3, #31
 800aa30:	d423      	bmi.n	800aa7a <__lo0bits+0x56>
 800aa32:	0798      	lsls	r0, r3, #30
 800aa34:	bf49      	itett	mi
 800aa36:	085b      	lsrmi	r3, r3, #1
 800aa38:	089b      	lsrpl	r3, r3, #2
 800aa3a:	2001      	movmi	r0, #1
 800aa3c:	600b      	strmi	r3, [r1, #0]
 800aa3e:	bf5c      	itt	pl
 800aa40:	600b      	strpl	r3, [r1, #0]
 800aa42:	2002      	movpl	r0, #2
 800aa44:	4770      	bx	lr
 800aa46:	b298      	uxth	r0, r3
 800aa48:	b9a8      	cbnz	r0, 800aa76 <__lo0bits+0x52>
 800aa4a:	0c1b      	lsrs	r3, r3, #16
 800aa4c:	2010      	movs	r0, #16
 800aa4e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800aa52:	bf04      	itt	eq
 800aa54:	0a1b      	lsreq	r3, r3, #8
 800aa56:	3008      	addeq	r0, #8
 800aa58:	071a      	lsls	r2, r3, #28
 800aa5a:	bf04      	itt	eq
 800aa5c:	091b      	lsreq	r3, r3, #4
 800aa5e:	3004      	addeq	r0, #4
 800aa60:	079a      	lsls	r2, r3, #30
 800aa62:	bf04      	itt	eq
 800aa64:	089b      	lsreq	r3, r3, #2
 800aa66:	3002      	addeq	r0, #2
 800aa68:	07da      	lsls	r2, r3, #31
 800aa6a:	d402      	bmi.n	800aa72 <__lo0bits+0x4e>
 800aa6c:	085b      	lsrs	r3, r3, #1
 800aa6e:	d006      	beq.n	800aa7e <__lo0bits+0x5a>
 800aa70:	3001      	adds	r0, #1
 800aa72:	600b      	str	r3, [r1, #0]
 800aa74:	4770      	bx	lr
 800aa76:	4610      	mov	r0, r2
 800aa78:	e7e9      	b.n	800aa4e <__lo0bits+0x2a>
 800aa7a:	2000      	movs	r0, #0
 800aa7c:	4770      	bx	lr
 800aa7e:	2020      	movs	r0, #32
 800aa80:	4770      	bx	lr

0800aa82 <__i2b>:
 800aa82:	b510      	push	{r4, lr}
 800aa84:	460c      	mov	r4, r1
 800aa86:	2101      	movs	r1, #1
 800aa88:	f7ff ff27 	bl	800a8da <_Balloc>
 800aa8c:	2201      	movs	r2, #1
 800aa8e:	6144      	str	r4, [r0, #20]
 800aa90:	6102      	str	r2, [r0, #16]
 800aa92:	bd10      	pop	{r4, pc}

0800aa94 <__multiply>:
 800aa94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa98:	4614      	mov	r4, r2
 800aa9a:	690a      	ldr	r2, [r1, #16]
 800aa9c:	6923      	ldr	r3, [r4, #16]
 800aa9e:	429a      	cmp	r2, r3
 800aaa0:	bfb8      	it	lt
 800aaa2:	460b      	movlt	r3, r1
 800aaa4:	4688      	mov	r8, r1
 800aaa6:	bfbc      	itt	lt
 800aaa8:	46a0      	movlt	r8, r4
 800aaaa:	461c      	movlt	r4, r3
 800aaac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800aab0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800aab4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aab8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800aabc:	eb07 0609 	add.w	r6, r7, r9
 800aac0:	42b3      	cmp	r3, r6
 800aac2:	bfb8      	it	lt
 800aac4:	3101      	addlt	r1, #1
 800aac6:	f7ff ff08 	bl	800a8da <_Balloc>
 800aaca:	f100 0514 	add.w	r5, r0, #20
 800aace:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800aad2:	462b      	mov	r3, r5
 800aad4:	2200      	movs	r2, #0
 800aad6:	4573      	cmp	r3, lr
 800aad8:	d316      	bcc.n	800ab08 <__multiply+0x74>
 800aada:	f104 0214 	add.w	r2, r4, #20
 800aade:	f108 0114 	add.w	r1, r8, #20
 800aae2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800aae6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800aaea:	9300      	str	r3, [sp, #0]
 800aaec:	9b00      	ldr	r3, [sp, #0]
 800aaee:	9201      	str	r2, [sp, #4]
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d80c      	bhi.n	800ab0e <__multiply+0x7a>
 800aaf4:	2e00      	cmp	r6, #0
 800aaf6:	dd03      	ble.n	800ab00 <__multiply+0x6c>
 800aaf8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d05d      	beq.n	800abbc <__multiply+0x128>
 800ab00:	6106      	str	r6, [r0, #16]
 800ab02:	b003      	add	sp, #12
 800ab04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab08:	f843 2b04 	str.w	r2, [r3], #4
 800ab0c:	e7e3      	b.n	800aad6 <__multiply+0x42>
 800ab0e:	f8b2 b000 	ldrh.w	fp, [r2]
 800ab12:	f1bb 0f00 	cmp.w	fp, #0
 800ab16:	d023      	beq.n	800ab60 <__multiply+0xcc>
 800ab18:	4689      	mov	r9, r1
 800ab1a:	46ac      	mov	ip, r5
 800ab1c:	f04f 0800 	mov.w	r8, #0
 800ab20:	f859 4b04 	ldr.w	r4, [r9], #4
 800ab24:	f8dc a000 	ldr.w	sl, [ip]
 800ab28:	b2a3      	uxth	r3, r4
 800ab2a:	fa1f fa8a 	uxth.w	sl, sl
 800ab2e:	fb0b a303 	mla	r3, fp, r3, sl
 800ab32:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ab36:	f8dc 4000 	ldr.w	r4, [ip]
 800ab3a:	4443      	add	r3, r8
 800ab3c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ab40:	fb0b 840a 	mla	r4, fp, sl, r8
 800ab44:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800ab48:	46e2      	mov	sl, ip
 800ab4a:	b29b      	uxth	r3, r3
 800ab4c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ab50:	454f      	cmp	r7, r9
 800ab52:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ab56:	f84a 3b04 	str.w	r3, [sl], #4
 800ab5a:	d82b      	bhi.n	800abb4 <__multiply+0x120>
 800ab5c:	f8cc 8004 	str.w	r8, [ip, #4]
 800ab60:	9b01      	ldr	r3, [sp, #4]
 800ab62:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800ab66:	3204      	adds	r2, #4
 800ab68:	f1ba 0f00 	cmp.w	sl, #0
 800ab6c:	d020      	beq.n	800abb0 <__multiply+0x11c>
 800ab6e:	682b      	ldr	r3, [r5, #0]
 800ab70:	4689      	mov	r9, r1
 800ab72:	46a8      	mov	r8, r5
 800ab74:	f04f 0b00 	mov.w	fp, #0
 800ab78:	f8b9 c000 	ldrh.w	ip, [r9]
 800ab7c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800ab80:	fb0a 440c 	mla	r4, sl, ip, r4
 800ab84:	445c      	add	r4, fp
 800ab86:	46c4      	mov	ip, r8
 800ab88:	b29b      	uxth	r3, r3
 800ab8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ab8e:	f84c 3b04 	str.w	r3, [ip], #4
 800ab92:	f859 3b04 	ldr.w	r3, [r9], #4
 800ab96:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800ab9a:	0c1b      	lsrs	r3, r3, #16
 800ab9c:	fb0a b303 	mla	r3, sl, r3, fp
 800aba0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800aba4:	454f      	cmp	r7, r9
 800aba6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800abaa:	d805      	bhi.n	800abb8 <__multiply+0x124>
 800abac:	f8c8 3004 	str.w	r3, [r8, #4]
 800abb0:	3504      	adds	r5, #4
 800abb2:	e79b      	b.n	800aaec <__multiply+0x58>
 800abb4:	46d4      	mov	ip, sl
 800abb6:	e7b3      	b.n	800ab20 <__multiply+0x8c>
 800abb8:	46e0      	mov	r8, ip
 800abba:	e7dd      	b.n	800ab78 <__multiply+0xe4>
 800abbc:	3e01      	subs	r6, #1
 800abbe:	e799      	b.n	800aaf4 <__multiply+0x60>

0800abc0 <__pow5mult>:
 800abc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abc4:	4615      	mov	r5, r2
 800abc6:	f012 0203 	ands.w	r2, r2, #3
 800abca:	4606      	mov	r6, r0
 800abcc:	460f      	mov	r7, r1
 800abce:	d007      	beq.n	800abe0 <__pow5mult+0x20>
 800abd0:	3a01      	subs	r2, #1
 800abd2:	4c21      	ldr	r4, [pc, #132]	; (800ac58 <__pow5mult+0x98>)
 800abd4:	2300      	movs	r3, #0
 800abd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800abda:	f7ff fec9 	bl	800a970 <__multadd>
 800abde:	4607      	mov	r7, r0
 800abe0:	10ad      	asrs	r5, r5, #2
 800abe2:	d035      	beq.n	800ac50 <__pow5mult+0x90>
 800abe4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800abe6:	b93c      	cbnz	r4, 800abf8 <__pow5mult+0x38>
 800abe8:	2010      	movs	r0, #16
 800abea:	f7ff fe63 	bl	800a8b4 <malloc>
 800abee:	6270      	str	r0, [r6, #36]	; 0x24
 800abf0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800abf4:	6004      	str	r4, [r0, #0]
 800abf6:	60c4      	str	r4, [r0, #12]
 800abf8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800abfc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ac00:	b94c      	cbnz	r4, 800ac16 <__pow5mult+0x56>
 800ac02:	f240 2171 	movw	r1, #625	; 0x271
 800ac06:	4630      	mov	r0, r6
 800ac08:	f7ff ff3b 	bl	800aa82 <__i2b>
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ac12:	4604      	mov	r4, r0
 800ac14:	6003      	str	r3, [r0, #0]
 800ac16:	f04f 0800 	mov.w	r8, #0
 800ac1a:	07eb      	lsls	r3, r5, #31
 800ac1c:	d50a      	bpl.n	800ac34 <__pow5mult+0x74>
 800ac1e:	4639      	mov	r1, r7
 800ac20:	4622      	mov	r2, r4
 800ac22:	4630      	mov	r0, r6
 800ac24:	f7ff ff36 	bl	800aa94 <__multiply>
 800ac28:	4639      	mov	r1, r7
 800ac2a:	4681      	mov	r9, r0
 800ac2c:	4630      	mov	r0, r6
 800ac2e:	f7ff fe88 	bl	800a942 <_Bfree>
 800ac32:	464f      	mov	r7, r9
 800ac34:	106d      	asrs	r5, r5, #1
 800ac36:	d00b      	beq.n	800ac50 <__pow5mult+0x90>
 800ac38:	6820      	ldr	r0, [r4, #0]
 800ac3a:	b938      	cbnz	r0, 800ac4c <__pow5mult+0x8c>
 800ac3c:	4622      	mov	r2, r4
 800ac3e:	4621      	mov	r1, r4
 800ac40:	4630      	mov	r0, r6
 800ac42:	f7ff ff27 	bl	800aa94 <__multiply>
 800ac46:	6020      	str	r0, [r4, #0]
 800ac48:	f8c0 8000 	str.w	r8, [r0]
 800ac4c:	4604      	mov	r4, r0
 800ac4e:	e7e4      	b.n	800ac1a <__pow5mult+0x5a>
 800ac50:	4638      	mov	r0, r7
 800ac52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac56:	bf00      	nop
 800ac58:	0800b6f8 	.word	0x0800b6f8

0800ac5c <__lshift>:
 800ac5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac60:	460c      	mov	r4, r1
 800ac62:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ac66:	6923      	ldr	r3, [r4, #16]
 800ac68:	6849      	ldr	r1, [r1, #4]
 800ac6a:	eb0a 0903 	add.w	r9, sl, r3
 800ac6e:	68a3      	ldr	r3, [r4, #8]
 800ac70:	4607      	mov	r7, r0
 800ac72:	4616      	mov	r6, r2
 800ac74:	f109 0501 	add.w	r5, r9, #1
 800ac78:	42ab      	cmp	r3, r5
 800ac7a:	db32      	blt.n	800ace2 <__lshift+0x86>
 800ac7c:	4638      	mov	r0, r7
 800ac7e:	f7ff fe2c 	bl	800a8da <_Balloc>
 800ac82:	2300      	movs	r3, #0
 800ac84:	4680      	mov	r8, r0
 800ac86:	f100 0114 	add.w	r1, r0, #20
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	4553      	cmp	r3, sl
 800ac8e:	db2b      	blt.n	800ace8 <__lshift+0x8c>
 800ac90:	6920      	ldr	r0, [r4, #16]
 800ac92:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ac96:	f104 0314 	add.w	r3, r4, #20
 800ac9a:	f016 021f 	ands.w	r2, r6, #31
 800ac9e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aca2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aca6:	d025      	beq.n	800acf4 <__lshift+0x98>
 800aca8:	f1c2 0e20 	rsb	lr, r2, #32
 800acac:	2000      	movs	r0, #0
 800acae:	681e      	ldr	r6, [r3, #0]
 800acb0:	468a      	mov	sl, r1
 800acb2:	4096      	lsls	r6, r2
 800acb4:	4330      	orrs	r0, r6
 800acb6:	f84a 0b04 	str.w	r0, [sl], #4
 800acba:	f853 0b04 	ldr.w	r0, [r3], #4
 800acbe:	459c      	cmp	ip, r3
 800acc0:	fa20 f00e 	lsr.w	r0, r0, lr
 800acc4:	d814      	bhi.n	800acf0 <__lshift+0x94>
 800acc6:	6048      	str	r0, [r1, #4]
 800acc8:	b108      	cbz	r0, 800acce <__lshift+0x72>
 800acca:	f109 0502 	add.w	r5, r9, #2
 800acce:	3d01      	subs	r5, #1
 800acd0:	4638      	mov	r0, r7
 800acd2:	f8c8 5010 	str.w	r5, [r8, #16]
 800acd6:	4621      	mov	r1, r4
 800acd8:	f7ff fe33 	bl	800a942 <_Bfree>
 800acdc:	4640      	mov	r0, r8
 800acde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ace2:	3101      	adds	r1, #1
 800ace4:	005b      	lsls	r3, r3, #1
 800ace6:	e7c7      	b.n	800ac78 <__lshift+0x1c>
 800ace8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800acec:	3301      	adds	r3, #1
 800acee:	e7cd      	b.n	800ac8c <__lshift+0x30>
 800acf0:	4651      	mov	r1, sl
 800acf2:	e7dc      	b.n	800acae <__lshift+0x52>
 800acf4:	3904      	subs	r1, #4
 800acf6:	f853 2b04 	ldr.w	r2, [r3], #4
 800acfa:	f841 2f04 	str.w	r2, [r1, #4]!
 800acfe:	459c      	cmp	ip, r3
 800ad00:	d8f9      	bhi.n	800acf6 <__lshift+0x9a>
 800ad02:	e7e4      	b.n	800acce <__lshift+0x72>

0800ad04 <__mcmp>:
 800ad04:	6903      	ldr	r3, [r0, #16]
 800ad06:	690a      	ldr	r2, [r1, #16]
 800ad08:	1a9b      	subs	r3, r3, r2
 800ad0a:	b530      	push	{r4, r5, lr}
 800ad0c:	d10c      	bne.n	800ad28 <__mcmp+0x24>
 800ad0e:	0092      	lsls	r2, r2, #2
 800ad10:	3014      	adds	r0, #20
 800ad12:	3114      	adds	r1, #20
 800ad14:	1884      	adds	r4, r0, r2
 800ad16:	4411      	add	r1, r2
 800ad18:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ad1c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ad20:	4295      	cmp	r5, r2
 800ad22:	d003      	beq.n	800ad2c <__mcmp+0x28>
 800ad24:	d305      	bcc.n	800ad32 <__mcmp+0x2e>
 800ad26:	2301      	movs	r3, #1
 800ad28:	4618      	mov	r0, r3
 800ad2a:	bd30      	pop	{r4, r5, pc}
 800ad2c:	42a0      	cmp	r0, r4
 800ad2e:	d3f3      	bcc.n	800ad18 <__mcmp+0x14>
 800ad30:	e7fa      	b.n	800ad28 <__mcmp+0x24>
 800ad32:	f04f 33ff 	mov.w	r3, #4294967295
 800ad36:	e7f7      	b.n	800ad28 <__mcmp+0x24>

0800ad38 <__mdiff>:
 800ad38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad3c:	460d      	mov	r5, r1
 800ad3e:	4607      	mov	r7, r0
 800ad40:	4611      	mov	r1, r2
 800ad42:	4628      	mov	r0, r5
 800ad44:	4614      	mov	r4, r2
 800ad46:	f7ff ffdd 	bl	800ad04 <__mcmp>
 800ad4a:	1e06      	subs	r6, r0, #0
 800ad4c:	d108      	bne.n	800ad60 <__mdiff+0x28>
 800ad4e:	4631      	mov	r1, r6
 800ad50:	4638      	mov	r0, r7
 800ad52:	f7ff fdc2 	bl	800a8da <_Balloc>
 800ad56:	2301      	movs	r3, #1
 800ad58:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ad5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad60:	bfa4      	itt	ge
 800ad62:	4623      	movge	r3, r4
 800ad64:	462c      	movge	r4, r5
 800ad66:	4638      	mov	r0, r7
 800ad68:	6861      	ldr	r1, [r4, #4]
 800ad6a:	bfa6      	itte	ge
 800ad6c:	461d      	movge	r5, r3
 800ad6e:	2600      	movge	r6, #0
 800ad70:	2601      	movlt	r6, #1
 800ad72:	f7ff fdb2 	bl	800a8da <_Balloc>
 800ad76:	692b      	ldr	r3, [r5, #16]
 800ad78:	60c6      	str	r6, [r0, #12]
 800ad7a:	6926      	ldr	r6, [r4, #16]
 800ad7c:	f105 0914 	add.w	r9, r5, #20
 800ad80:	f104 0214 	add.w	r2, r4, #20
 800ad84:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800ad88:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800ad8c:	f100 0514 	add.w	r5, r0, #20
 800ad90:	f04f 0e00 	mov.w	lr, #0
 800ad94:	f852 ab04 	ldr.w	sl, [r2], #4
 800ad98:	f859 4b04 	ldr.w	r4, [r9], #4
 800ad9c:	fa1e f18a 	uxtah	r1, lr, sl
 800ada0:	b2a3      	uxth	r3, r4
 800ada2:	1ac9      	subs	r1, r1, r3
 800ada4:	0c23      	lsrs	r3, r4, #16
 800ada6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800adaa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800adae:	b289      	uxth	r1, r1
 800adb0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800adb4:	45c8      	cmp	r8, r9
 800adb6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800adba:	4694      	mov	ip, r2
 800adbc:	f845 3b04 	str.w	r3, [r5], #4
 800adc0:	d8e8      	bhi.n	800ad94 <__mdiff+0x5c>
 800adc2:	45bc      	cmp	ip, r7
 800adc4:	d304      	bcc.n	800add0 <__mdiff+0x98>
 800adc6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800adca:	b183      	cbz	r3, 800adee <__mdiff+0xb6>
 800adcc:	6106      	str	r6, [r0, #16]
 800adce:	e7c5      	b.n	800ad5c <__mdiff+0x24>
 800add0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800add4:	fa1e f381 	uxtah	r3, lr, r1
 800add8:	141a      	asrs	r2, r3, #16
 800adda:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800adde:	b29b      	uxth	r3, r3
 800ade0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ade4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800ade8:	f845 3b04 	str.w	r3, [r5], #4
 800adec:	e7e9      	b.n	800adc2 <__mdiff+0x8a>
 800adee:	3e01      	subs	r6, #1
 800adf0:	e7e9      	b.n	800adc6 <__mdiff+0x8e>

0800adf2 <__d2b>:
 800adf2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800adf6:	460e      	mov	r6, r1
 800adf8:	2101      	movs	r1, #1
 800adfa:	ec59 8b10 	vmov	r8, r9, d0
 800adfe:	4615      	mov	r5, r2
 800ae00:	f7ff fd6b 	bl	800a8da <_Balloc>
 800ae04:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ae08:	4607      	mov	r7, r0
 800ae0a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ae0e:	bb34      	cbnz	r4, 800ae5e <__d2b+0x6c>
 800ae10:	9301      	str	r3, [sp, #4]
 800ae12:	f1b8 0300 	subs.w	r3, r8, #0
 800ae16:	d027      	beq.n	800ae68 <__d2b+0x76>
 800ae18:	a802      	add	r0, sp, #8
 800ae1a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800ae1e:	f7ff fe01 	bl	800aa24 <__lo0bits>
 800ae22:	9900      	ldr	r1, [sp, #0]
 800ae24:	b1f0      	cbz	r0, 800ae64 <__d2b+0x72>
 800ae26:	9a01      	ldr	r2, [sp, #4]
 800ae28:	f1c0 0320 	rsb	r3, r0, #32
 800ae2c:	fa02 f303 	lsl.w	r3, r2, r3
 800ae30:	430b      	orrs	r3, r1
 800ae32:	40c2      	lsrs	r2, r0
 800ae34:	617b      	str	r3, [r7, #20]
 800ae36:	9201      	str	r2, [sp, #4]
 800ae38:	9b01      	ldr	r3, [sp, #4]
 800ae3a:	61bb      	str	r3, [r7, #24]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	bf14      	ite	ne
 800ae40:	2102      	movne	r1, #2
 800ae42:	2101      	moveq	r1, #1
 800ae44:	6139      	str	r1, [r7, #16]
 800ae46:	b1c4      	cbz	r4, 800ae7a <__d2b+0x88>
 800ae48:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ae4c:	4404      	add	r4, r0
 800ae4e:	6034      	str	r4, [r6, #0]
 800ae50:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ae54:	6028      	str	r0, [r5, #0]
 800ae56:	4638      	mov	r0, r7
 800ae58:	b003      	add	sp, #12
 800ae5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ae62:	e7d5      	b.n	800ae10 <__d2b+0x1e>
 800ae64:	6179      	str	r1, [r7, #20]
 800ae66:	e7e7      	b.n	800ae38 <__d2b+0x46>
 800ae68:	a801      	add	r0, sp, #4
 800ae6a:	f7ff fddb 	bl	800aa24 <__lo0bits>
 800ae6e:	9b01      	ldr	r3, [sp, #4]
 800ae70:	617b      	str	r3, [r7, #20]
 800ae72:	2101      	movs	r1, #1
 800ae74:	6139      	str	r1, [r7, #16]
 800ae76:	3020      	adds	r0, #32
 800ae78:	e7e5      	b.n	800ae46 <__d2b+0x54>
 800ae7a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800ae7e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ae82:	6030      	str	r0, [r6, #0]
 800ae84:	6918      	ldr	r0, [r3, #16]
 800ae86:	f7ff fdae 	bl	800a9e6 <__hi0bits>
 800ae8a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ae8e:	e7e1      	b.n	800ae54 <__d2b+0x62>

0800ae90 <_calloc_r>:
 800ae90:	b538      	push	{r3, r4, r5, lr}
 800ae92:	fb02 f401 	mul.w	r4, r2, r1
 800ae96:	4621      	mov	r1, r4
 800ae98:	f000 f856 	bl	800af48 <_malloc_r>
 800ae9c:	4605      	mov	r5, r0
 800ae9e:	b118      	cbz	r0, 800aea8 <_calloc_r+0x18>
 800aea0:	4622      	mov	r2, r4
 800aea2:	2100      	movs	r1, #0
 800aea4:	f7fe f9f4 	bl	8009290 <memset>
 800aea8:	4628      	mov	r0, r5
 800aeaa:	bd38      	pop	{r3, r4, r5, pc}

0800aeac <_free_r>:
 800aeac:	b538      	push	{r3, r4, r5, lr}
 800aeae:	4605      	mov	r5, r0
 800aeb0:	2900      	cmp	r1, #0
 800aeb2:	d045      	beq.n	800af40 <_free_r+0x94>
 800aeb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aeb8:	1f0c      	subs	r4, r1, #4
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	bfb8      	it	lt
 800aebe:	18e4      	addlt	r4, r4, r3
 800aec0:	f000 fa29 	bl	800b316 <__malloc_lock>
 800aec4:	4a1f      	ldr	r2, [pc, #124]	; (800af44 <_free_r+0x98>)
 800aec6:	6813      	ldr	r3, [r2, #0]
 800aec8:	4610      	mov	r0, r2
 800aeca:	b933      	cbnz	r3, 800aeda <_free_r+0x2e>
 800aecc:	6063      	str	r3, [r4, #4]
 800aece:	6014      	str	r4, [r2, #0]
 800aed0:	4628      	mov	r0, r5
 800aed2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aed6:	f000 ba1f 	b.w	800b318 <__malloc_unlock>
 800aeda:	42a3      	cmp	r3, r4
 800aedc:	d90c      	bls.n	800aef8 <_free_r+0x4c>
 800aede:	6821      	ldr	r1, [r4, #0]
 800aee0:	1862      	adds	r2, r4, r1
 800aee2:	4293      	cmp	r3, r2
 800aee4:	bf04      	itt	eq
 800aee6:	681a      	ldreq	r2, [r3, #0]
 800aee8:	685b      	ldreq	r3, [r3, #4]
 800aeea:	6063      	str	r3, [r4, #4]
 800aeec:	bf04      	itt	eq
 800aeee:	1852      	addeq	r2, r2, r1
 800aef0:	6022      	streq	r2, [r4, #0]
 800aef2:	6004      	str	r4, [r0, #0]
 800aef4:	e7ec      	b.n	800aed0 <_free_r+0x24>
 800aef6:	4613      	mov	r3, r2
 800aef8:	685a      	ldr	r2, [r3, #4]
 800aefa:	b10a      	cbz	r2, 800af00 <_free_r+0x54>
 800aefc:	42a2      	cmp	r2, r4
 800aefe:	d9fa      	bls.n	800aef6 <_free_r+0x4a>
 800af00:	6819      	ldr	r1, [r3, #0]
 800af02:	1858      	adds	r0, r3, r1
 800af04:	42a0      	cmp	r0, r4
 800af06:	d10b      	bne.n	800af20 <_free_r+0x74>
 800af08:	6820      	ldr	r0, [r4, #0]
 800af0a:	4401      	add	r1, r0
 800af0c:	1858      	adds	r0, r3, r1
 800af0e:	4282      	cmp	r2, r0
 800af10:	6019      	str	r1, [r3, #0]
 800af12:	d1dd      	bne.n	800aed0 <_free_r+0x24>
 800af14:	6810      	ldr	r0, [r2, #0]
 800af16:	6852      	ldr	r2, [r2, #4]
 800af18:	605a      	str	r2, [r3, #4]
 800af1a:	4401      	add	r1, r0
 800af1c:	6019      	str	r1, [r3, #0]
 800af1e:	e7d7      	b.n	800aed0 <_free_r+0x24>
 800af20:	d902      	bls.n	800af28 <_free_r+0x7c>
 800af22:	230c      	movs	r3, #12
 800af24:	602b      	str	r3, [r5, #0]
 800af26:	e7d3      	b.n	800aed0 <_free_r+0x24>
 800af28:	6820      	ldr	r0, [r4, #0]
 800af2a:	1821      	adds	r1, r4, r0
 800af2c:	428a      	cmp	r2, r1
 800af2e:	bf04      	itt	eq
 800af30:	6811      	ldreq	r1, [r2, #0]
 800af32:	6852      	ldreq	r2, [r2, #4]
 800af34:	6062      	str	r2, [r4, #4]
 800af36:	bf04      	itt	eq
 800af38:	1809      	addeq	r1, r1, r0
 800af3a:	6021      	streq	r1, [r4, #0]
 800af3c:	605c      	str	r4, [r3, #4]
 800af3e:	e7c7      	b.n	800aed0 <_free_r+0x24>
 800af40:	bd38      	pop	{r3, r4, r5, pc}
 800af42:	bf00      	nop
 800af44:	200007b4 	.word	0x200007b4

0800af48 <_malloc_r>:
 800af48:	b570      	push	{r4, r5, r6, lr}
 800af4a:	1ccd      	adds	r5, r1, #3
 800af4c:	f025 0503 	bic.w	r5, r5, #3
 800af50:	3508      	adds	r5, #8
 800af52:	2d0c      	cmp	r5, #12
 800af54:	bf38      	it	cc
 800af56:	250c      	movcc	r5, #12
 800af58:	2d00      	cmp	r5, #0
 800af5a:	4606      	mov	r6, r0
 800af5c:	db01      	blt.n	800af62 <_malloc_r+0x1a>
 800af5e:	42a9      	cmp	r1, r5
 800af60:	d903      	bls.n	800af6a <_malloc_r+0x22>
 800af62:	230c      	movs	r3, #12
 800af64:	6033      	str	r3, [r6, #0]
 800af66:	2000      	movs	r0, #0
 800af68:	bd70      	pop	{r4, r5, r6, pc}
 800af6a:	f000 f9d4 	bl	800b316 <__malloc_lock>
 800af6e:	4a21      	ldr	r2, [pc, #132]	; (800aff4 <_malloc_r+0xac>)
 800af70:	6814      	ldr	r4, [r2, #0]
 800af72:	4621      	mov	r1, r4
 800af74:	b991      	cbnz	r1, 800af9c <_malloc_r+0x54>
 800af76:	4c20      	ldr	r4, [pc, #128]	; (800aff8 <_malloc_r+0xb0>)
 800af78:	6823      	ldr	r3, [r4, #0]
 800af7a:	b91b      	cbnz	r3, 800af84 <_malloc_r+0x3c>
 800af7c:	4630      	mov	r0, r6
 800af7e:	f000 f98f 	bl	800b2a0 <_sbrk_r>
 800af82:	6020      	str	r0, [r4, #0]
 800af84:	4629      	mov	r1, r5
 800af86:	4630      	mov	r0, r6
 800af88:	f000 f98a 	bl	800b2a0 <_sbrk_r>
 800af8c:	1c43      	adds	r3, r0, #1
 800af8e:	d124      	bne.n	800afda <_malloc_r+0x92>
 800af90:	230c      	movs	r3, #12
 800af92:	6033      	str	r3, [r6, #0]
 800af94:	4630      	mov	r0, r6
 800af96:	f000 f9bf 	bl	800b318 <__malloc_unlock>
 800af9a:	e7e4      	b.n	800af66 <_malloc_r+0x1e>
 800af9c:	680b      	ldr	r3, [r1, #0]
 800af9e:	1b5b      	subs	r3, r3, r5
 800afa0:	d418      	bmi.n	800afd4 <_malloc_r+0x8c>
 800afa2:	2b0b      	cmp	r3, #11
 800afa4:	d90f      	bls.n	800afc6 <_malloc_r+0x7e>
 800afa6:	600b      	str	r3, [r1, #0]
 800afa8:	50cd      	str	r5, [r1, r3]
 800afaa:	18cc      	adds	r4, r1, r3
 800afac:	4630      	mov	r0, r6
 800afae:	f000 f9b3 	bl	800b318 <__malloc_unlock>
 800afb2:	f104 000b 	add.w	r0, r4, #11
 800afb6:	1d23      	adds	r3, r4, #4
 800afb8:	f020 0007 	bic.w	r0, r0, #7
 800afbc:	1ac3      	subs	r3, r0, r3
 800afbe:	d0d3      	beq.n	800af68 <_malloc_r+0x20>
 800afc0:	425a      	negs	r2, r3
 800afc2:	50e2      	str	r2, [r4, r3]
 800afc4:	e7d0      	b.n	800af68 <_malloc_r+0x20>
 800afc6:	428c      	cmp	r4, r1
 800afc8:	684b      	ldr	r3, [r1, #4]
 800afca:	bf16      	itet	ne
 800afcc:	6063      	strne	r3, [r4, #4]
 800afce:	6013      	streq	r3, [r2, #0]
 800afd0:	460c      	movne	r4, r1
 800afd2:	e7eb      	b.n	800afac <_malloc_r+0x64>
 800afd4:	460c      	mov	r4, r1
 800afd6:	6849      	ldr	r1, [r1, #4]
 800afd8:	e7cc      	b.n	800af74 <_malloc_r+0x2c>
 800afda:	1cc4      	adds	r4, r0, #3
 800afdc:	f024 0403 	bic.w	r4, r4, #3
 800afe0:	42a0      	cmp	r0, r4
 800afe2:	d005      	beq.n	800aff0 <_malloc_r+0xa8>
 800afe4:	1a21      	subs	r1, r4, r0
 800afe6:	4630      	mov	r0, r6
 800afe8:	f000 f95a 	bl	800b2a0 <_sbrk_r>
 800afec:	3001      	adds	r0, #1
 800afee:	d0cf      	beq.n	800af90 <_malloc_r+0x48>
 800aff0:	6025      	str	r5, [r4, #0]
 800aff2:	e7db      	b.n	800afac <_malloc_r+0x64>
 800aff4:	200007b4 	.word	0x200007b4
 800aff8:	200007b8 	.word	0x200007b8

0800affc <__ssputs_r>:
 800affc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b000:	688e      	ldr	r6, [r1, #8]
 800b002:	429e      	cmp	r6, r3
 800b004:	4682      	mov	sl, r0
 800b006:	460c      	mov	r4, r1
 800b008:	4690      	mov	r8, r2
 800b00a:	4699      	mov	r9, r3
 800b00c:	d837      	bhi.n	800b07e <__ssputs_r+0x82>
 800b00e:	898a      	ldrh	r2, [r1, #12]
 800b010:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b014:	d031      	beq.n	800b07a <__ssputs_r+0x7e>
 800b016:	6825      	ldr	r5, [r4, #0]
 800b018:	6909      	ldr	r1, [r1, #16]
 800b01a:	1a6f      	subs	r7, r5, r1
 800b01c:	6965      	ldr	r5, [r4, #20]
 800b01e:	2302      	movs	r3, #2
 800b020:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b024:	fb95 f5f3 	sdiv	r5, r5, r3
 800b028:	f109 0301 	add.w	r3, r9, #1
 800b02c:	443b      	add	r3, r7
 800b02e:	429d      	cmp	r5, r3
 800b030:	bf38      	it	cc
 800b032:	461d      	movcc	r5, r3
 800b034:	0553      	lsls	r3, r2, #21
 800b036:	d530      	bpl.n	800b09a <__ssputs_r+0x9e>
 800b038:	4629      	mov	r1, r5
 800b03a:	f7ff ff85 	bl	800af48 <_malloc_r>
 800b03e:	4606      	mov	r6, r0
 800b040:	b950      	cbnz	r0, 800b058 <__ssputs_r+0x5c>
 800b042:	230c      	movs	r3, #12
 800b044:	f8ca 3000 	str.w	r3, [sl]
 800b048:	89a3      	ldrh	r3, [r4, #12]
 800b04a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b04e:	81a3      	strh	r3, [r4, #12]
 800b050:	f04f 30ff 	mov.w	r0, #4294967295
 800b054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b058:	463a      	mov	r2, r7
 800b05a:	6921      	ldr	r1, [r4, #16]
 800b05c:	f7ff fc32 	bl	800a8c4 <memcpy>
 800b060:	89a3      	ldrh	r3, [r4, #12]
 800b062:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b06a:	81a3      	strh	r3, [r4, #12]
 800b06c:	6126      	str	r6, [r4, #16]
 800b06e:	6165      	str	r5, [r4, #20]
 800b070:	443e      	add	r6, r7
 800b072:	1bed      	subs	r5, r5, r7
 800b074:	6026      	str	r6, [r4, #0]
 800b076:	60a5      	str	r5, [r4, #8]
 800b078:	464e      	mov	r6, r9
 800b07a:	454e      	cmp	r6, r9
 800b07c:	d900      	bls.n	800b080 <__ssputs_r+0x84>
 800b07e:	464e      	mov	r6, r9
 800b080:	4632      	mov	r2, r6
 800b082:	4641      	mov	r1, r8
 800b084:	6820      	ldr	r0, [r4, #0]
 800b086:	f000 f92d 	bl	800b2e4 <memmove>
 800b08a:	68a3      	ldr	r3, [r4, #8]
 800b08c:	1b9b      	subs	r3, r3, r6
 800b08e:	60a3      	str	r3, [r4, #8]
 800b090:	6823      	ldr	r3, [r4, #0]
 800b092:	441e      	add	r6, r3
 800b094:	6026      	str	r6, [r4, #0]
 800b096:	2000      	movs	r0, #0
 800b098:	e7dc      	b.n	800b054 <__ssputs_r+0x58>
 800b09a:	462a      	mov	r2, r5
 800b09c:	f000 f93d 	bl	800b31a <_realloc_r>
 800b0a0:	4606      	mov	r6, r0
 800b0a2:	2800      	cmp	r0, #0
 800b0a4:	d1e2      	bne.n	800b06c <__ssputs_r+0x70>
 800b0a6:	6921      	ldr	r1, [r4, #16]
 800b0a8:	4650      	mov	r0, sl
 800b0aa:	f7ff feff 	bl	800aeac <_free_r>
 800b0ae:	e7c8      	b.n	800b042 <__ssputs_r+0x46>

0800b0b0 <_svfiprintf_r>:
 800b0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0b4:	461d      	mov	r5, r3
 800b0b6:	898b      	ldrh	r3, [r1, #12]
 800b0b8:	061f      	lsls	r7, r3, #24
 800b0ba:	b09d      	sub	sp, #116	; 0x74
 800b0bc:	4680      	mov	r8, r0
 800b0be:	460c      	mov	r4, r1
 800b0c0:	4616      	mov	r6, r2
 800b0c2:	d50f      	bpl.n	800b0e4 <_svfiprintf_r+0x34>
 800b0c4:	690b      	ldr	r3, [r1, #16]
 800b0c6:	b96b      	cbnz	r3, 800b0e4 <_svfiprintf_r+0x34>
 800b0c8:	2140      	movs	r1, #64	; 0x40
 800b0ca:	f7ff ff3d 	bl	800af48 <_malloc_r>
 800b0ce:	6020      	str	r0, [r4, #0]
 800b0d0:	6120      	str	r0, [r4, #16]
 800b0d2:	b928      	cbnz	r0, 800b0e0 <_svfiprintf_r+0x30>
 800b0d4:	230c      	movs	r3, #12
 800b0d6:	f8c8 3000 	str.w	r3, [r8]
 800b0da:	f04f 30ff 	mov.w	r0, #4294967295
 800b0de:	e0c8      	b.n	800b272 <_svfiprintf_r+0x1c2>
 800b0e0:	2340      	movs	r3, #64	; 0x40
 800b0e2:	6163      	str	r3, [r4, #20]
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	9309      	str	r3, [sp, #36]	; 0x24
 800b0e8:	2320      	movs	r3, #32
 800b0ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b0ee:	2330      	movs	r3, #48	; 0x30
 800b0f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b0f4:	9503      	str	r5, [sp, #12]
 800b0f6:	f04f 0b01 	mov.w	fp, #1
 800b0fa:	4637      	mov	r7, r6
 800b0fc:	463d      	mov	r5, r7
 800b0fe:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b102:	b10b      	cbz	r3, 800b108 <_svfiprintf_r+0x58>
 800b104:	2b25      	cmp	r3, #37	; 0x25
 800b106:	d13e      	bne.n	800b186 <_svfiprintf_r+0xd6>
 800b108:	ebb7 0a06 	subs.w	sl, r7, r6
 800b10c:	d00b      	beq.n	800b126 <_svfiprintf_r+0x76>
 800b10e:	4653      	mov	r3, sl
 800b110:	4632      	mov	r2, r6
 800b112:	4621      	mov	r1, r4
 800b114:	4640      	mov	r0, r8
 800b116:	f7ff ff71 	bl	800affc <__ssputs_r>
 800b11a:	3001      	adds	r0, #1
 800b11c:	f000 80a4 	beq.w	800b268 <_svfiprintf_r+0x1b8>
 800b120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b122:	4453      	add	r3, sl
 800b124:	9309      	str	r3, [sp, #36]	; 0x24
 800b126:	783b      	ldrb	r3, [r7, #0]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	f000 809d 	beq.w	800b268 <_svfiprintf_r+0x1b8>
 800b12e:	2300      	movs	r3, #0
 800b130:	f04f 32ff 	mov.w	r2, #4294967295
 800b134:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b138:	9304      	str	r3, [sp, #16]
 800b13a:	9307      	str	r3, [sp, #28]
 800b13c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b140:	931a      	str	r3, [sp, #104]	; 0x68
 800b142:	462f      	mov	r7, r5
 800b144:	2205      	movs	r2, #5
 800b146:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b14a:	4850      	ldr	r0, [pc, #320]	; (800b28c <_svfiprintf_r+0x1dc>)
 800b14c:	f7f5 f868 	bl	8000220 <memchr>
 800b150:	9b04      	ldr	r3, [sp, #16]
 800b152:	b9d0      	cbnz	r0, 800b18a <_svfiprintf_r+0xda>
 800b154:	06d9      	lsls	r1, r3, #27
 800b156:	bf44      	itt	mi
 800b158:	2220      	movmi	r2, #32
 800b15a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b15e:	071a      	lsls	r2, r3, #28
 800b160:	bf44      	itt	mi
 800b162:	222b      	movmi	r2, #43	; 0x2b
 800b164:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b168:	782a      	ldrb	r2, [r5, #0]
 800b16a:	2a2a      	cmp	r2, #42	; 0x2a
 800b16c:	d015      	beq.n	800b19a <_svfiprintf_r+0xea>
 800b16e:	9a07      	ldr	r2, [sp, #28]
 800b170:	462f      	mov	r7, r5
 800b172:	2000      	movs	r0, #0
 800b174:	250a      	movs	r5, #10
 800b176:	4639      	mov	r1, r7
 800b178:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b17c:	3b30      	subs	r3, #48	; 0x30
 800b17e:	2b09      	cmp	r3, #9
 800b180:	d94d      	bls.n	800b21e <_svfiprintf_r+0x16e>
 800b182:	b1b8      	cbz	r0, 800b1b4 <_svfiprintf_r+0x104>
 800b184:	e00f      	b.n	800b1a6 <_svfiprintf_r+0xf6>
 800b186:	462f      	mov	r7, r5
 800b188:	e7b8      	b.n	800b0fc <_svfiprintf_r+0x4c>
 800b18a:	4a40      	ldr	r2, [pc, #256]	; (800b28c <_svfiprintf_r+0x1dc>)
 800b18c:	1a80      	subs	r0, r0, r2
 800b18e:	fa0b f000 	lsl.w	r0, fp, r0
 800b192:	4318      	orrs	r0, r3
 800b194:	9004      	str	r0, [sp, #16]
 800b196:	463d      	mov	r5, r7
 800b198:	e7d3      	b.n	800b142 <_svfiprintf_r+0x92>
 800b19a:	9a03      	ldr	r2, [sp, #12]
 800b19c:	1d11      	adds	r1, r2, #4
 800b19e:	6812      	ldr	r2, [r2, #0]
 800b1a0:	9103      	str	r1, [sp, #12]
 800b1a2:	2a00      	cmp	r2, #0
 800b1a4:	db01      	blt.n	800b1aa <_svfiprintf_r+0xfa>
 800b1a6:	9207      	str	r2, [sp, #28]
 800b1a8:	e004      	b.n	800b1b4 <_svfiprintf_r+0x104>
 800b1aa:	4252      	negs	r2, r2
 800b1ac:	f043 0302 	orr.w	r3, r3, #2
 800b1b0:	9207      	str	r2, [sp, #28]
 800b1b2:	9304      	str	r3, [sp, #16]
 800b1b4:	783b      	ldrb	r3, [r7, #0]
 800b1b6:	2b2e      	cmp	r3, #46	; 0x2e
 800b1b8:	d10c      	bne.n	800b1d4 <_svfiprintf_r+0x124>
 800b1ba:	787b      	ldrb	r3, [r7, #1]
 800b1bc:	2b2a      	cmp	r3, #42	; 0x2a
 800b1be:	d133      	bne.n	800b228 <_svfiprintf_r+0x178>
 800b1c0:	9b03      	ldr	r3, [sp, #12]
 800b1c2:	1d1a      	adds	r2, r3, #4
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	9203      	str	r2, [sp, #12]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	bfb8      	it	lt
 800b1cc:	f04f 33ff 	movlt.w	r3, #4294967295
 800b1d0:	3702      	adds	r7, #2
 800b1d2:	9305      	str	r3, [sp, #20]
 800b1d4:	4d2e      	ldr	r5, [pc, #184]	; (800b290 <_svfiprintf_r+0x1e0>)
 800b1d6:	7839      	ldrb	r1, [r7, #0]
 800b1d8:	2203      	movs	r2, #3
 800b1da:	4628      	mov	r0, r5
 800b1dc:	f7f5 f820 	bl	8000220 <memchr>
 800b1e0:	b138      	cbz	r0, 800b1f2 <_svfiprintf_r+0x142>
 800b1e2:	2340      	movs	r3, #64	; 0x40
 800b1e4:	1b40      	subs	r0, r0, r5
 800b1e6:	fa03 f000 	lsl.w	r0, r3, r0
 800b1ea:	9b04      	ldr	r3, [sp, #16]
 800b1ec:	4303      	orrs	r3, r0
 800b1ee:	3701      	adds	r7, #1
 800b1f0:	9304      	str	r3, [sp, #16]
 800b1f2:	7839      	ldrb	r1, [r7, #0]
 800b1f4:	4827      	ldr	r0, [pc, #156]	; (800b294 <_svfiprintf_r+0x1e4>)
 800b1f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b1fa:	2206      	movs	r2, #6
 800b1fc:	1c7e      	adds	r6, r7, #1
 800b1fe:	f7f5 f80f 	bl	8000220 <memchr>
 800b202:	2800      	cmp	r0, #0
 800b204:	d038      	beq.n	800b278 <_svfiprintf_r+0x1c8>
 800b206:	4b24      	ldr	r3, [pc, #144]	; (800b298 <_svfiprintf_r+0x1e8>)
 800b208:	bb13      	cbnz	r3, 800b250 <_svfiprintf_r+0x1a0>
 800b20a:	9b03      	ldr	r3, [sp, #12]
 800b20c:	3307      	adds	r3, #7
 800b20e:	f023 0307 	bic.w	r3, r3, #7
 800b212:	3308      	adds	r3, #8
 800b214:	9303      	str	r3, [sp, #12]
 800b216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b218:	444b      	add	r3, r9
 800b21a:	9309      	str	r3, [sp, #36]	; 0x24
 800b21c:	e76d      	b.n	800b0fa <_svfiprintf_r+0x4a>
 800b21e:	fb05 3202 	mla	r2, r5, r2, r3
 800b222:	2001      	movs	r0, #1
 800b224:	460f      	mov	r7, r1
 800b226:	e7a6      	b.n	800b176 <_svfiprintf_r+0xc6>
 800b228:	2300      	movs	r3, #0
 800b22a:	3701      	adds	r7, #1
 800b22c:	9305      	str	r3, [sp, #20]
 800b22e:	4619      	mov	r1, r3
 800b230:	250a      	movs	r5, #10
 800b232:	4638      	mov	r0, r7
 800b234:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b238:	3a30      	subs	r2, #48	; 0x30
 800b23a:	2a09      	cmp	r2, #9
 800b23c:	d903      	bls.n	800b246 <_svfiprintf_r+0x196>
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d0c8      	beq.n	800b1d4 <_svfiprintf_r+0x124>
 800b242:	9105      	str	r1, [sp, #20]
 800b244:	e7c6      	b.n	800b1d4 <_svfiprintf_r+0x124>
 800b246:	fb05 2101 	mla	r1, r5, r1, r2
 800b24a:	2301      	movs	r3, #1
 800b24c:	4607      	mov	r7, r0
 800b24e:	e7f0      	b.n	800b232 <_svfiprintf_r+0x182>
 800b250:	ab03      	add	r3, sp, #12
 800b252:	9300      	str	r3, [sp, #0]
 800b254:	4622      	mov	r2, r4
 800b256:	4b11      	ldr	r3, [pc, #68]	; (800b29c <_svfiprintf_r+0x1ec>)
 800b258:	a904      	add	r1, sp, #16
 800b25a:	4640      	mov	r0, r8
 800b25c:	f7fe f8b4 	bl	80093c8 <_printf_float>
 800b260:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b264:	4681      	mov	r9, r0
 800b266:	d1d6      	bne.n	800b216 <_svfiprintf_r+0x166>
 800b268:	89a3      	ldrh	r3, [r4, #12]
 800b26a:	065b      	lsls	r3, r3, #25
 800b26c:	f53f af35 	bmi.w	800b0da <_svfiprintf_r+0x2a>
 800b270:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b272:	b01d      	add	sp, #116	; 0x74
 800b274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b278:	ab03      	add	r3, sp, #12
 800b27a:	9300      	str	r3, [sp, #0]
 800b27c:	4622      	mov	r2, r4
 800b27e:	4b07      	ldr	r3, [pc, #28]	; (800b29c <_svfiprintf_r+0x1ec>)
 800b280:	a904      	add	r1, sp, #16
 800b282:	4640      	mov	r0, r8
 800b284:	f7fe fb56 	bl	8009934 <_printf_i>
 800b288:	e7ea      	b.n	800b260 <_svfiprintf_r+0x1b0>
 800b28a:	bf00      	nop
 800b28c:	0800b704 	.word	0x0800b704
 800b290:	0800b70a 	.word	0x0800b70a
 800b294:	0800b70e 	.word	0x0800b70e
 800b298:	080093c9 	.word	0x080093c9
 800b29c:	0800affd 	.word	0x0800affd

0800b2a0 <_sbrk_r>:
 800b2a0:	b538      	push	{r3, r4, r5, lr}
 800b2a2:	4c06      	ldr	r4, [pc, #24]	; (800b2bc <_sbrk_r+0x1c>)
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	4605      	mov	r5, r0
 800b2a8:	4608      	mov	r0, r1
 800b2aa:	6023      	str	r3, [r4, #0]
 800b2ac:	f7f6 fdc8 	bl	8001e40 <_sbrk>
 800b2b0:	1c43      	adds	r3, r0, #1
 800b2b2:	d102      	bne.n	800b2ba <_sbrk_r+0x1a>
 800b2b4:	6823      	ldr	r3, [r4, #0]
 800b2b6:	b103      	cbz	r3, 800b2ba <_sbrk_r+0x1a>
 800b2b8:	602b      	str	r3, [r5, #0]
 800b2ba:	bd38      	pop	{r3, r4, r5, pc}
 800b2bc:	20001240 	.word	0x20001240

0800b2c0 <__ascii_mbtowc>:
 800b2c0:	b082      	sub	sp, #8
 800b2c2:	b901      	cbnz	r1, 800b2c6 <__ascii_mbtowc+0x6>
 800b2c4:	a901      	add	r1, sp, #4
 800b2c6:	b142      	cbz	r2, 800b2da <__ascii_mbtowc+0x1a>
 800b2c8:	b14b      	cbz	r3, 800b2de <__ascii_mbtowc+0x1e>
 800b2ca:	7813      	ldrb	r3, [r2, #0]
 800b2cc:	600b      	str	r3, [r1, #0]
 800b2ce:	7812      	ldrb	r2, [r2, #0]
 800b2d0:	1c10      	adds	r0, r2, #0
 800b2d2:	bf18      	it	ne
 800b2d4:	2001      	movne	r0, #1
 800b2d6:	b002      	add	sp, #8
 800b2d8:	4770      	bx	lr
 800b2da:	4610      	mov	r0, r2
 800b2dc:	e7fb      	b.n	800b2d6 <__ascii_mbtowc+0x16>
 800b2de:	f06f 0001 	mvn.w	r0, #1
 800b2e2:	e7f8      	b.n	800b2d6 <__ascii_mbtowc+0x16>

0800b2e4 <memmove>:
 800b2e4:	4288      	cmp	r0, r1
 800b2e6:	b510      	push	{r4, lr}
 800b2e8:	eb01 0302 	add.w	r3, r1, r2
 800b2ec:	d807      	bhi.n	800b2fe <memmove+0x1a>
 800b2ee:	1e42      	subs	r2, r0, #1
 800b2f0:	4299      	cmp	r1, r3
 800b2f2:	d00a      	beq.n	800b30a <memmove+0x26>
 800b2f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2f8:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b2fc:	e7f8      	b.n	800b2f0 <memmove+0xc>
 800b2fe:	4283      	cmp	r3, r0
 800b300:	d9f5      	bls.n	800b2ee <memmove+0xa>
 800b302:	1881      	adds	r1, r0, r2
 800b304:	1ad2      	subs	r2, r2, r3
 800b306:	42d3      	cmn	r3, r2
 800b308:	d100      	bne.n	800b30c <memmove+0x28>
 800b30a:	bd10      	pop	{r4, pc}
 800b30c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b310:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b314:	e7f7      	b.n	800b306 <memmove+0x22>

0800b316 <__malloc_lock>:
 800b316:	4770      	bx	lr

0800b318 <__malloc_unlock>:
 800b318:	4770      	bx	lr

0800b31a <_realloc_r>:
 800b31a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b31c:	4607      	mov	r7, r0
 800b31e:	4614      	mov	r4, r2
 800b320:	460e      	mov	r6, r1
 800b322:	b921      	cbnz	r1, 800b32e <_realloc_r+0x14>
 800b324:	4611      	mov	r1, r2
 800b326:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b32a:	f7ff be0d 	b.w	800af48 <_malloc_r>
 800b32e:	b922      	cbnz	r2, 800b33a <_realloc_r+0x20>
 800b330:	f7ff fdbc 	bl	800aeac <_free_r>
 800b334:	4625      	mov	r5, r4
 800b336:	4628      	mov	r0, r5
 800b338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b33a:	f000 f821 	bl	800b380 <_malloc_usable_size_r>
 800b33e:	42a0      	cmp	r0, r4
 800b340:	d20f      	bcs.n	800b362 <_realloc_r+0x48>
 800b342:	4621      	mov	r1, r4
 800b344:	4638      	mov	r0, r7
 800b346:	f7ff fdff 	bl	800af48 <_malloc_r>
 800b34a:	4605      	mov	r5, r0
 800b34c:	2800      	cmp	r0, #0
 800b34e:	d0f2      	beq.n	800b336 <_realloc_r+0x1c>
 800b350:	4631      	mov	r1, r6
 800b352:	4622      	mov	r2, r4
 800b354:	f7ff fab6 	bl	800a8c4 <memcpy>
 800b358:	4631      	mov	r1, r6
 800b35a:	4638      	mov	r0, r7
 800b35c:	f7ff fda6 	bl	800aeac <_free_r>
 800b360:	e7e9      	b.n	800b336 <_realloc_r+0x1c>
 800b362:	4635      	mov	r5, r6
 800b364:	e7e7      	b.n	800b336 <_realloc_r+0x1c>

0800b366 <__ascii_wctomb>:
 800b366:	b149      	cbz	r1, 800b37c <__ascii_wctomb+0x16>
 800b368:	2aff      	cmp	r2, #255	; 0xff
 800b36a:	bf85      	ittet	hi
 800b36c:	238a      	movhi	r3, #138	; 0x8a
 800b36e:	6003      	strhi	r3, [r0, #0]
 800b370:	700a      	strbls	r2, [r1, #0]
 800b372:	f04f 30ff 	movhi.w	r0, #4294967295
 800b376:	bf98      	it	ls
 800b378:	2001      	movls	r0, #1
 800b37a:	4770      	bx	lr
 800b37c:	4608      	mov	r0, r1
 800b37e:	4770      	bx	lr

0800b380 <_malloc_usable_size_r>:
 800b380:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b384:	1f18      	subs	r0, r3, #4
 800b386:	2b00      	cmp	r3, #0
 800b388:	bfbc      	itt	lt
 800b38a:	580b      	ldrlt	r3, [r1, r0]
 800b38c:	18c0      	addlt	r0, r0, r3
 800b38e:	4770      	bx	lr

0800b390 <_init>:
 800b390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b392:	bf00      	nop
 800b394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b396:	bc08      	pop	{r3}
 800b398:	469e      	mov	lr, r3
 800b39a:	4770      	bx	lr

0800b39c <_fini>:
 800b39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b39e:	bf00      	nop
 800b3a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3a2:	bc08      	pop	{r3}
 800b3a4:	469e      	mov	lr, r3
 800b3a6:	4770      	bx	lr
